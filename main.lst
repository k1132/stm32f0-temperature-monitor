
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
20000038 l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccaGkBoT.o
f108f85f l       *ABS*	00000000 BootRAM
080014a8 l       .text	00000000 LoopCopyDataInit
080014a0 l       .text	00000000 CopyDataInit
080014bc l       .text	00000000 LoopFillZerobss
080014b6 l       .text	00000000 FillZerobss
080014ce l       .text	00000000 LoopForever
080014e8 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 _udivsi3.o
08000e00 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 main_it.c
00000000 l    df *ABS*	00000000 /home/mas/Projekt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /home/mas/Projekt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
20000038 l       .bss	00000000 __exidx_end
20000038 l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00000400 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
08000c14 g     F .text	00000012 USART_SetGuardTime
08000d04 g     F .text	00000018 USART_SetDEDeassertionTime
080003d0 g     F .text	00000020 RCC_HSICmd
08000464 g     F .text	00000018 RCC_LSEDriveConfig
08000a48 g     F .text	00000020 USART_MSBFirstCmd
080004bc g     F .text	00000024 RCC_PLLCmd
080007a4 g     F .text	0000001c RCC_AHBPeriphResetCmd
08000298 g     F .text	00000024 GPIO_PinAFConfig
080008a4 g     F .text	0000000c RCC_ClearITPendingBit
0800026c g     F .text	0000000a GPIO_ReadOutputDataBit
08000c60 g     F .text	00000018 USART_SetAutoRetryCount
20000028 g     O .bss	00000009 scratchpad
080014e8  w    F .text	00000002 TIM1_CC_IRQHandler
0800135a g     F .text	00000004 HardFault_Handler
080014e8  w    F .text	00000002 ADC1_COMP_IRQHandler
08001450 g     F .text	00000048 SysTick_Handler
08000518 g     F .text	0000000c RCC_MCOConfig
080002bc g     F .text	00000058 NVIC_Init
080014e8  w    F .text	00000002 PVD_IRQHandler
080005a8 g     F .text	00000018 RCC_CECCLKConfig
08001504 g       .text	00000000 _sidata
08001360 g     F .text	00000002 PendSV_Handler
08001358 g     F .text	00000002 NMI_Handler
080014e8  w    F .text	00000002 I2C1_IRQHandler
080007f8 g     F .text	0000001c RCC_ITConfig
080009f4 g     F .text	00000014 USART_DirectionModeCmd
08000c28 g     F .text	0000001a USART_SmartCardCmd
08000da0 g     F .text	0000000a USART_GetFlagStatus
08000adc g     F .text	00000010 USART_SetReceiverTimeOut
08001504 g       .text	00000000 _etext
08000ee0 g     F .text	00000098 USART1_Config
20000014 g       .bss	00000000 _sbss
08000524 g     F .text	00000014 RCC_SYSCLKConfig
08000ba4 g     F .text	00000014 USART_MuteModeWakeUpConfig
0800084c g     F .text	00000032 RCC_WaitForHSEStartUp
08000b70 g     F .text	00000012 USART_SetAddress
08000b4c g     F .text	00000014 USART_AutoBaudRateConfig
08000aec g     F .text	00000010 USART_SetPrescaler
0800072c g     F .text	00000024 RCC_BackupResetCmd
08000a28 g     F .text	00000020 USART_OneBitMethodCmd
080004f4 g     F .text	00000024 RCC_ClockSecuritySystemCmd
08000880 g     F .text	00000014 RCC_ClearFlag
20000010 g     O .data	00000004 SystemCoreClock
08000b68 g     F .text	00000008 USART_ReceiveData
080003ac g     F .text	00000010 RCC_HSEConfig
08000dfc g     F .text	00000088 __udivsi3
0800076c g     F .text	0000001c RCC_APB2PeriphClockCmd
20000020 g     O .bss	00000001 input
08000168 g     F .text	000000b6 GPIO_Init
0800049c g     F .text	00000020 RCC_PLLConfig
08000574 g     F .text	00000034 RCC_ADCCLKConfig
0800100c g     F .text	00000030 LED_Config
20000000 g       .data	00000000 _sdata
080014e8  w    F .text	00000002 SPI1_IRQHandler
080009d8 g     F .text	0000001a USART_Cmd
08000c9c g     F .text	0000001a USART_IrDACmd
08000330 g     F .text	0000001c SysTick_CLKSourceConfig
08000294 g     F .text	00000004 GPIO_Write
080014e8  w    F .text	00000002 TIM6_DAC_IRQHandler
08000278 g     F .text	00000004 GPIO_ReadOutputData
08000444 g     F .text	00000020 RCC_LSEConfig
08000df0 g     F .text	0000000a USART_ClearITPendingBit
08000708 g     F .text	00000024 RCC_RTCCLKCmd
20000018 g     O .bss	00000001 temperature
08000788 g     F .text	0000001c RCC_APB1PeriphClockCmd
08000894 g     F .text	00000010 RCC_GetITStatus
08000e9c g     F .text	00000044 __libc_init_array
08000750 g     F .text	0000001c RCC_AHBPeriphClockCmd
080014e8  w    F .text	00000002 EXTI2_3_IRQHandler
08000b84 g     F .text	00000020 USART_MuteModeCmd
08000a08 g     F .text	00000020 USART_OverSampling8Cmd
080014ec g     F .text	00000000 _init
080014e8  w    F .text	00000002 I2C2_IRQHandler
08001148 g     F .text	00000024 ConvertTemp
20000014 g     O .bss	00000004 done
080014e8  w    F .text	00000002 TIM17_IRQHandler
080014e8  w    F .text	00000002 RTC_IRQHandler
20000038 g       .bss	00000000 _ebss
08000db0 g     F .text	0000003e USART_GetITStatus
08001498  w    F .text	00000038 Reset_Handler
08000268 g     F .text	00000004 GPIO_ReadInputData
08000bc8 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08000814 g     F .text	00000038 RCC_GetFlagStatus
08000bb8 g     F .text	00000010 USART_AddressDetectionConfig
0800027c g     F .text	00000004 GPIO_SetBits
08000538 g     F .text	00000010 RCC_GetSYSCLKSource
080010d8 g     F .text	00000040 TReadByte
08000284 g     F .text	0000000e GPIO_WriteBit
0800116c g     F .text	00000054 ReadTemp
080005f0 g     F .text	00000108 RCC_GetClocksFreq
080014e8  w    F .text	00000002 TIM16_IRQHandler
080008f4 g     F .text	000000a0 USART_Init
080014e8  w    F .text	00000002 TIM3_IRQHandler
080014e8  w    F .text	00000002 EXTI4_15_IRQHandler
080014e8  w    F .text	00000002 RCC_IRQHandler
20000014 g       .bss	00000000 _bss
080014e8  w    F .text	00000002 DMA1_Channel1_IRQHandler
08000cb8 g     F .text	00000020 USART_DECmd
080014e8 g       .text	00000002 Default_Handler
08000bf8 g     F .text	0000001a USART_HalfDuplexCmd
08001118 g     F .text	00000030 TReadBit
080006f8 g     F .text	00000010 RCC_RTCCLKConfig
080014e8  w    F .text	00000002 CEC_IRQHandler
08000404 g     F .text	00000020 RCC_HSI14Cmd
080014e8  w    F .text	00000002 TIM14_IRQHandler
08000d44 g     F .text	00000032 USART_ITConfig
080014e8  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
08000a68 g     F .text	00000020 USART_DataInvCmd
20000024 g     O .bss	00000004 c
08000a9c g     F .text	00000020 USART_SWAPPinCmd
08000280 g     F .text	00000004 GPIO_ResetBits
08000c8c g     F .text	00000010 USART_IrDAConfig
080014e8  w    F .text	00000002 TIM15_IRQHandler
08000afc g     F .text	0000001a USART_STOPModeCmd
080014e8  w    F .text	00000002 EXTI0_1_IRQHandler
08000cd8 g     F .text	00000014 USART_DEPolarityConfig
08000e98  w    F .text	00000002 __aeabi_ldiv0
08000424 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08000d8c g     F .text	00000014 USART_OverrunDetectionConfig
080008b0 g     F .text	00000044 USART_DeInit
080014e8  w    F .text	00000002 SPI2_IRQHandler
080010a4 g     F .text	00000034 TWriteByte
080003bc g     F .text	00000014 RCC_AdjustHSICalibrationValue
080011c0 g     F .text	000000a4 main
08000f78 g     F .text	00000094 USART2_Config
080009ac g     F .text	00000020 USART_ClockInit
08000dfc g     F .text	00000000 __aeabi_uidiv
0800135e g     F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
08000dac g     F .text	00000004 USART_ClearFlag
08001264 g     F .text	000000f4 SystemInit
080003f0 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
2000001c g     O .bss	00000004 count
080000c4 g     F .text	000000a4 GPIO_DeInit
080014f8 g     F .text	00000000 _fini
0800034c g     F .text	00000060 RCC_DeInit
08000b18 g     F .text	00000014 USART_StopModeWakeUpSourceConfig
08000314 g     F .text	0000001c NVIC_SystemLPConfig
080014e8  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
080014e8  w    F .text	00000002 WWDG_IRQHandler
080007dc g     F .text	0000001c RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
080004e0 g     F .text	00000014 RCC_PREDIV1Config
080014e8  w    F .text	00000002 TIM2_IRQHandler
08000220 g     F .text	00000018 GPIO_StructInit
080014e8  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08000d78 g     F .text	00000014 USART_RequestCmd
20002000 g       *ABS*	00000000 _estack
08000b60 g     F .text	00000008 USART_SendData
08000e84 g     F .text	00000012 __aeabi_uidivmod
20000014 g       .data	00000000 _edata
08000994 g     F .text	00000016 USART_StructInit
08000abc g     F .text	00000020 USART_ReceiverTimeOutCmd
0800103c g     F .text	00000038 USART2_SetSpeed
080013e8 g     F .text	00000068 USART2_IRQHandler
08000c44 g     F .text	0000001a USART_SmartCardNACKCmd
08000c78 g     F .text	00000012 USART_SetBlockLength
08000000 g     O .isr_vector	00000000 g_pfnVectors
08000bd8 g     F .text	00000020 USART_LINCmd
080005d8 g     F .text	00000018 RCC_USARTCLKConfig
20000034 g     O .bss	00000004 commands
08000a88 g     F .text	00000014 USART_InvPinCmd
00000000  w      *UND*	00000000 __init_array_start
08000e98  w    F .text	00000002 __aeabi_idiv0
080005c0 g     F .text	00000018 RCC_I2CCLKConfig
08001074 g     F .text	00000030 TReset
0800055c g     F .text	00000018 RCC_PCLKConfig
080014e8  w    F .text	00000002 FLASH_IRQHandler
08000238 g     F .text	00000024 GPIO_PinLockConfig
08001364 g     F .text	00000084 USART1_IRQHandler
0800047c g     F .text	00000020 RCC_LSICmd
080009cc g     F .text	0000000c USART_ClockStructInit
080007c0 g     F .text	0000001c RCC_APB2PeriphResetCmd
08000b2c g     F .text	00000020 USART_AutoBaudRateCmd
080014e8  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_start
0800025c g     F .text	0000000a GPIO_ReadInputDataBit
08000d1c g     F .text	00000014 USART_DMACmd
08000cec g     F .text	00000018 USART_SetDEAssertionTime
08000548 g     F .text	00000014 RCC_HCLKConfig
08000d30 g     F .text	00000014 USART_DMAReceptionErrorConfig



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	03c0      	lsls	r0, r0, #15
 80000ec:	2101      	movs	r1, #1
 80000ee:	f000 fb59 	bl	80007a4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	03c0      	lsls	r0, r0, #15
 80000f6:	2100      	movs	r1, #0
 80000f8:	f000 fb54 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	0280      	lsls	r0, r0, #10
 8000102:	2101      	movs	r1, #1
 8000104:	f000 fb4e 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	0280      	lsls	r0, r0, #10
 800010c:	2100      	movs	r1, #0
 800010e:	f000 fb49 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	02c0      	lsls	r0, r0, #11
 8000118:	2101      	movs	r1, #1
 800011a:	f000 fb43 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	02c0      	lsls	r0, r0, #11
 8000122:	2100      	movs	r1, #0
 8000124:	f000 fb3e 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	0300      	lsls	r0, r0, #12
 800012e:	2101      	movs	r1, #1
 8000130:	f000 fb38 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	0300      	lsls	r0, r0, #12
 8000138:	2100      	movs	r1, #0
 800013a:	f000 fb33 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	0340      	lsls	r0, r0, #13
 8000144:	2101      	movs	r1, #1
 8000146:	f000 fb2d 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	0340      	lsls	r0, r0, #13
 800014e:	2100      	movs	r1, #0
 8000150:	f000 fb28 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	465f      	mov	r7, fp
 800016c:	4656      	mov	r6, sl
 800016e:	4644      	mov	r4, r8
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
 8000174:	b083      	sub	sp, #12
 8000176:	9101      	str	r1, [sp, #4]
 8000178:	680f      	ldr	r7, [r1, #0]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800017a:	2103      	movs	r1, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2601      	movs	r6, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	4688      	mov	r8, r1
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d029      	beq.n	80001e2 <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c34      	adds	r4, r6, #0
 8000190:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000192:	1c3d      	adds	r5, r7, #0
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	9c01      	ldr	r4, [sp, #4]
 800019c:	2101      	movs	r1, #1
 800019e:	7924      	ldrb	r4, [r4, #4]
 80001a0:	4249      	negs	r1, r1
 80001a2:	46a3      	mov	fp, r4
 80001a4:	4459      	add	r1, fp
 80001a6:	2901      	cmp	r1, #1
 80001a8:	d922      	bls.n	80001f0 <GPIO_Init+0x88>
 80001aa:	4645      	mov	r5, r8
 80001ac:	4095      	lsls	r5, r2
 80001ae:	43ed      	mvns	r5, r5
 80001b0:	46ac      	mov	ip, r5
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b2:	6805      	ldr	r5, [r0, #0]
 80001b4:	4664      	mov	r4, ip
 80001b6:	4025      	ands	r5, r4
 80001b8:	6005      	str	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ba:	6805      	ldr	r5, [r0, #0]
 80001bc:	465c      	mov	r4, fp
 80001be:	4094      	lsls	r4, r2
 80001c0:	432c      	orrs	r4, r5
 80001c2:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c4:	68c4      	ldr	r4, [r0, #12]
 80001c6:	4645      	mov	r5, r8
 80001c8:	4095      	lsls	r5, r2
 80001ca:	43ac      	bics	r4, r5
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001ce:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001d0:	79cc      	ldrb	r4, [r1, #7]
 80001d2:	68c5      	ldr	r5, [r0, #12]
 80001d4:	4094      	lsls	r4, r2
 80001d6:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001d8:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001da:	60c4      	str	r4, [r0, #12]
 80001dc:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2b10      	cmp	r3, #16
 80001e0:	d1d5      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001e2:	b003      	add	sp, #12
 80001e4:	bc3c      	pop	{r2, r3, r4, r5}
 80001e6:	4690      	mov	r8, r2
 80001e8:	4699      	mov	r9, r3
 80001ea:	46a2      	mov	sl, r4
 80001ec:	46ab      	mov	fp, r5
 80001ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f0:	4641      	mov	r1, r8
 80001f2:	6884      	ldr	r4, [r0, #8]
 80001f4:	4091      	lsls	r1, r2
 80001f6:	43c9      	mvns	r1, r1
 80001f8:	400c      	ands	r4, r1
 80001fa:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	9c01      	ldr	r4, [sp, #4]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	468c      	mov	ip, r1
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	7964      	ldrb	r4, [r4, #5]
 8000202:	6881      	ldr	r1, [r0, #8]
 8000204:	4094      	lsls	r4, r2
 8000206:	430c      	orrs	r4, r1
 8000208:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800020a:	8881      	ldrh	r1, [r0, #4]
 800020c:	43a9      	bics	r1, r5
 800020e:	8081      	strh	r1, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000210:	9901      	ldr	r1, [sp, #4]
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	798d      	ldrb	r5, [r1, #6]
 8000216:	409d      	lsls	r5, r3
 8000218:	4325      	orrs	r5, r4
 800021a:	8085      	strh	r5, [r0, #4]
 800021c:	e7c9      	b.n	80001b2 <GPIO_Init+0x4a>
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000222:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000224:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000226:	2300      	movs	r3, #0
 8000228:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 800022a:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800022c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800022e:	71c3      	strb	r3, [r0, #7]
}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	0000ffff 	.word	0x0000ffff

08000238 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000238:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800023a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800023c:	025b      	lsls	r3, r3, #9
 800023e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000240:	9b01      	ldr	r3, [sp, #4]
 8000242:	430b      	orrs	r3, r1
 8000244:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000246:	9b01      	ldr	r3, [sp, #4]
 8000248:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800024a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000250:	69c3      	ldr	r3, [r0, #28]
 8000252:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000254:	69c3      	ldr	r3, [r0, #28]
 8000256:	9301      	str	r3, [sp, #4]
}
 8000258:	b002      	add	sp, #8
 800025a:	4770      	bx	lr

0800025c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800025c:	8a00      	ldrh	r0, [r0, #16]
 800025e:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000260:	1e43      	subs	r3, r0, #1
 8000262:	4198      	sbcs	r0, r3
}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000268:	8a00      	ldrh	r0, [r0, #16]
}
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a80      	ldrh	r0, [r0, #20]
 800026e:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000270:	1e43      	subs	r3, r0, #1
 8000272:	4198      	sbcs	r0, r3
}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000278:	8a80      	ldrh	r0, [r0, #20]
}
 800027a:	4770      	bx	lr

0800027c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 800027c:	6181      	str	r1, [r0, #24]
}
 800027e:	4770      	bx	lr

08000280 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000280:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000282:	4770      	bx	lr

08000284 <GPIO_WriteBit>:
  * @note   The GPIO_Pin parameter can be GPIO_Pin_x where x can be: (0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.  
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000284:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000286:	2a00      	cmp	r2, #0
 8000288:	d101      	bne.n	800028e <GPIO_WriteBit+0xa>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800028a:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 800028c:	bd00      	pop	{pc}
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800028e:	6181      	str	r1, [r0, #24]
 8000290:	e7fc      	b.n	800028c <GPIO_WriteBit+0x8>
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000294:	8281      	strh	r1, [r0, #20]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000298:	2307      	movs	r3, #7
 800029a:	400b      	ands	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800029c:	08c9      	lsrs	r1, r1, #3
 800029e:	3108      	adds	r1, #8
 80002a0:	0089      	lsls	r1, r1, #2
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002a2:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002a4:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002a6:	580c      	ldr	r4, [r1, r0]
 80002a8:	250f      	movs	r5, #15
 80002aa:	409d      	lsls	r5, r3
 80002ac:	43ac      	bics	r4, r5
 80002ae:	500c      	str	r4, [r1, r0]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002b0:	580c      	ldr	r4, [r1, r0]
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	409a      	lsls	r2, r3
 80002b4:	1c13      	adds	r3, r2, #0
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002b6:	4323      	orrs	r3, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002b8:	500b      	str	r3, [r1, r0]
}
 80002ba:	bd30      	pop	{r4, r5, pc}

080002bc <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002bc:	7883      	ldrb	r3, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002be:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d109      	bne.n	80002d8 <NVIC_Init+0x1c>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002c4:	7803      	ldrb	r3, [r0, #0]
 80002c6:	211f      	movs	r1, #31
 80002c8:	4019      	ands	r1, r3
 80002ca:	2301      	movs	r3, #1
 80002cc:	408b      	lsls	r3, r1
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <NVIC_Init+0x54>)
 80002d0:	1c19      	adds	r1, r3, #0
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	50d1      	str	r1, [r2, r3]
  }
}
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002d8:	7805      	ldrb	r5, [r0, #0]
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <NVIC_Init+0x54>)
 80002dc:	08aa      	lsrs	r2, r5, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002de:	2103      	movs	r1, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002e0:	32c0      	adds	r2, #192	; 0xc0
 80002e2:	0092      	lsls	r2, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002e4:	400d      	ands	r5, r1
 80002e6:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002e8:	58d6      	ldr	r6, [r2, r3]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002ea:	00e9      	lsls	r1, r5, #3
 80002ec:	1c25      	adds	r5, r4, #0
 80002ee:	408d      	lsls	r5, r1
 80002f0:	43ae      	bics	r6, r5
 80002f2:	1c35      	adds	r5, r6, #0
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80002f4:	7846      	ldrb	r6, [r0, #1]
 80002f6:	01b6      	lsls	r6, r6, #6
 80002f8:	4034      	ands	r4, r6
 80002fa:	408c      	lsls	r4, r1
 80002fc:	1c29      	adds	r1, r5, #0
 80002fe:	4321      	orrs	r1, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8000300:	50d1      	str	r1, [r2, r3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000302:	7802      	ldrb	r2, [r0, #0]
 8000304:	211f      	movs	r1, #31
 8000306:	400a      	ands	r2, r1
 8000308:	2101      	movs	r1, #1
 800030a:	4091      	lsls	r1, r2
 800030c:	6019      	str	r1, [r3, #0]
 800030e:	e7e2      	b.n	80002d6 <NVIC_Init+0x1a>
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SystemLPConfig>:
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <NVIC_SystemLPConfig+0x18>)
  * @param  NewState: new state of LP condition. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000316:	b500      	push	{lr}
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000318:	691a      	ldr	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800031a:	2900      	cmp	r1, #0
 800031c:	d102      	bne.n	8000324 <NVIC_SystemLPConfig+0x10>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800031e:	4382      	bics	r2, r0
 8000320:	611a      	str	r2, [r3, #16]
  }
}
 8000322:	bd00      	pop	{pc}
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000324:	4310      	orrs	r0, r2
 8000326:	6118      	str	r0, [r3, #16]
 8000328:	e7fb      	b.n	8000322 <NVIC_SystemLPConfig+0xe>
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <SysTick_CLKSourceConfig>:
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_CLKSourceConfig+0x18>)
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000332:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000334:	681a      	ldr	r2, [r3, #0]
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000336:	2804      	cmp	r0, #4
 8000338:	d003      	beq.n	8000342 <SysTick_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800033a:	2104      	movs	r1, #4
 800033c:	438a      	bics	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
  }
}
 8000340:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000342:	4310      	orrs	r0, r2
 8000344:	6018      	str	r0, [r3, #0]
 8000346:	e7fb      	b.n	8000340 <SysTick_CLKSourceConfig+0x10>
 8000348:	e000e010 	.word	0xe000e010

0800034c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <RCC_DeInit+0x48>)
 800034e:	2201      	movs	r2, #1
 8000350:	6819      	ldr	r1, [r3, #0]
 8000352:	4311      	orrs	r1, r2
 8000354:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000356:	6858      	ldr	r0, [r3, #4]
 8000358:	490f      	ldr	r1, [pc, #60]	; (8000398 <RCC_DeInit+0x4c>)
 800035a:	4001      	ands	r1, r0
 800035c:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	490e      	ldr	r1, [pc, #56]	; (800039c <RCC_DeInit+0x50>)
 8000362:	4001      	ands	r1, r0
 8000364:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	490d      	ldr	r1, [pc, #52]	; (80003a0 <RCC_DeInit+0x54>)
 800036a:	4001      	ands	r1, r0
 800036c:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800036e:	6858      	ldr	r0, [r3, #4]
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <RCC_DeInit+0x58>)
 8000372:	4001      	ands	r1, r0
 8000374:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000378:	200f      	movs	r0, #15
 800037a:	4381      	bics	r1, r0
 800037c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800037e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000380:	4909      	ldr	r1, [pc, #36]	; (80003a8 <RCC_DeInit+0x5c>)
 8000382:	4001      	ands	r1, r0
 8000384:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000388:	4391      	bics	r1, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800038a:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800038c:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	4770      	bx	lr
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000
 8000398:	f8ffb80c 	.word	0xf8ffb80c
 800039c:	fef6ffff 	.word	0xfef6ffff
 80003a0:	fffbffff 	.word	0xfffbffff
 80003a4:	ffc0ffff 	.word	0xffc0ffff
 80003a8:	fffffeac 	.word	0xfffffeac

080003ac <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80003ac:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <RCC_HSEConfig+0xc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80003b2:	7018      	strb	r0, [r3, #0]

}
 80003b4:	4770      	bx	lr
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021002 	.word	0x40021002

080003bc <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80003be:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80003c0:	681a      	ldr	r2, [r3, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80003c2:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80003c4:	438a      	bics	r2, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80003c6:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR = tmpreg;
 80003c8:	6018      	str	r0, [r3, #0]
}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80003d0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d104      	bne.n	80003e2 <RCC_HSICmd+0x12>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	2101      	movs	r1, #1
 80003dc:	438a      	bics	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
  }
}
 80003e0:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	2201      	movs	r2, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e7f9      	b.n	80003e0 <RCC_HSICmd+0x10>
 80003ec:	40021000 	.word	0x40021000

080003f0 <RCC_AdjustHSI14CalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80003f2:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80003f6:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80003f8:	438a      	bics	r2, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80003fa:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR2 = tmpreg;
 80003fc:	6358      	str	r0, [r3, #52]	; 0x34
}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <RCC_HSI14Cmd>:
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 8000404:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000408:	2800      	cmp	r0, #0
 800040a:	d104      	bne.n	8000416 <RCC_HSI14Cmd+0x12>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	2101      	movs	r1, #1
 8000410:	438a      	bics	r2, r1
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000414:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000418:	2201      	movs	r2, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
 800041e:	e7f9      	b.n	8000414 <RCC_HSI14Cmd+0x10>
 8000420:	40021000 	.word	0x40021000

08000424 <RCC_HSI14ADCRequestCmd>:
  * @param  NewState: new state of the HSI14 ADC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
 8000424:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000428:	2800      	cmp	r0, #0
 800042a:	d104      	bne.n	8000436 <RCC_HSI14ADCRequestCmd+0x12>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 800042c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800042e:	2204      	movs	r2, #4
 8000430:	430a      	orrs	r2, r1
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000434:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000438:	2104      	movs	r1, #4
 800043a:	438a      	bics	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	e7f9      	b.n	8000434 <RCC_HSI14ADCRequestCmd+0x10>
 8000440:	40021000 	.word	0x40021000

08000444 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <RCC_LSEConfig+0x1c>)
 8000446:	2101      	movs	r1, #1
 8000448:	6a1a      	ldr	r2, [r3, #32]
 800044a:	438a      	bics	r2, r1
 800044c:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800044e:	6a1a      	ldr	r2, [r3, #32]
 8000450:	2104      	movs	r1, #4
 8000452:	438a      	bics	r2, r1
 8000454:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000456:	6a1a      	ldr	r2, [r3, #32]
 8000458:	4310      	orrs	r0, r2
 800045a:	6218      	str	r0, [r3, #32]
}
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <RCC_LSEDriveConfig+0x14>)
 8000466:	2118      	movs	r1, #24
 8000468:	6a1a      	ldr	r2, [r3, #32]
 800046a:	438a      	bics	r2, r1
 800046c:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800046e:	6a1a      	ldr	r2, [r3, #32]
 8000470:	4310      	orrs	r0, r2
 8000472:	6218      	str	r0, [r3, #32]
}
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800047c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000480:	2800      	cmp	r0, #0
 8000482:	d104      	bne.n	800048e <RCC_LSICmd+0x12>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8000484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000486:	2101      	movs	r1, #1
 8000488:	438a      	bics	r2, r1
 800048a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800048c:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800048e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000490:	2201      	movs	r2, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
 8000496:	e7f9      	b.n	800048c <RCC_LSICmd+0x10>
 8000498:	40021000 	.word	0x40021000

0800049c <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 800049e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <RCC_PLLConfig+0x1c>)
 80004a2:	685c      	ldr	r4, [r3, #4]
 80004a4:	4022      	ands	r2, r4
 80004a6:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	4310      	orrs	r0, r2
 80004ac:	4308      	orrs	r0, r1
 80004ae:	6058      	str	r0, [r3, #4]
}
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	ffc2ffff 	.word	0xffc2ffff

080004bc <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <RCC_PLLCmd+0x1c>)
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80004be:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004c0:	6819      	ldr	r1, [r3, #0]
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d103      	bne.n	80004ce <RCC_PLLCmd+0x12>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <RCC_PLLCmd+0x20>)
 80004c8:	400a      	ands	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
  }
}
 80004cc:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0452      	lsls	r2, r2, #17
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e7f9      	b.n	80004cc <RCC_PLLCmd+0x10>
 80004d8:	40021000 	.word	0x40021000
 80004dc:	feffffff 	.word	0xfeffffff

080004e0 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <RCC_PREDIV1Config+0x10>)
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80004e2:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80004e6:	438a      	bics	r2, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80004e8:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80004ea:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <RCC_ClockSecuritySystemCmd+0x1c>)
  * @param  NewState: new state of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80004f6:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 80004f8:	6819      	ldr	r1, [r3, #0]
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d103      	bne.n	8000506 <RCC_ClockSecuritySystemCmd+0x12>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <RCC_ClockSecuritySystemCmd+0x20>)
 8000500:	400a      	ands	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
  }
}
 8000504:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0312      	lsls	r2, r2, #12
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e7f9      	b.n	8000504 <RCC_ClockSecuritySystemCmd+0x10>
 8000510:	40021000 	.word	0x40021000
 8000514:	fff7ffff 	.word	0xfff7ffff

08000518 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <RCC_MCOConfig+0x8>)
 800051a:	7018      	strb	r0, [r3, #0]
}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021007 	.word	0x40021007

08000524 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <RCC_SYSCLKConfig+0x10>)
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000526:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000528:	685a      	ldr	r2, [r3, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800052a:	438a      	bics	r2, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800052c:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800052e:	6058      	str	r0, [r3, #4]
}
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <RCC_GetSYSCLKSource+0xc>)
 800053a:	200c      	movs	r0, #12
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4018      	ands	r0, r3
}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <RCC_HCLKConfig+0x10>)
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800054a:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 800054c:	685a      	ldr	r2, [r3, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800054e:	438a      	bics	r2, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000550:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000552:	6058      	str	r0, [r3, #4]
}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000560:	6859      	ldr	r1, [r3, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000562:	400a      	ands	r2, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000564:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000566:	6058      	str	r0, [r3, #4]
}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	fffff8ff 	.word	0xfffff8ff

08000574 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <RCC_ADCCLKConfig+0x28>)
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <RCC_ADCCLKConfig+0x2c>)
 8000578:	6859      	ldr	r1, [r3, #4]
 800057a:	400a      	ands	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 800057e:	6859      	ldr	r1, [r3, #4]
 8000580:	0402      	lsls	r2, r0, #16
 8000582:	0c12      	lsrs	r2, r2, #16
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 800058c:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800058e:	400a      	ands	r2, r1
 8000590:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000594:	4310      	orrs	r0, r2
 8000596:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000598:	4770      	bx	lr
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	ffffbfff 	.word	0xffffbfff
 80005a4:	fffffeff 	.word	0xfffffeff

080005a8 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <RCC_CECCLKConfig+0x14>)
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ae:	438a      	bics	r2, r1
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	4310      	orrs	r0, r2
 80005b6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005b8:	4770      	bx	lr
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <RCC_I2CCLKConfig+0x14>)
 80005c2:	2110      	movs	r1, #16
 80005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c6:	438a      	bics	r2, r1
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	4310      	orrs	r0, r2
 80005ce:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005d0:	4770      	bx	lr
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <RCC_USARTCLKConfig+0x14>)
 80005da:	2103      	movs	r1, #3
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	438a      	bics	r2, r1
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	4310      	orrs	r0, r2
 80005e6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005e8:	4770      	bx	lr
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f0:	4a3b      	ldr	r2, [pc, #236]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005f2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f4:	6853      	ldr	r3, [r2, #4]
 80005f6:	210c      	movs	r1, #12
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005f8:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005fa:	400b      	ands	r3, r1
  
  switch (tmp)
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d001      	beq.n	8000604 <RCC_GetClocksFreq+0x14>
 8000600:	2b08      	cmp	r3, #8
 8000602:	d052      	beq.n	80006aa <RCC_GetClocksFreq+0xba>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000604:	4837      	ldr	r0, [pc, #220]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 8000606:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 800060a:	4937      	ldr	r1, [pc, #220]	; (80006e8 <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800060c:	685a      	ldr	r2, [r3, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800060e:	1c05      	adds	r5, r0, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000610:	0612      	lsls	r2, r2, #24
  tmp = tmp >> 4;
 8000612:	0f12      	lsrs	r2, r2, #28
  presc = APBAHBPrescTable[tmp]; 
 8000614:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000616:	40d5      	lsrs	r5, r2
 8000618:	6065      	str	r5, [r4, #4]
 800061a:	1c2a      	adds	r2, r5, #0

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 800061c:	685d      	ldr	r5, [r3, #4]
 800061e:	056d      	lsls	r5, r5, #21
  tmp = tmp >> 8;
 8000620:	0f6d      	lsrs	r5, r5, #29
  presc = APBAHBPrescTable[tmp];
 8000622:	5d49      	ldrb	r1, [r1, r5]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000624:	40ca      	lsrs	r2, r1
 8000626:	60a2      	str	r2, [r4, #8]
 8000628:	1c11      	adds	r1, r2, #0

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	05d5      	lsls	r5, r2, #23
 800062e:	d421      	bmi.n	8000674 <RCC_GetClocksFreq+0x84>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <RCC_GetClocksFreq+0xfc>)
 8000632:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	065d      	lsls	r5, r3, #25
 800063a:	d424      	bmi.n	8000686 <RCC_GetClocksFreq+0x96>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <RCC_GetClocksFreq+0x100>)
 800063e:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	06da      	lsls	r2, r3, #27
 8000646:	d425      	bmi.n	8000694 <RCC_GetClocksFreq+0xa4>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800064c:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800064e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8000650:	2303      	movs	r3, #3
 8000652:	422b      	tst	r3, r5
 8000654:	d024      	beq.n	80006a0 <RCC_GetClocksFreq+0xb0>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000656:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000658:	4019      	ands	r1, r3
 800065a:	2901      	cmp	r1, #1
 800065c:	d03a      	beq.n	80006d4 <RCC_GetClocksFreq+0xe4>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800065e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000660:	4019      	ands	r1, r3
 8000662:	2902      	cmp	r1, #2
 8000664:	d038      	beq.n	80006d8 <RCC_GetClocksFreq+0xe8>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000666:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000668:	4013      	ands	r3, r2
 800066a:	2b03      	cmp	r3, #3
 800066c:	d101      	bne.n	8000672 <RCC_GetClocksFreq+0x82>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 8000670:	61a3      	str	r3, [r4, #24]
  }
}
 8000672:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	045a      	lsls	r2, r3, #17
 8000678:	d414      	bmi.n	80006a4 <RCC_GetClocksFreq+0xb4>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 800067a:	084b      	lsrs	r3, r1, #1
 800067c:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	065d      	lsls	r5, r3, #25
 8000684:	d5da      	bpl.n	800063c <RCC_GetClocksFreq+0x4c>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	06da      	lsls	r2, r3, #27
 8000692:	d5d9      	bpl.n	8000648 <RCC_GetClocksFreq+0x58>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000696:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000698:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800069a:	2303      	movs	r3, #3
 800069c:	422b      	tst	r3, r5
 800069e:	d1da      	bne.n	8000656 <RCC_GetClocksFreq+0x66>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80006a0:	61a1      	str	r1, [r4, #24]
 80006a2:	e7e6      	b.n	8000672 <RCC_GetClocksFreq+0x82>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80006a4:	088b      	lsrs	r3, r1, #2
 80006a6:	60e3      	str	r3, [r4, #12]
 80006a8:	e7c4      	b.n	8000634 <RCC_GetClocksFreq+0x44>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80006aa:	6855      	ldr	r5, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80006ac:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80006ae:	02ad      	lsls	r5, r5, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 80006b0:	0f2d      	lsrs	r5, r5, #28
 80006b2:	3502      	adds	r5, #2
      
      if (pllsource == 0x00)
 80006b4:	03d9      	lsls	r1, r3, #15
 80006b6:	d403      	bmi.n	80006c0 <RCC_GetClocksFreq+0xd0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <RCC_GetClocksFreq+0x104>)
 80006ba:	4368      	muls	r0, r5
 80006bc:	6020      	str	r0, [r4, #0]
 80006be:	e7a3      	b.n	8000608 <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80006c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80006c2:	210f      	movs	r1, #15
 80006c4:	4019      	ands	r1, r3
 80006c6:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 80006ca:	f000 fb97 	bl	8000dfc <__aeabi_uidiv>
 80006ce:	4368      	muls	r0, r5
 80006d0:	6020      	str	r0, [r4, #0]
 80006d2:	e799      	b.n	8000608 <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006d4:	61a0      	str	r0, [r4, #24]
 80006d6:	e7cc      	b.n	8000672 <RCC_GetClocksFreq+0x82>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	61a3      	str	r3, [r4, #24]
 80006de:	e7c8      	b.n	8000672 <RCC_GetClocksFreq+0x82>
 80006e0:	40021000 	.word	0x40021000
 80006e4:	007a1200 	.word	0x007a1200
 80006e8:	20000000 	.word	0x20000000
 80006ec:	00d59f80 	.word	0x00d59f80
 80006f0:	00008012 	.word	0x00008012
 80006f4:	003d0900 	.word	0x003d0900

080006f8 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <RCC_RTCCLKConfig+0xc>)
 80006fa:	6a1a      	ldr	r2, [r3, #32]
 80006fc:	4310      	orrs	r0, r2
 80006fe:	6218      	str	r0, [r3, #32]
}
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <RCC_RTCCLKCmd+0x1c>)
  * @param  NewState: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800070a:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800070c:	6a19      	ldr	r1, [r3, #32]
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800070e:	2800      	cmp	r0, #0
 8000710:	d103      	bne.n	800071a <RCC_RTCCLKCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <RCC_RTCCLKCmd+0x20>)
 8000714:	400a      	ands	r2, r1
 8000716:	621a      	str	r2, [r3, #32]
  }
}
 8000718:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0212      	lsls	r2, r2, #8
 800071e:	430a      	orrs	r2, r1
 8000720:	621a      	str	r2, [r3, #32]
 8000722:	e7f9      	b.n	8000718 <RCC_RTCCLKCmd+0x10>
 8000724:	40021000 	.word	0x40021000
 8000728:	ffff7fff 	.word	0xffff7fff

0800072c <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <RCC_BackupResetCmd+0x1c>)
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800072e:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000730:	6a19      	ldr	r1, [r3, #32]
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000732:	2800      	cmp	r0, #0
 8000734:	d103      	bne.n	800073e <RCC_BackupResetCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <RCC_BackupResetCmd+0x20>)
 8000738:	400a      	ands	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
  }
}
 800073c:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0252      	lsls	r2, r2, #9
 8000742:	430a      	orrs	r2, r1
 8000744:	621a      	str	r2, [r3, #32]
 8000746:	e7f9      	b.n	800073c <RCC_BackupResetCmd+0x10>
 8000748:	40021000 	.word	0x40021000
 800074c:	fffeffff 	.word	0xfffeffff

08000750 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <RCC_AHBPeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000752:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000754:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000756:	2900      	cmp	r1, #0
 8000758:	d102      	bne.n	8000760 <RCC_AHBPeriphClockCmd+0x10>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800075a:	4382      	bics	r2, r0
 800075c:	615a      	str	r2, [r3, #20]
  }
}
 800075e:	bd00      	pop	{pc}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000760:	4310      	orrs	r0, r2
 8000762:	6158      	str	r0, [r3, #20]
 8000764:	e7fb      	b.n	800075e <RCC_AHBPeriphClockCmd+0xe>
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <RCC_APB2PeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800076e:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000770:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000772:	2900      	cmp	r1, #0
 8000774:	d102      	bne.n	800077c <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000776:	4382      	bics	r2, r0
 8000778:	619a      	str	r2, [r3, #24]
  }
}
 800077a:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800077c:	4310      	orrs	r0, r2
 800077e:	6198      	str	r0, [r3, #24]
 8000780:	e7fb      	b.n	800077a <RCC_APB2PeriphClockCmd+0xe>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <RCC_APB1PeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800078a:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800078c:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800078e:	2900      	cmp	r1, #0
 8000790:	d102      	bne.n	8000798 <RCC_APB1PeriphClockCmd+0x10>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000792:	4382      	bics	r2, r0
 8000794:	61da      	str	r2, [r3, #28]
  }
}
 8000796:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000798:	4310      	orrs	r0, r2
 800079a:	61d8      	str	r0, [r3, #28]
 800079c:	e7fb      	b.n	8000796 <RCC_APB1PeriphClockCmd+0xe>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <RCC_AHBPeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80007a6:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007aa:	2900      	cmp	r1, #0
 80007ac:	d102      	bne.n	80007b4 <RCC_AHBPeriphResetCmd+0x10>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 80007ae:	4382      	bics	r2, r0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80007b2:	bd00      	pop	{pc}
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007b4:	4310      	orrs	r0, r2
 80007b6:	6298      	str	r0, [r3, #40]	; 0x28
 80007b8:	e7fb      	b.n	80007b2 <RCC_AHBPeriphResetCmd+0xe>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <RCC_APB2PeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007c2:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007c4:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d102      	bne.n	80007d0 <RCC_APB2PeriphResetCmd+0x10>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80007ca:	4382      	bics	r2, r0
 80007cc:	60da      	str	r2, [r3, #12]
  }
}
 80007ce:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007d0:	4310      	orrs	r0, r2
 80007d2:	60d8      	str	r0, [r3, #12]
 80007d4:	e7fb      	b.n	80007ce <RCC_APB2PeriphResetCmd+0xe>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000

080007dc <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <RCC_APB1PeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007de:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007e0:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d102      	bne.n	80007ec <RCC_APB1PeriphResetCmd+0x10>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80007e6:	4382      	bics	r2, r0
 80007e8:	611a      	str	r2, [r3, #16]
  }
}
 80007ea:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007ec:	4310      	orrs	r0, r2
 80007ee:	6118      	str	r0, [r3, #16]
 80007f0:	e7fb      	b.n	80007ea <RCC_APB1PeriphResetCmd+0xe>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80007f8:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <RCC_ITConfig+0x18>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007fe:	2900      	cmp	r1, #0
 8000800:	d102      	bne.n	8000808 <RCC_ITConfig+0x10>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000802:	4382      	bics	r2, r0
 8000804:	701a      	strb	r2, [r3, #0]
  }
}
 8000806:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000808:	4310      	orrs	r0, r2
 800080a:	7018      	strb	r0, [r3, #0]
 800080c:	e7fb      	b.n	8000806 <RCC_ITConfig+0xe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021009 	.word	0x40021009

08000814 <RCC_GetFlagStatus>:
  *             @arg RCC_FLAG_LPWRRST: Low Power reset
  *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready  
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000814:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000816:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8000818:	d108      	bne.n	800082c <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <RCC_GetFlagStatus+0x34>)
 800081c:	681a      	ldr	r2, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800081e:	231f      	movs	r3, #31
 8000820:	4018      	ands	r0, r3
 8000822:	40c2      	lsrs	r2, r0
 8000824:	1c10      	adds	r0, r2, #0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000826:	2301      	movs	r3, #1
 8000828:	4018      	ands	r0, r3
}
 800082a:	bd00      	pop	{pc}

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 800082c:	2b01      	cmp	r3, #1
 800082e:	d004      	beq.n	800083a <RCC_GetFlagStatus+0x26>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000830:	2b02      	cmp	r3, #2
 8000832:	d005      	beq.n	8000840 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <RCC_GetFlagStatus+0x34>)
 8000836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000838:	e7f1      	b.n	800081e <RCC_GetFlagStatus+0xa>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <RCC_GetFlagStatus+0x34>)
 800083c:	6a1a      	ldr	r2, [r3, #32]
 800083e:	e7ee      	b.n	800081e <RCC_GetFlagStatus+0xa>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <RCC_GetFlagStatus+0x34>)
 8000842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000844:	e7eb      	b.n	800081e <RCC_GetFlagStatus+0xa>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000

0800084c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800084c:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 800084e:	2300      	movs	r3, #0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000850:	b082      	sub	sp, #8
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000852:	24a0      	movs	r4, #160	; 0xa0
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 8000854:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000856:	00e4      	lsls	r4, r4, #3
 8000858:	e001      	b.n	800085e <RCC_WaitForHSEStartUp+0x12>
 800085a:	2800      	cmp	r0, #0
 800085c:	d108      	bne.n	8000870 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800085e:	2011      	movs	r0, #17
 8000860:	f7ff ffd8 	bl	8000814 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000864:	9b01      	ldr	r3, [sp, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800086a:	9b01      	ldr	r3, [sp, #4]
 800086c:	42a3      	cmp	r3, r4
 800086e:	d1f4      	bne.n	800085a <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000870:	2011      	movs	r0, #17
 8000872:	f7ff ffcf 	bl	8000814 <RCC_GetFlagStatus>
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000876:	1e43      	subs	r3, r0, #1
 8000878:	4198      	sbcs	r0, r3
}
 800087a:	b002      	add	sp, #8
 800087c:	bd10      	pop	{r4, pc}
 800087e:	46c0      	nop			; (mov r8, r8)

08000880 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <RCC_ClearFlag+0x10>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000886:	0452      	lsls	r2, r2, #17
 8000888:	430a      	orrs	r2, r1
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800088c:	4770      	bx	lr
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <RCC_GetITStatus+0xc>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800089a:	1e43      	subs	r3, r0, #1
 800089c:	4198      	sbcs	r0, r3
}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <RCC_ClearITPendingBit+0x8>)
 80008a6:	7018      	strb	r0, [r3, #0]
}
 80008a8:	4770      	bx	lr
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	4002100a 	.word	0x4002100a

080008b0 <USART_DeInit>:
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 80008b0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <USART_DeInit+0x3c>)
 80008b4:	4298      	cmp	r0, r3
 80008b6:	d00e      	beq.n	80008d6 <USART_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else 
  {
    if  (USARTx == USART2)
 80008b8:	4b0d      	ldr	r3, [pc, #52]	; (80008f0 <USART_DeInit+0x40>)
 80008ba:	4298      	cmp	r0, r3
 80008bc:	d000      	beq.n	80008c0 <USART_DeInit+0x10>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 80008be:	bd08      	pop	{r3, pc}
  }
  else 
  {
    if  (USARTx == USART2)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 80008c0:	2080      	movs	r0, #128	; 0x80
 80008c2:	0280      	lsls	r0, r0, #10
 80008c4:	2101      	movs	r1, #1
 80008c6:	f7ff ff89 	bl	80007dc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 80008ca:	2080      	movs	r0, #128	; 0x80
 80008cc:	0280      	lsls	r0, r0, #10
 80008ce:	2100      	movs	r1, #0
 80008d0:	f7ff ff84 	bl	80007dc <RCC_APB1PeriphResetCmd>
 80008d4:	e7f3      	b.n	80008be <USART_DeInit+0xe>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 80008d6:	2080      	movs	r0, #128	; 0x80
 80008d8:	01c0      	lsls	r0, r0, #7
 80008da:	2101      	movs	r1, #1
 80008dc:	f7ff ff70 	bl	80007c0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80008e0:	2080      	movs	r0, #128	; 0x80
 80008e2:	01c0      	lsls	r0, r0, #7
 80008e4:	2100      	movs	r1, #0
 80008e6:	f7ff ff6b 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 80008ea:	e7e8      	b.n	80008be <USART_DeInit+0xe>
 80008ec:	40013800 	.word	0x40013800
 80008f0:	40004400 	.word	0x40004400

080008f4 <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80008f4:	6803      	ldr	r3, [r0, #0]
 80008f6:	2201      	movs	r2, #1
 80008f8:	4393      	bics	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80008fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80008fc:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80008fe:	6842      	ldr	r2, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <USART_Init+0x8c>)
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000902:	1c0d      	adds	r5, r1, #0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000904:	6889      	ldr	r1, [r1, #8]
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000906:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000908:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800090a:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800090c:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 800090e:	4b1d      	ldr	r3, [pc, #116]	; (8000984 <USART_Init+0x90>)
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000910:	6869      	ldr	r1, [r5, #4]
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000912:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000914:	68eb      	ldr	r3, [r5, #12]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000916:	b089      	sub	sp, #36	; 0x24
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000918:	430b      	orrs	r3, r1
 800091a:	6929      	ldr	r1, [r5, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800091c:	1c04      	adds	r4, r0, #0
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 800091e:	430b      	orrs	r3, r1
 8000920:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 8000922:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000924:	6882      	ldr	r2, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000926:	4b18      	ldr	r3, [pc, #96]	; (8000988 <USART_Init+0x94>)
 8000928:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 800092a:	696a      	ldr	r2, [r5, #20]
 800092c:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 800092e:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000930:	a801      	add	r0, sp, #4
 8000932:	f7ff fe5d 	bl	80005f0 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <USART_Init+0x98>)
 8000938:	429c      	cmp	r4, r3
 800093a:	d01e      	beq.n	800097a <USART_Init+0x86>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 800093c:	9f03      	ldr	r7, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800093e:	6823      	ldr	r3, [r4, #0]
 8000940:	0419      	lsls	r1, r3, #16
 8000942:	d500      	bpl.n	8000946 <USART_Init+0x52>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 8000944:	007f      	lsls	r7, r7, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000946:	682e      	ldr	r6, [r5, #0]
 8000948:	1c38      	adds	r0, r7, #0
 800094a:	1c31      	adds	r1, r6, #0
 800094c:	f000 fa56 	bl	8000dfc <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000950:	1c31      	adds	r1, r6, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 8000952:	1c05      	adds	r5, r0, #0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8000954:	1c38      	adds	r0, r7, #0
 8000956:	f000 fa95 	bl	8000e84 <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 800095a:	0876      	lsrs	r6, r6, #1
  {
    divider++;
 800095c:	2300      	movs	r3, #0
 800095e:	42b1      	cmp	r1, r6
 8000960:	415b      	adcs	r3, r3
 8000962:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000964:	6823      	ldr	r3, [r4, #0]
 8000966:	041a      	lsls	r2, r3, #16
 8000968:	d504      	bpl.n	8000974 <USART_Init+0x80>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 800096a:	4a09      	ldr	r2, [pc, #36]	; (8000990 <USART_Init+0x9c>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 800096c:	072b      	lsls	r3, r5, #28
 800096e:	0f5b      	lsrs	r3, r3, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8000970:	4015      	ands	r5, r2
 8000972:	431d      	orrs	r5, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 8000974:	81a5      	strh	r5, [r4, #12]
}
 8000976:	b009      	add	sp, #36	; 0x24
 8000978:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 800097a:	9f07      	ldr	r7, [sp, #28]
 800097c:	e7df      	b.n	800093e <USART_Init+0x4a>
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	ffffcfff 	.word	0xffffcfff
 8000984:	ffffe9f3 	.word	0xffffe9f3
 8000988:	fffffcff 	.word	0xfffffcff
 800098c:	40013800 	.word	0x40013800
 8000990:	0000fff0 	.word	0x0000fff0

08000994 <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 8000994:	2396      	movs	r3, #150	; 0x96
 8000996:	019b      	lsls	r3, r3, #6
 8000998:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800099a:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 800099c:	2300      	movs	r3, #0
 800099e:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 80009a0:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 80009a2:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 80009a4:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 80009a6:	6143      	str	r3, [r0, #20]
}
 80009a8:	4770      	bx	lr
 80009aa:	46c0      	nop			; (mov r8, r8)

080009ac <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80009ac:	6842      	ldr	r2, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80009ae:	4b06      	ldr	r3, [pc, #24]	; (80009c8 <USART_ClockInit+0x1c>)
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 80009b0:	b510      	push	{r4, lr}
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 80009b2:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 80009b4:	680c      	ldr	r4, [r1, #0]
 80009b6:	684b      	ldr	r3, [r1, #4]
 80009b8:	4323      	orrs	r3, r4
 80009ba:	688c      	ldr	r4, [r1, #8]
 80009bc:	68c9      	ldr	r1, [r1, #12]
 80009be:	4323      	orrs	r3, r4
 80009c0:	430b      	orrs	r3, r1
 80009c2:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80009c4:	6043      	str	r3, [r0, #4]
}
 80009c6:	bd10      	pop	{r4, pc}
 80009c8:	fffff0ff 	.word	0xfffff0ff

080009cc <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 80009cc:	2300      	movs	r3, #0
 80009ce:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 80009d0:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 80009d2:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 80009d4:	60c3      	str	r3, [r0, #12]
}
 80009d6:	4770      	bx	lr

080009d8 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80009d8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009da:	2900      	cmp	r1, #0
 80009dc:	d104      	bne.n	80009e8 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80009de:	6803      	ldr	r3, [r0, #0]
 80009e0:	2201      	movs	r2, #1
 80009e2:	4393      	bics	r3, r2
 80009e4:	6003      	str	r3, [r0, #0]
  }
}
 80009e6:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80009e8:	6802      	ldr	r2, [r0, #0]
 80009ea:	2301      	movs	r3, #1
 80009ec:	4313      	orrs	r3, r2
 80009ee:	6003      	str	r3, [r0, #0]
 80009f0:	e7f9      	b.n	80009e6 <USART_Cmd+0xe>
 80009f2:	46c0      	nop			; (mov r8, r8)

080009f4 <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 80009f4:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80009f6:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	d102      	bne.n	8000a02 <USART_DirectionModeCmd+0xe>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 80009fc:	438b      	bics	r3, r1
 80009fe:	6003      	str	r3, [r0, #0]
  }
}
 8000a00:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 8000a02:	4319      	orrs	r1, r3
 8000a04:	6001      	str	r1, [r0, #0]
 8000a06:	e7fb      	b.n	8000a00 <USART_DirectionModeCmd+0xc>

08000a08 <USART_OverSampling8Cmd>:
  * @note   This function has to be called before calling USART_Init() function
  *         in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a08:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000a0a:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d103      	bne.n	8000a18 <USART_OverSampling8Cmd+0x10>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 8000a10:	4b04      	ldr	r3, [pc, #16]	; (8000a24 <USART_OverSampling8Cmd+0x1c>)
 8000a12:	4013      	ands	r3, r2
 8000a14:	6003      	str	r3, [r0, #0]
  }
}  
 8000a16:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 8000a18:	2380      	movs	r3, #128	; 0x80
 8000a1a:	021b      	lsls	r3, r3, #8
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	6003      	str	r3, [r0, #0]
 8000a20:	e7f9      	b.n	8000a16 <USART_OverSampling8Cmd+0xe>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	ffff7fff 	.word	0xffff7fff

08000a28 <USART_OneBitMethodCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a28:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000a2a:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a2c:	2900      	cmp	r1, #0
 8000a2e:	d103      	bne.n	8000a38 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 8000a30:	4b04      	ldr	r3, [pc, #16]	; (8000a44 <USART_OneBitMethodCmd+0x1c>)
 8000a32:	4013      	ands	r3, r2
 8000a34:	6083      	str	r3, [r0, #8]
  }
}
 8000a36:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8000a38:	2380      	movs	r3, #128	; 0x80
 8000a3a:	011b      	lsls	r3, r3, #4
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	6083      	str	r3, [r0, #8]
 8000a40:	e7f9      	b.n	8000a36 <USART_OneBitMethodCmd+0xe>
 8000a42:	46c0      	nop			; (mov r8, r8)
 8000a44:	fffff7ff 	.word	0xfffff7ff

08000a48 <USART_MSBFirstCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a48:	b500      	push	{lr}
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000a4a:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a4c:	2900      	cmp	r1, #0
 8000a4e:	d103      	bne.n	8000a58 <USART_MSBFirstCmd+0x10>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8000a50:	4b04      	ldr	r3, [pc, #16]	; (8000a64 <USART_MSBFirstCmd+0x1c>)
 8000a52:	4013      	ands	r3, r2
 8000a54:	6043      	str	r3, [r0, #4]
  }
}
 8000a56:	bd00      	pop	{pc}
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8000a58:	2380      	movs	r3, #128	; 0x80
 8000a5a:	031b      	lsls	r3, r3, #12
 8000a5c:	4313      	orrs	r3, r2
 8000a5e:	6043      	str	r3, [r0, #4]
 8000a60:	e7f9      	b.n	8000a56 <USART_MSBFirstCmd+0xe>
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	fff7ffff 	.word	0xfff7ffff

08000a68 <USART_DataInvCmd>:
  *                          logic (1=H, 0=L) 
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a68:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000a6a:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a6c:	2900      	cmp	r1, #0
 8000a6e:	d103      	bne.n	8000a78 <USART_DataInvCmd+0x10>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <USART_DataInvCmd+0x1c>)
 8000a72:	4013      	ands	r3, r2
 8000a74:	6043      	str	r3, [r0, #4]
  }
}
 8000a76:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	02db      	lsls	r3, r3, #11
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	6043      	str	r3, [r0, #4]
 8000a80:	e7f9      	b.n	8000a76 <USART_DataInvCmd+0xe>
 8000a82:	46c0      	nop			; (mov r8, r8)
 8000a84:	fffbffff 	.word	0xfffbffff

08000a88 <USART_InvPinCmd>:
  *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 8000a88:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000a8a:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000a8c:	2a00      	cmp	r2, #0
 8000a8e:	d102      	bne.n	8000a96 <USART_InvPinCmd+0xe>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8000a90:	438b      	bics	r3, r1
 8000a92:	6043      	str	r3, [r0, #4]
  }
}
 8000a94:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8000a96:	4319      	orrs	r1, r3
 8000a98:	6041      	str	r1, [r0, #4]
 8000a9a:	e7fb      	b.n	8000a94 <USART_InvPinCmd+0xc>

08000a9c <USART_SWAPPinCmd>:
  *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000a9c:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000a9e:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000aa0:	2900      	cmp	r1, #0
 8000aa2:	d103      	bne.n	8000aac <USART_SWAPPinCmd+0x10>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <USART_SWAPPinCmd+0x1c>)
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	6043      	str	r3, [r0, #4]
  }
}
 8000aaa:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8000aac:	2380      	movs	r3, #128	; 0x80
 8000aae:	021b      	lsls	r3, r3, #8
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	6043      	str	r3, [r0, #4]
 8000ab4:	e7f9      	b.n	8000aaa <USART_SWAPPinCmd+0xe>
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	ffff7fff 	.word	0xffff7fff

08000abc <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000abc:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000abe:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	d103      	bne.n	8000acc <USART_ReceiverTimeOutCmd+0x10>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <USART_ReceiverTimeOutCmd+0x1c>)
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	6043      	str	r3, [r0, #4]
  }
}
 8000aca:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8000acc:	2380      	movs	r3, #128	; 0x80
 8000ace:	041b      	lsls	r3, r3, #16
 8000ad0:	4313      	orrs	r3, r2
 8000ad2:	6043      	str	r3, [r0, #4]
 8000ad4:	e7f9      	b.n	8000aca <USART_ReceiverTimeOutCmd+0xe>
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	ff7fffff 	.word	0xff7fffff

08000adc <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 8000adc:	6943      	ldr	r3, [r0, #20]
 8000ade:	0e1b      	lsrs	r3, r3, #24
 8000ae0:	061b      	lsls	r3, r3, #24
 8000ae2:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 8000ae4:	6943      	ldr	r3, [r0, #20]
 8000ae6:	4319      	orrs	r1, r3
 8000ae8:	6141      	str	r1, [r0, #20]
}
 8000aea:	4770      	bx	lr

08000aec <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 8000aec:	8a03      	ldrh	r3, [r0, #16]
 8000aee:	22ff      	movs	r2, #255	; 0xff
 8000af0:	4393      	bics	r3, r2
 8000af2:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 8000af4:	8a03      	ldrh	r3, [r0, #16]
 8000af6:	4319      	orrs	r1, r3
 8000af8:	8201      	strh	r1, [r0, #16]
}
 8000afa:	4770      	bx	lr

08000afc <USART_STOPModeCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called when USART clock is set to HSI or LSE. 
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000afc:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000afe:	2900      	cmp	r1, #0
 8000b00:	d104      	bne.n	8000b0c <USART_STOPModeCmd+0x10>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 8000b02:	6803      	ldr	r3, [r0, #0]
 8000b04:	2202      	movs	r2, #2
 8000b06:	4393      	bics	r3, r2
 8000b08:	6003      	str	r3, [r0, #0]
  }
}
 8000b0a:	bd00      	pop	{pc}
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 8000b0c:	6802      	ldr	r2, [r0, #0]
 8000b0e:	2302      	movs	r3, #2
 8000b10:	4313      	orrs	r3, r2
 8000b12:	6003      	str	r3, [r0, #0]
 8000b14:	e7f9      	b.n	8000b0a <USART_STOPModeCmd+0xe>
 8000b16:	46c0      	nop			; (mov r8, r8)

08000b18 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 8000b18:	6882      	ldr	r2, [r0, #8]
 8000b1a:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <USART_StopModeWakeUpSourceConfig+0x10>)
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 8000b20:	6883      	ldr	r3, [r0, #8]
 8000b22:	4319      	orrs	r1, r3
 8000b24:	6081      	str	r1, [r0, #8]
}
 8000b26:	4770      	bx	lr
 8000b28:	ffcfffff 	.word	0xffcfffff

08000b2c <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b2c:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000b2e:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d103      	bne.n	8000b3c <USART_AutoBaudRateCmd+0x10>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <USART_AutoBaudRateCmd+0x1c>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	6043      	str	r3, [r0, #4]
  }
}
 8000b3a:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8000b3c:	2380      	movs	r3, #128	; 0x80
 8000b3e:	035b      	lsls	r3, r3, #13
 8000b40:	4313      	orrs	r3, r2
 8000b42:	6043      	str	r3, [r0, #4]
 8000b44:	e7f9      	b.n	8000b3a <USART_AutoBaudRateCmd+0xe>
 8000b46:	46c0      	nop			; (mov r8, r8)
 8000b48:	ffefffff 	.word	0xffefffff

08000b4c <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8000b4c:	6842      	ldr	r2, [r0, #4]
 8000b4e:	4b03      	ldr	r3, [pc, #12]	; (8000b5c <USART_AutoBaudRateConfig+0x10>)
 8000b50:	4013      	ands	r3, r2
 8000b52:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 8000b54:	6843      	ldr	r3, [r0, #4]
 8000b56:	4319      	orrs	r1, r3
 8000b58:	6041      	str	r1, [r0, #4]
}
 8000b5a:	4770      	bx	lr
 8000b5c:	ff9fffff 	.word	0xff9fffff

08000b60 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8000b60:	05c9      	lsls	r1, r1, #23
 8000b62:	0dc9      	lsrs	r1, r1, #23
 8000b64:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000b66:	4770      	bx	lr

08000b68 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8000b68:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8000b6a:	05c0      	lsls	r0, r0, #23
 8000b6c:	0dc0      	lsrs	r0, r0, #23
}
 8000b6e:	4770      	bx	lr

08000b70 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000b70:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000b72:	0609      	lsls	r1, r1, #24
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8000b74:	021b      	lsls	r3, r3, #8
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8000b7a:	6843      	ldr	r3, [r0, #4]
 8000b7c:	4319      	orrs	r1, r3
 8000b7e:	6041      	str	r1, [r0, #4]
}
 8000b80:	4770      	bx	lr
 8000b82:	46c0      	nop			; (mov r8, r8)

08000b84 <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000b84:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000b86:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d103      	bne.n	8000b94 <USART_MuteModeCmd+0x10>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <USART_MuteModeCmd+0x1c>)
 8000b8e:	4013      	ands	r3, r2
 8000b90:	6003      	str	r3, [r0, #0]
  }
}
 8000b92:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 8000b94:	2380      	movs	r3, #128	; 0x80
 8000b96:	019b      	lsls	r3, r3, #6
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	6003      	str	r3, [r0, #0]
 8000b9c:	e7f9      	b.n	8000b92 <USART_MuteModeCmd+0xe>
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	ffffdfff 	.word	0xffffdfff

08000ba4 <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 8000ba4:	6802      	ldr	r2, [r0, #0]
 8000ba6:	4b03      	ldr	r3, [pc, #12]	; (8000bb4 <USART_MuteModeWakeUpConfig+0x10>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8000bac:	6803      	ldr	r3, [r0, #0]
 8000bae:	4319      	orrs	r1, r3
 8000bb0:	6001      	str	r1, [r0, #0]
}
 8000bb2:	4770      	bx	lr
 8000bb4:	fffff7ff 	.word	0xfffff7ff

08000bb8 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8000bb8:	6843      	ldr	r3, [r0, #4]
 8000bba:	2210      	movs	r2, #16
 8000bbc:	4393      	bics	r3, r2
 8000bbe:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 8000bc0:	6843      	ldr	r3, [r0, #4]
 8000bc2:	4319      	orrs	r1, r3
 8000bc4:	6041      	str	r1, [r0, #4]
}
 8000bc6:	4770      	bx	lr

08000bc8 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8000bc8:	6843      	ldr	r3, [r0, #4]
 8000bca:	2220      	movs	r2, #32
 8000bcc:	4393      	bics	r3, r2
 8000bce:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8000bd0:	6843      	ldr	r3, [r0, #4]
 8000bd2:	4319      	orrs	r1, r3
 8000bd4:	6041      	str	r1, [r0, #4]
}
 8000bd6:	4770      	bx	lr

08000bd8 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000bd8:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000bda:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	d103      	bne.n	8000be8 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <USART_LINCmd+0x1c>)
 8000be2:	4013      	ands	r3, r2
 8000be4:	6043      	str	r3, [r0, #4]
  }
}
 8000be6:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 8000be8:	2380      	movs	r3, #128	; 0x80
 8000bea:	01db      	lsls	r3, r3, #7
 8000bec:	4313      	orrs	r3, r2
 8000bee:	6043      	str	r3, [r0, #4]
 8000bf0:	e7f9      	b.n	8000be6 <USART_LINCmd+0xe>
 8000bf2:	46c0      	nop			; (mov r8, r8)
 8000bf4:	ffffbfff 	.word	0xffffbfff

08000bf8 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000bf8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000bfa:	2900      	cmp	r1, #0
 8000bfc:	d104      	bne.n	8000c08 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 8000bfe:	6883      	ldr	r3, [r0, #8]
 8000c00:	2208      	movs	r2, #8
 8000c02:	4393      	bics	r3, r2
 8000c04:	6083      	str	r3, [r0, #8]
  }
}
 8000c06:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 8000c08:	6882      	ldr	r2, [r0, #8]
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	6083      	str	r3, [r0, #8]
 8000c10:	e7f9      	b.n	8000c06 <USART_HalfDuplexCmd+0xe>
 8000c12:	46c0      	nop			; (mov r8, r8)

08000c14 <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 8000c14:	8a03      	ldrh	r3, [r0, #16]
 8000c16:	22ff      	movs	r2, #255	; 0xff
 8000c18:	4013      	ands	r3, r2
 8000c1a:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 8000c1c:	8a03      	ldrh	r3, [r0, #16]
 8000c1e:	0209      	lsls	r1, r1, #8
 8000c20:	4319      	orrs	r1, r3
 8000c22:	8201      	strh	r1, [r0, #16]
}
 8000c24:	4770      	bx	lr
 8000c26:	46c0      	nop			; (mov r8, r8)

08000c28 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c28:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c2a:	2900      	cmp	r1, #0
 8000c2c:	d104      	bne.n	8000c38 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 8000c2e:	6883      	ldr	r3, [r0, #8]
 8000c30:	2220      	movs	r2, #32
 8000c32:	4393      	bics	r3, r2
 8000c34:	6083      	str	r3, [r0, #8]
  }
}
 8000c36:	bd00      	pop	{pc}
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8000c38:	6882      	ldr	r2, [r0, #8]
 8000c3a:	2320      	movs	r3, #32
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	6083      	str	r3, [r0, #8]
 8000c40:	e7f9      	b.n	8000c36 <USART_SmartCardCmd+0xe>
 8000c42:	46c0      	nop			; (mov r8, r8)

08000c44 <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c44:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000c46:	2900      	cmp	r1, #0
 8000c48:	d104      	bne.n	8000c54 <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8000c4a:	6883      	ldr	r3, [r0, #8]
 8000c4c:	2210      	movs	r2, #16
 8000c4e:	4393      	bics	r3, r2
 8000c50:	6083      	str	r3, [r0, #8]
  }
}
 8000c52:	bd00      	pop	{pc}
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 8000c54:	6882      	ldr	r2, [r0, #8]
 8000c56:	2310      	movs	r3, #16
 8000c58:	4313      	orrs	r3, r2
 8000c5a:	6083      	str	r3, [r0, #8]
 8000c5c:	e7f9      	b.n	8000c52 <USART_SmartCardNACKCmd+0xe>
 8000c5e:	46c0      	nop			; (mov r8, r8)

08000c60 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000c60:	6882      	ldr	r2, [r0, #8]
 8000c62:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000c64:	0449      	lsls	r1, r1, #17
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8000c66:	4013      	ands	r3, r2
 8000c68:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8000c6a:	6883      	ldr	r3, [r0, #8]
 8000c6c:	4319      	orrs	r1, r3
 8000c6e:	6081      	str	r1, [r0, #8]
}
 8000c70:	4770      	bx	lr
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	fff1ffff 	.word	0xfff1ffff

08000c78 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000c78:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000c7a:	0609      	lsls	r1, r1, #24
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8000c7c:	021b      	lsls	r3, r3, #8
 8000c7e:	0a1b      	lsrs	r3, r3, #8
 8000c80:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8000c82:	6943      	ldr	r3, [r0, #20]
 8000c84:	4319      	orrs	r1, r3
 8000c86:	6141      	str	r1, [r0, #20]
}
 8000c88:	4770      	bx	lr
 8000c8a:	46c0      	nop			; (mov r8, r8)

08000c8c <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8000c8c:	6883      	ldr	r3, [r0, #8]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	4393      	bics	r3, r2
 8000c92:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 8000c94:	6883      	ldr	r3, [r0, #8]
 8000c96:	4319      	orrs	r1, r3
 8000c98:	6081      	str	r1, [r0, #8]
}
 8000c9a:	4770      	bx	lr

08000c9c <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000c9c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c9e:	2900      	cmp	r1, #0
 8000ca0:	d104      	bne.n	8000cac <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 8000ca2:	6883      	ldr	r3, [r0, #8]
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	4393      	bics	r3, r2
 8000ca8:	6083      	str	r3, [r0, #8]
  }
}
 8000caa:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8000cac:	6882      	ldr	r2, [r0, #8]
 8000cae:	2302      	movs	r3, #2
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	6083      	str	r3, [r0, #8]
 8000cb4:	e7f9      	b.n	8000caa <USART_IrDACmd+0xe>
 8000cb6:	46c0      	nop			; (mov r8, r8)

08000cb8 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000cb8:	b500      	push	{lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000cba:	6882      	ldr	r2, [r0, #8]
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	d103      	bne.n	8000cc8 <USART_DECmd+0x10>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <USART_DECmd+0x1c>)
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	6083      	str	r3, [r0, #8]
  }
}
 8000cc6:	bd00      	pop	{pc}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8000cc8:	2380      	movs	r3, #128	; 0x80
 8000cca:	01db      	lsls	r3, r3, #7
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	6083      	str	r3, [r0, #8]
 8000cd0:	e7f9      	b.n	8000cc6 <USART_DECmd+0xe>
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	ffffbfff 	.word	0xffffbfff

08000cd8 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 8000cd8:	6882      	ldr	r2, [r0, #8]
 8000cda:	4b03      	ldr	r3, [pc, #12]	; (8000ce8 <USART_DEPolarityConfig+0x10>)
 8000cdc:	4013      	ands	r3, r2
 8000cde:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 8000ce0:	6883      	ldr	r3, [r0, #8]
 8000ce2:	4319      	orrs	r1, r3
 8000ce4:	6081      	str	r1, [r0, #8]
}
 8000ce6:	4770      	bx	lr
 8000ce8:	ffff7fff 	.word	0xffff7fff

08000cec <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000cec:	6802      	ldr	r2, [r0, #0]
 8000cee:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000cf0:	0549      	lsls	r1, r1, #21
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 8000cf6:	6803      	ldr	r3, [r0, #0]
 8000cf8:	4319      	orrs	r1, r3
 8000cfa:	6001      	str	r1, [r0, #0]
}
 8000cfc:	4770      	bx	lr
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	fc1fffff 	.word	0xfc1fffff

08000d04 <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000d04:	6802      	ldr	r2, [r0, #0]
 8000d06:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000d08:	0409      	lsls	r1, r1, #16
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 8000d0e:	6803      	ldr	r3, [r0, #0]
 8000d10:	4319      	orrs	r1, r3
 8000d12:	6001      	str	r1, [r0, #0]
}
 8000d14:	4770      	bx	lr
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	ffe0ffff 	.word	0xffe0ffff

08000d1c <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 8000d1c:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000d1e:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000d20:	2a00      	cmp	r2, #0
 8000d22:	d102      	bne.n	8000d2a <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 8000d24:	438b      	bics	r3, r1
 8000d26:	6083      	str	r3, [r0, #8]
  }
}
 8000d28:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 8000d2a:	4319      	orrs	r1, r3
 8000d2c:	6081      	str	r1, [r0, #8]
 8000d2e:	e7fb      	b.n	8000d28 <USART_DMACmd+0xc>

08000d30 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 8000d30:	6882      	ldr	r2, [r0, #8]
 8000d32:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <USART_DMAReceptionErrorConfig+0x10>)
 8000d34:	4013      	ands	r3, r2
 8000d36:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8000d38:	6883      	ldr	r3, [r0, #8]
 8000d3a:	4319      	orrs	r1, r3
 8000d3c:	6081      	str	r1, [r0, #8]
}
 8000d3e:	4770      	bx	lr
 8000d40:	ffffdfff 	.word	0xffffdfff

08000d44 <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 8000d44:	b510      	push	{r4, lr}
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000d46:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d48:	b28b      	uxth	r3, r1
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000d4a:	4021      	ands	r1, r4
  itmask = (((uint32_t)0x01) << itpos);
 8000d4c:	2401      	movs	r4, #1
 8000d4e:	408c      	lsls	r4, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000d50:	0a1b      	lsrs	r3, r3, #8
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 8000d52:	1c21      	adds	r1, r4, #0
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 8000d54:	2b02      	cmp	r3, #2
 8000d56:	d00a      	beq.n	8000d6e <USART_ITConfig+0x2a>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8000d58:	2b03      	cmp	r3, #3
 8000d5a:	d00a      	beq.n	8000d72 <USART_ITConfig+0x2e>
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d5c:	6803      	ldr	r3, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8000d5e:	2a00      	cmp	r2, #0
 8000d60:	d102      	bne.n	8000d68 <USART_ITConfig+0x24>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000d62:	438b      	bics	r3, r1
 8000d64:	6003      	str	r3, [r0, #0]
  }
}
 8000d66:	bd10      	pop	{r4, pc}
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000d68:	4319      	orrs	r1, r3
 8000d6a:	6001      	str	r1, [r0, #0]
 8000d6c:	e7fb      	b.n	8000d66 <USART_ITConfig+0x22>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 8000d6e:	3004      	adds	r0, #4
 8000d70:	e7f4      	b.n	8000d5c <USART_ITConfig+0x18>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
  {
    usartxbase += 0x08;
 8000d72:	3008      	adds	r0, #8
 8000d74:	e7f2      	b.n	8000d5c <USART_ITConfig+0x18>
 8000d76:	46c0      	nop			; (mov r8, r8)

08000d78 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8000d78:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8000d7a:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8000d7c:	2a00      	cmp	r2, #0
 8000d7e:	d102      	bne.n	8000d86 <USART_RequestCmd+0xe>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8000d80:	438b      	bics	r3, r1
 8000d82:	8303      	strh	r3, [r0, #24]
  }
}
 8000d84:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8000d86:	4319      	orrs	r1, r3
 8000d88:	8301      	strh	r1, [r0, #24]
 8000d8a:	e7fb      	b.n	8000d84 <USART_RequestCmd+0xc>

08000d8c <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8000d8c:	6882      	ldr	r2, [r0, #8]
 8000d8e:	4b03      	ldr	r3, [pc, #12]	; (8000d9c <USART_OverrunDetectionConfig+0x10>)
 8000d90:	4013      	ands	r3, r2
 8000d92:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 8000d94:	6883      	ldr	r3, [r0, #8]
 8000d96:	4319      	orrs	r1, r3
 8000d98:	6081      	str	r1, [r0, #8]
}
 8000d9a:	4770      	bx	lr
 8000d9c:	ffffefff 	.word	0xffffefff

08000da0 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8000da0:	69c0      	ldr	r0, [r0, #28]
 8000da2:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8000da4:	1e43      	subs	r3, r0, #1
 8000da6:	4198      	sbcs	r0, r3
}
 8000da8:	4770      	bx	lr
 8000daa:	46c0      	nop			; (mov r8, r8)

08000dac <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8000dac:	6201      	str	r1, [r0, #32]
}
 8000dae:	4770      	bx	lr

08000db0 <USART_GetITStatus>:
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000db0:	22ff      	movs	r2, #255	; 0xff
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 8000db2:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000db4:	b28b      	uxth	r3, r1
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8000db6:	400a      	ands	r2, r1
  itmask = (uint32_t)0x01 << itmask;
 8000db8:	2401      	movs	r4, #1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8000dba:	0a1b      	lsrs	r3, r3, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8000dbc:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d00f      	beq.n	8000de2 <USART_GetITStatus+0x32>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d010      	beq.n	8000de8 <USART_GetITStatus+0x38>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 8000dc6:	6883      	ldr	r3, [r0, #8]
 8000dc8:	4023      	ands	r3, r4
  }
  
  bitpos = USART_IT >> 0x10;
 8000dca:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 8000dcc:	2201      	movs	r2, #1
 8000dce:	408a      	lsls	r2, r1
  bitpos &= USARTx->ISR;
 8000dd0:	69c0      	ldr	r0, [r0, #28]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
 8000dd2:	1c11      	adds	r1, r2, #0
  bitpos &= USARTx->ISR;
 8000dd4:	4008      	ands	r0, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	4193      	sbcs	r3, r2
 8000dda:	1e41      	subs	r1, r0, #1
 8000ddc:	4188      	sbcs	r0, r1
  else
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
 8000dde:	4018      	ands	r0, r3
}
 8000de0:	bd10      	pop	{r4, pc}
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 8000de2:	6803      	ldr	r3, [r0, #0]
 8000de4:	4023      	ands	r3, r4
 8000de6:	e7f0      	b.n	8000dca <USART_GetITStatus+0x1a>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 8000de8:	6843      	ldr	r3, [r0, #4]
 8000dea:	4023      	ands	r3, r4
 8000dec:	e7ed      	b.n	8000dca <USART_GetITStatus+0x1a>
 8000dee:	46c0      	nop			; (mov r8, r8)

08000df0 <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 8000df0:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 8000df2:	2301      	movs	r3, #1
 8000df4:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 8000df6:	6203      	str	r3, [r0, #32]
}
 8000df8:	4770      	bx	lr
 8000dfa:	46c0      	nop			; (mov r8, r8)

08000dfc <__aeabi_uidiv>:
 8000dfc:	2900      	cmp	r1, #0
 8000dfe:	d034      	beq.n	8000e6a <.udivsi3_skip_div0_test+0x6a>

08000e00 <.udivsi3_skip_div0_test>:
 8000e00:	2301      	movs	r3, #1
 8000e02:	2200      	movs	r2, #0
 8000e04:	b410      	push	{r4}
 8000e06:	4288      	cmp	r0, r1
 8000e08:	d32c      	bcc.n	8000e64 <.udivsi3_skip_div0_test+0x64>
 8000e0a:	2401      	movs	r4, #1
 8000e0c:	0724      	lsls	r4, r4, #28
 8000e0e:	42a1      	cmp	r1, r4
 8000e10:	d204      	bcs.n	8000e1c <.udivsi3_skip_div0_test+0x1c>
 8000e12:	4281      	cmp	r1, r0
 8000e14:	d202      	bcs.n	8000e1c <.udivsi3_skip_div0_test+0x1c>
 8000e16:	0109      	lsls	r1, r1, #4
 8000e18:	011b      	lsls	r3, r3, #4
 8000e1a:	e7f8      	b.n	8000e0e <.udivsi3_skip_div0_test+0xe>
 8000e1c:	00e4      	lsls	r4, r4, #3
 8000e1e:	42a1      	cmp	r1, r4
 8000e20:	d204      	bcs.n	8000e2c <.udivsi3_skip_div0_test+0x2c>
 8000e22:	4281      	cmp	r1, r0
 8000e24:	d202      	bcs.n	8000e2c <.udivsi3_skip_div0_test+0x2c>
 8000e26:	0049      	lsls	r1, r1, #1
 8000e28:	005b      	lsls	r3, r3, #1
 8000e2a:	e7f8      	b.n	8000e1e <.udivsi3_skip_div0_test+0x1e>
 8000e2c:	4288      	cmp	r0, r1
 8000e2e:	d301      	bcc.n	8000e34 <.udivsi3_skip_div0_test+0x34>
 8000e30:	1a40      	subs	r0, r0, r1
 8000e32:	431a      	orrs	r2, r3
 8000e34:	084c      	lsrs	r4, r1, #1
 8000e36:	42a0      	cmp	r0, r4
 8000e38:	d302      	bcc.n	8000e40 <.udivsi3_skip_div0_test+0x40>
 8000e3a:	1b00      	subs	r0, r0, r4
 8000e3c:	085c      	lsrs	r4, r3, #1
 8000e3e:	4322      	orrs	r2, r4
 8000e40:	088c      	lsrs	r4, r1, #2
 8000e42:	42a0      	cmp	r0, r4
 8000e44:	d302      	bcc.n	8000e4c <.udivsi3_skip_div0_test+0x4c>
 8000e46:	1b00      	subs	r0, r0, r4
 8000e48:	089c      	lsrs	r4, r3, #2
 8000e4a:	4322      	orrs	r2, r4
 8000e4c:	08cc      	lsrs	r4, r1, #3
 8000e4e:	42a0      	cmp	r0, r4
 8000e50:	d302      	bcc.n	8000e58 <.udivsi3_skip_div0_test+0x58>
 8000e52:	1b00      	subs	r0, r0, r4
 8000e54:	08dc      	lsrs	r4, r3, #3
 8000e56:	4322      	orrs	r2, r4
 8000e58:	2800      	cmp	r0, #0
 8000e5a:	d003      	beq.n	8000e64 <.udivsi3_skip_div0_test+0x64>
 8000e5c:	091b      	lsrs	r3, r3, #4
 8000e5e:	d001      	beq.n	8000e64 <.udivsi3_skip_div0_test+0x64>
 8000e60:	0909      	lsrs	r1, r1, #4
 8000e62:	e7e3      	b.n	8000e2c <.udivsi3_skip_div0_test+0x2c>
 8000e64:	1c10      	adds	r0, r2, #0
 8000e66:	bc10      	pop	{r4}
 8000e68:	4770      	bx	lr
 8000e6a:	2800      	cmp	r0, #0
 8000e6c:	d001      	beq.n	8000e72 <.udivsi3_skip_div0_test+0x72>
 8000e6e:	2000      	movs	r0, #0
 8000e70:	43c0      	mvns	r0, r0
 8000e72:	b407      	push	{r0, r1, r2}
 8000e74:	4802      	ldr	r0, [pc, #8]	; (8000e80 <.udivsi3_skip_div0_test+0x80>)
 8000e76:	a102      	add	r1, pc, #8	; (adr r1, 8000e80 <.udivsi3_skip_div0_test+0x80>)
 8000e78:	1840      	adds	r0, r0, r1
 8000e7a:	9002      	str	r0, [sp, #8]
 8000e7c:	bd03      	pop	{r0, r1, pc}
 8000e7e:	46c0      	nop			; (mov r8, r8)
 8000e80:	00000019 	.word	0x00000019

08000e84 <__aeabi_uidivmod>:
 8000e84:	2900      	cmp	r1, #0
 8000e86:	d0f0      	beq.n	8000e6a <.udivsi3_skip_div0_test+0x6a>
 8000e88:	b503      	push	{r0, r1, lr}
 8000e8a:	f7ff ffb9 	bl	8000e00 <.udivsi3_skip_div0_test>
 8000e8e:	bc0e      	pop	{r1, r2, r3}
 8000e90:	4342      	muls	r2, r0
 8000e92:	1a89      	subs	r1, r1, r2
 8000e94:	4718      	bx	r3
 8000e96:	46c0      	nop			; (mov r8, r8)

08000e98 <__aeabi_idiv0>:
 8000e98:	4770      	bx	lr
 8000e9a:	46c0      	nop			; (mov r8, r8)

08000e9c <__libc_init_array>:
 8000e9c:	b570      	push	{r4, r5, r6, lr}
 8000e9e:	4d0c      	ldr	r5, [pc, #48]	; (8000ed0 <__libc_init_array+0x34>)
 8000ea0:	4e0c      	ldr	r6, [pc, #48]	; (8000ed4 <__libc_init_array+0x38>)
 8000ea2:	2400      	movs	r4, #0
 8000ea4:	1b76      	subs	r6, r6, r5
 8000ea6:	10b6      	asrs	r6, r6, #2
 8000ea8:	d004      	beq.n	8000eb4 <__libc_init_array+0x18>
 8000eaa:	cd08      	ldmia	r5!, {r3}
 8000eac:	3401      	adds	r4, #1
 8000eae:	4798      	blx	r3
 8000eb0:	42a6      	cmp	r6, r4
 8000eb2:	d1fa      	bne.n	8000eaa <__libc_init_array+0xe>
 8000eb4:	f000 fb1a 	bl	80014ec <_init>
 8000eb8:	4d07      	ldr	r5, [pc, #28]	; (8000ed8 <__libc_init_array+0x3c>)
 8000eba:	4e08      	ldr	r6, [pc, #32]	; (8000edc <__libc_init_array+0x40>)
 8000ebc:	2400      	movs	r4, #0
 8000ebe:	1b76      	subs	r6, r6, r5
 8000ec0:	10b6      	asrs	r6, r6, #2
 8000ec2:	d004      	beq.n	8000ece <__libc_init_array+0x32>
 8000ec4:	cd08      	ldmia	r5!, {r3}
 8000ec6:	3401      	adds	r4, #1
 8000ec8:	4798      	blx	r3
 8000eca:	42a6      	cmp	r6, r4
 8000ecc:	d1fa      	bne.n	8000ec4 <__libc_init_array+0x28>
 8000ece:	bd70      	pop	{r4, r5, r6, pc}
	...

08000ee0 <USART1_Config>:
          
    }
}

void USART1_Config(void)
  {
 8000ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ee2:	b08b      	sub	sp, #44	; 0x2c
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 1;
 8000ee4:	2401      	movs	r4, #1
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8000ee6:	a801      	add	r0, sp, #4
 8000ee8:	231b      	movs	r3, #27
 8000eea:	7003      	strb	r3, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 1;
 8000eec:	7044      	strb	r4, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000eee:	7084      	strb	r4, [r0, #2]
    NVIC_Init(&NVIC_InitStructure);
 8000ef0:	f7ff f9e4 	bl	80002bc <NVIC_Init>
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8000ef4:	2396      	movs	r3, #150	; 0x96
 8000ef6:	019b      	lsls	r3, r3, #6
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000ef8:	2080      	movs	r0, #128	; 0x80
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000efa:	2600      	movs	r6, #0
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8000efc:	9304      	str	r3, [sp, #16]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000efe:	1c21      	adds	r1, r4, #0
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f00:	230c      	movs	r3, #12

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000f02:	0280      	lsls	r0, r0, #10
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000f04:	9308      	str	r3, [sp, #32]
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000f06:	9605      	str	r6, [sp, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000f08:	9606      	str	r6, [sp, #24]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8000f0a:	9607      	str	r6, [sp, #28]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f0c:	9609      	str	r6, [sp, #36]	; 0x24
    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8000f0e:	2790      	movs	r7, #144	; 0x90
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000f10:	f7ff fc1e 	bl	8000750 <RCC_AHBPeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000f14:	2080      	movs	r0, #128	; 0x80

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8000f16:	05ff      	lsls	r7, r7, #23
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8000f18:	1c21      	adds	r1, r4, #0
 8000f1a:	01c0      	lsls	r0, r0, #7
 8000f1c:	f7ff fc26 	bl	800076c <RCC_APB2PeriphClockCmd>

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8000f20:	1c38      	adds	r0, r7, #0
 8000f22:	1c22      	adds	r2, r4, #0
 8000f24:	2109      	movs	r1, #9
 8000f26:	f7ff f9b7 	bl	8000298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);
 8000f2a:	1c22      	adds	r2, r4, #0
 8000f2c:	1c38      	adds	r0, r7, #0
 8000f2e:	210a      	movs	r1, #10
 8000f30:	f7ff f9b2 	bl	8000298 <GPIO_PinAFConfig>

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8000f34:	2380      	movs	r3, #128	; 0x80
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	ad02      	add	r5, sp, #8
 8000f3a:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	712b      	strb	r3, [r5, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f40:	1c38      	adds	r0, r7, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f42:	2303      	movs	r3, #3
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f44:	1c29      	adds	r1, r5, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000f46:	716b      	strb	r3, [r5, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8000f48:	71ae      	strb	r6, [r5, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000f4a:	71ec      	strb	r4, [r5, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f4c:	f7ff f90c 	bl	8000168 <GPIO_Init>

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f50:	1c29      	adds	r1, r5, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000f52:	2380      	movs	r3, #128	; 0x80
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // USART configuration
    USART_Init(USART1, &USART_InitStructure);
 8000f54:	4d07      	ldr	r5, [pc, #28]	; (8000f74 <USART1_Config+0x94>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000f56:	00db      	lsls	r3, r3, #3
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f58:	1c38      	adds	r0, r7, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8000f5a:	9302      	str	r3, [sp, #8]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000f5c:	f7ff f904 	bl	8000168 <GPIO_Init>

    // USART configuration
    USART_Init(USART1, &USART_InitStructure);
 8000f60:	1c28      	adds	r0, r5, #0
 8000f62:	a904      	add	r1, sp, #16
 8000f64:	f7ff fcc6 	bl	80008f4 <USART_Init>

    // Enable USART
    USART_Cmd(USART1, ENABLE);
 8000f68:	1c28      	adds	r0, r5, #0
 8000f6a:	1c21      	adds	r1, r4, #0
 8000f6c:	f7ff fd34 	bl	80009d8 <USART_Cmd>
  }
 8000f70:	b00b      	add	sp, #44	; 0x2c
 8000f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f74:	40013800 	.word	0x40013800

08000f78 <USART2_Config>:
  
void USART2_Config(void)
  {
 8000f78:	b570      	push	{r4, r5, r6, lr}
 8000f7a:	b08a      	sub	sp, #40	; 0x28
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f7c:	2401      	movs	r4, #1
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000f7e:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8000f80:	2500      	movs	r5, #0
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8000f82:	231c      	movs	r3, #28
 8000f84:	7003      	strb	r3, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8000f86:	7045      	strb	r5, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8000f88:	7084      	strb	r4, [r0, #2]
    NVIC_Init(&NVIC_InitStructure);
 8000f8a:	f7ff f997 	bl	80002bc <NVIC_Init>
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8000f8e:	9505      	str	r5, [sp, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8000f90:	9506      	str	r5, [sp, #24]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8000f92:	9507      	str	r5, [sp, #28]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8000f94:	9509      	str	r5, [sp, #36]	; 0x24
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8000f96:	2396      	movs	r3, #150	; 0x96
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000f98:	2580      	movs	r5, #128	; 0x80
 8000f9a:	02ad      	lsls	r5, r5, #10
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8000f9c:	019b      	lsls	r3, r3, #6
 8000f9e:	9304      	str	r3, [sp, #16]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000fa0:	1c28      	adds	r0, r5, #0
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000fa2:	230c      	movs	r3, #12

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000fa4:	1c21      	adds	r1, r4, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8000fa6:	2690      	movs	r6, #144	; 0x90
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8000fa8:	9308      	str	r3, [sp, #32]
    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8000faa:	05f6      	lsls	r6, r6, #23
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8000fac:	f7ff fbd0 	bl	8000750 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8000fb0:	1c28      	adds	r0, r5, #0
 8000fb2:	1c21      	adds	r1, r4, #0
 8000fb4:	f7ff fbe8 	bl	8000788 <RCC_APB1PeriphClockCmd>

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8000fb8:	1c30      	adds	r0, r6, #0
 8000fba:	1c22      	adds	r2, r4, #0
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	f7ff f96b 	bl	8000298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 8000fc2:	1c22      	adds	r2, r4, #0
 8000fc4:	1c30      	adds	r0, r6, #0
 8000fc6:	2103      	movs	r1, #3
 8000fc8:	f7ff f966 	bl	8000298 <GPIO_PinAFConfig>

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8000fcc:	2304      	movs	r3, #4
 8000fce:	ad02      	add	r5, sp, #8
 8000fd0:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	712b      	strb	r3, [r5, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fd6:	1c30      	adds	r0, r6, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fd8:	2303      	movs	r3, #3
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fda:	1c29      	adds	r1, r5, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8000fdc:	716b      	strb	r3, [r5, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8000fde:	71ac      	strb	r4, [r5, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8000fe0:	71ec      	strb	r4, [r5, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fe2:	f7ff f8c1 	bl	8000168 <GPIO_Init>

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fe6:	1c29      	adds	r1, r5, #0

    // USART configuration
    USART_Init(USART2, &USART_InitStructure);
 8000fe8:	4d07      	ldr	r5, [pc, #28]	; (8001008 <USART2_Config+0x90>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000fea:	2308      	movs	r3, #8
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000fec:	1c30      	adds	r0, r6, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8000fee:	9302      	str	r3, [sp, #8]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000ff0:	f7ff f8ba 	bl	8000168 <GPIO_Init>

    // USART configuration
    USART_Init(USART2, &USART_InitStructure);
 8000ff4:	1c28      	adds	r0, r5, #0
 8000ff6:	a904      	add	r1, sp, #16
 8000ff8:	f7ff fc7c 	bl	80008f4 <USART_Init>

    // Enable USART
    USART_Cmd(USART2, ENABLE);
 8000ffc:	1c28      	adds	r0, r5, #0
 8000ffe:	1c21      	adds	r1, r4, #0
 8001000:	f7ff fcea 	bl	80009d8 <USART_Cmd>
  }
 8001004:	b00a      	add	sp, #40	; 0x28
 8001006:	bd70      	pop	{r4, r5, r6, pc}
 8001008:	40004400 	.word	0x40004400

0800100c <LED_Config>:

void LED_Config(void)
  {
 800100c:	b507      	push	{r0, r1, r2, lr}
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800100e:	2080      	movs	r0, #128	; 0x80
 8001010:	0300      	lsls	r0, r0, #12
 8001012:	2101      	movs	r1, #1
 8001014:	f7ff fb9c 	bl	8000750 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001018:	23c0      	movs	r3, #192	; 0xc0
 800101a:	009b      	lsls	r3, r3, #2
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 800101c:	4669      	mov	r1, sp
void LED_Config(void)
  {
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 800101e:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001020:	2301      	movs	r3, #1
 8001022:	710b      	strb	r3, [r1, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001024:	2203      	movs	r2, #3
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001026:	2300      	movs	r3, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001028:	4803      	ldr	r0, [pc, #12]	; (8001038 <LED_Config+0x2c>)
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800102a:	718b      	strb	r3, [r1, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 800102c:	714a      	strb	r2, [r1, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800102e:	71cb      	strb	r3, [r1, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001030:	f7ff f89a 	bl	8000168 <GPIO_Init>

  }
 8001034:	bd07      	pop	{r0, r1, r2, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	48000800 	.word	0x48000800

0800103c <USART2_SetSpeed>:

void USART2_SetSpeed(int speed)
  {
 800103c:	b530      	push	{r4, r5, lr}
    USART_Cmd(USART2, DISABLE);
 800103e:	4c0c      	ldr	r4, [pc, #48]	; (8001070 <USART2_SetSpeed+0x34>)
    GPIO_Init(GPIOC, &GPIO_InitStructure);

  }

void USART2_SetSpeed(int speed)
  {
 8001040:	b087      	sub	sp, #28
 8001042:	1c05      	adds	r5, r0, #0
    USART_Cmd(USART2, DISABLE);
 8001044:	2100      	movs	r1, #0
 8001046:	1c20      	adds	r0, r4, #0
 8001048:	f7ff fcc6 	bl	80009d8 <USART_Cmd>
    
    USART_InitTypeDef USART_InitStructure;
  
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 800104c:	2300      	movs	r3, #0
 800104e:	9301      	str	r3, [sp, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001050:	9302      	str	r3, [sp, #8]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8001052:	9303      	str	r3, [sp, #12]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001054:	9305      	str	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    
    USART_Init(USART2, &USART_InitStructure);
 8001056:	1c20      	adds	r0, r4, #0
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001058:	230c      	movs	r3, #12
    
    USART_Init(USART2, &USART_InitStructure);
 800105a:	4669      	mov	r1, sp
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800105c:	9304      	str	r3, [sp, #16]
  {
    USART_Cmd(USART2, DISABLE);
    
    USART_InitTypeDef USART_InitStructure;
  
    USART_InitStructure.USART_BaudRate = speed;
 800105e:	9500      	str	r5, [sp, #0]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    
    USART_Init(USART2, &USART_InitStructure);
 8001060:	f7ff fc48 	bl	80008f4 <USART_Init>

    // Enable USART
    USART_Cmd(USART2, ENABLE);
 8001064:	1c20      	adds	r0, r4, #0
 8001066:	2101      	movs	r1, #1
 8001068:	f7ff fcb6 	bl	80009d8 <USART_Cmd>
  }
 800106c:	b007      	add	sp, #28
 800106e:	bd30      	pop	{r4, r5, pc}
 8001070:	40004400 	.word	0x40004400

08001074 <TReset>:

void TReset(void)
  {
    USART2_SetSpeed(9600);
 8001074:	2096      	movs	r0, #150	; 0x96
    // Enable USART
    USART_Cmd(USART2, ENABLE);
  }

void TReset(void)
  {
 8001076:	b510      	push	{r4, lr}
    USART2_SetSpeed(9600);
 8001078:	0180      	lsls	r0, r0, #6
 800107a:	f7ff ffdf 	bl	800103c <USART2_SetSpeed>
    done = 1;
 800107e:	4c06      	ldr	r4, [pc, #24]	; (8001098 <TReset+0x24>)
 8001080:	2301      	movs	r3, #1
    USART_SendData(USART2, 0xF0);
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <TReset+0x28>)
 8001084:	21f0      	movs	r1, #240	; 0xf0
  }

void TReset(void)
  {
    USART2_SetSpeed(9600);
    done = 1;
 8001086:	6023      	str	r3, [r4, #0]
    USART_SendData(USART2, 0xF0);
 8001088:	f7ff fd6a 	bl	8000b60 <USART_SendData>
    while(done);
 800108c:	6823      	ldr	r3, [r4, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d1fc      	bne.n	800108c <TReset+0x18>
    if(input == 0xE0);
 8001092:	4b03      	ldr	r3, [pc, #12]	; (80010a0 <TReset+0x2c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
      //GPIOC->ODR ^= GPIO_Pin_8;
    
  }
 8001096:	bd10      	pop	{r4, pc}
 8001098:	20000014 	.word	0x20000014
 800109c:	40004400 	.word	0x40004400
 80010a0:	20000020 	.word	0x20000020

080010a4 <TWriteByte>:

void TWriteByte(char data)
  {    
 80010a4:	b570      	push	{r4, r5, r6, lr}
 80010a6:	1c05      	adds	r5, r0, #0
 80010a8:	2408      	movs	r4, #8
    for(int i = 0; i < 8; i++)
      {
        done = 1;
 80010aa:	4b09      	ldr	r3, [pc, #36]	; (80010d0 <TWriteByte+0x2c>)
 80010ac:	2101      	movs	r1, #1
 80010ae:	6019      	str	r1, [r3, #0]
 80010b0:	1c1e      	adds	r6, r3, #0
        if(data & 0x01)
 80010b2:	4029      	ands	r1, r5
          USART_SendData(USART2, 0xFF);
 80010b4:	4807      	ldr	r0, [pc, #28]	; (80010d4 <TWriteByte+0x30>)
void TWriteByte(char data)
  {    
    for(int i = 0; i < 8; i++)
      {
        done = 1;
        if(data & 0x01)
 80010b6:	d000      	beq.n	80010ba <TWriteByte+0x16>
          USART_SendData(USART2, 0xFF);
 80010b8:	21ff      	movs	r1, #255	; 0xff
        else
          USART_SendData(USART2, 0x00);
 80010ba:	f7ff fd51 	bl	8000b60 <USART_SendData>
        
        while(done);
 80010be:	6833      	ldr	r3, [r6, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1fc      	bne.n	80010be <TWriteByte+0x1a>
 80010c4:	3c01      	subs	r4, #1
        data >>= 1;
 80010c6:	086d      	lsrs	r5, r5, #1
    
  }

void TWriteByte(char data)
  {    
    for(int i = 0; i < 8; i++)
 80010c8:	2c00      	cmp	r4, #0
 80010ca:	d1ee      	bne.n	80010aa <TWriteByte+0x6>
          USART_SendData(USART2, 0x00);
        
        while(done);
        data >>= 1;
      }
  }
 80010cc:	bd70      	pop	{r4, r5, r6, pc}
 80010ce:	46c0      	nop			; (mov r8, r8)
 80010d0:	20000014 	.word	0x20000014
 80010d4:	40004400 	.word	0x40004400

080010d8 <TReadByte>:

char TReadByte(void)
  {
 80010d8:	b570      	push	{r4, r5, r6, lr}
 80010da:	2508      	movs	r5, #8
    char data = 0;
 80010dc:	2400      	movs	r4, #0
    
    for(int i = 0; i < 8; i++)
      {
        data >>= 1;
        done = 1;
 80010de:	4e0b      	ldr	r6, [pc, #44]	; (800110c <TReadByte+0x34>)
 80010e0:	2301      	movs	r3, #1
        USART_SendData(USART2, 0xFF);
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <TReadByte+0x38>)
 80010e4:	21ff      	movs	r1, #255	; 0xff
  {
    char data = 0;
    
    for(int i = 0; i < 8; i++)
      {
        data >>= 1;
 80010e6:	0864      	lsrs	r4, r4, #1
        done = 1;
 80010e8:	6033      	str	r3, [r6, #0]
        USART_SendData(USART2, 0xFF);
 80010ea:	f7ff fd39 	bl	8000b60 <USART_SendData>
        while(done);
 80010ee:	6833      	ldr	r3, [r6, #0]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d1fc      	bne.n	80010ee <TReadByte+0x16>
        if((unsigned char)input == 0xFF)
 80010f4:	4b07      	ldr	r3, [pc, #28]	; (8001114 <TReadByte+0x3c>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2bff      	cmp	r3, #255	; 0xff
 80010fa:	d101      	bne.n	8001100 <TReadByte+0x28>
          {
            //GPIOC->ODR |= GPIO_Pin_8;
            data |= 0x80;
 80010fc:	2380      	movs	r3, #128	; 0x80
 80010fe:	431c      	orrs	r4, r3
 8001100:	3d01      	subs	r5, #1

char TReadByte(void)
  {
    char data = 0;
    
    for(int i = 0; i < 8; i++)
 8001102:	2d00      	cmp	r5, #0
 8001104:	d1eb      	bne.n	80010de <TReadByte+0x6>
            data |= 0x80;
          }
      }
      
    return data;
  }
 8001106:	1c20      	adds	r0, r4, #0
 8001108:	bd70      	pop	{r4, r5, r6, pc}
 800110a:	46c0      	nop			; (mov r8, r8)
 800110c:	20000014 	.word	0x20000014
 8001110:	40004400 	.word	0x40004400
 8001114:	20000020 	.word	0x20000020

08001118 <TReadBit>:

char TReadBit(void)
  {
 8001118:	b510      	push	{r4, lr}
    done = 1;
 800111a:	4c08      	ldr	r4, [pc, #32]	; (800113c <TReadBit+0x24>)
 800111c:	2301      	movs	r3, #1
    USART_SendData(USART2, 0xFF);
 800111e:	4808      	ldr	r0, [pc, #32]	; (8001140 <TReadBit+0x28>)
 8001120:	21ff      	movs	r1, #255	; 0xff
    return data;
  }

char TReadBit(void)
  {
    done = 1;
 8001122:	6023      	str	r3, [r4, #0]
    USART_SendData(USART2, 0xFF);
 8001124:	f7ff fd1c 	bl	8000b60 <USART_SendData>
    while(done);
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d1fc      	bne.n	8001128 <TReadBit+0x10>
    if((unsigned char)input == 0xFF)
 800112e:	4b05      	ldr	r3, [pc, #20]	; (8001144 <TReadBit+0x2c>)
 8001130:	7818      	ldrb	r0, [r3, #0]
 8001132:	38ff      	subs	r0, #255	; 0xff
 8001134:	4243      	negs	r3, r0
 8001136:	4158      	adcs	r0, r3
      {
        //GPIOC->ODR |= GPIO_Pin_8;
        return 1;
      }
    return 0;
  }
 8001138:	bd10      	pop	{r4, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	20000014 	.word	0x20000014
 8001140:	40004400 	.word	0x40004400
 8001144:	20000020 	.word	0x20000020

08001148 <ConvertTemp>:
  
void ConvertTemp(void)
  {
 8001148:	b508      	push	{r3, lr}
    char temp;
    
    TReset();
 800114a:	f7ff ff93 	bl	8001074 <TReset>
    USART2_SetSpeed(115200);
 800114e:	20e1      	movs	r0, #225	; 0xe1
 8001150:	0240      	lsls	r0, r0, #9
 8001152:	f7ff ff73 	bl	800103c <USART2_SetSpeed>
    TWriteByte(0xCC);
 8001156:	20cc      	movs	r0, #204	; 0xcc
 8001158:	f7ff ffa4 	bl	80010a4 <TWriteByte>
    TWriteByte(0x44);
 800115c:	2044      	movs	r0, #68	; 0x44
 800115e:	f7ff ffa1 	bl	80010a4 <TWriteByte>
    temp = TReadBit();
    while(temp == 0)
    {
      //GPIOC->ODR |= GPIO_Pin_9;
      temp = TReadBit();
 8001162:	f7ff ffd9 	bl	8001118 <TReadBit>
    TReset();
    USART2_SetSpeed(115200);
    TWriteByte(0xCC);
    TWriteByte(0x44);
    temp = TReadBit();
    while(temp == 0)
 8001166:	2800      	cmp	r0, #0
 8001168:	d0fb      	beq.n	8001162 <ConvertTemp+0x1a>
    {
      //GPIOC->ODR |= GPIO_Pin_9;
      temp = TReadBit();
    }
  }
 800116a:	bd08      	pop	{r3, pc}

0800116c <ReadTemp>:
  
void ReadTemp(void)
  {
 800116c:	b510      	push	{r4, lr}
    TReset();
 800116e:	f7ff ff81 	bl	8001074 <TReset>
    USART2_SetSpeed(115200);
 8001172:	20e1      	movs	r0, #225	; 0xe1
 8001174:	0240      	lsls	r0, r0, #9
 8001176:	f7ff ff61 	bl	800103c <USART2_SetSpeed>
    TWriteByte(0xCC);
 800117a:	20cc      	movs	r0, #204	; 0xcc
 800117c:	f7ff ff92 	bl	80010a4 <TWriteByte>
    TWriteByte(0xBE);
 8001180:	20be      	movs	r0, #190	; 0xbe
 8001182:	f7ff ff8f 	bl	80010a4 <TWriteByte>
    //char scratchpad[9];
    for(int i = 0; i < 9; i++)
 8001186:	2400      	movs	r4, #0
      {
        scratchpad[i] = TReadByte();
 8001188:	f7ff ffa6 	bl	80010d8 <TReadByte>
 800118c:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <ReadTemp+0x4c>)
 800118e:	5510      	strb	r0, [r2, r4]
    TReset();
    USART2_SetSpeed(115200);
    TWriteByte(0xCC);
    TWriteByte(0xBE);
    //char scratchpad[9];
    for(int i = 0; i < 9; i++)
 8001190:	3401      	adds	r4, #1
 8001192:	2c09      	cmp	r4, #9
 8001194:	d1f8      	bne.n	8001188 <ReadTemp+0x1c>
      {
        scratchpad[i] = TReadByte();
      }
    temperature = 0;
 8001196:	4b09      	ldr	r3, [pc, #36]	; (80011bc <ReadTemp+0x50>)
 8001198:	2100      	movs	r1, #0
 800119a:	7019      	strb	r1, [r3, #0]
    temperature |= ((scratchpad[0] >> 4) & 0x0f);
 800119c:	7811      	ldrb	r1, [r2, #0]
 800119e:	7818      	ldrb	r0, [r3, #0]
 80011a0:	0909      	lsrs	r1, r1, #4
 80011a2:	4301      	orrs	r1, r0
 80011a4:	7019      	strb	r1, [r3, #0]
    temperature |= ((scratchpad[1] & 0x07) << 4);
 80011a6:	7850      	ldrb	r0, [r2, #1]
 80011a8:	2207      	movs	r2, #7
 80011aa:	7819      	ldrb	r1, [r3, #0]
 80011ac:	4002      	ands	r2, r0
 80011ae:	0112      	lsls	r2, r2, #4
 80011b0:	430a      	orrs	r2, r1
 80011b2:	701a      	strb	r2, [r3, #0]
    
  }
 80011b4:	bd10      	pop	{r4, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	20000028 	.word	0x20000028
 80011bc:	20000018 	.word	0x20000018

080011c0 <main>:
extern volatile int commands[1];

char scratchpad[9];

int main(void)
{
 80011c0:	b508      	push	{r3, lr}
  LED_Config();
 80011c2:	f7ff ff23 	bl	800100c <LED_Config>
  
  USART1_Config();
 80011c6:	f7ff fe8b 	bl	8000ee0 <USART1_Config>
  USART2_Config();
 80011ca:	f7ff fed5 	bl	8000f78 <USART2_Config>
  
  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80011ce:	481c      	ldr	r0, [pc, #112]	; (8001240 <main+0x80>)
 80011d0:	491c      	ldr	r1, [pc, #112]	; (8001244 <main+0x84>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	f7ff fdb6 	bl	8000d44 <USART_ITConfig>
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80011d8:	481b      	ldr	r0, [pc, #108]	; (8001248 <main+0x88>)
 80011da:	491a      	ldr	r1, [pc, #104]	; (8001244 <main+0x84>)
 80011dc:	2201      	movs	r2, #1
 80011de:	f7ff fdb1 	bl	8000d44 <USART_ITConfig>
  
  ConvertTemp();
 80011e2:	f7ff ffb1 	bl	8001148 <ConvertTemp>
  ReadTemp();
 80011e6:	f7ff ffc1 	bl	800116c <ReadTemp>
  
  if (SysTick_Config(SystemCoreClock / 125))  //2s
 80011ea:	4b18      	ldr	r3, [pc, #96]	; (800124c <main+0x8c>)
 80011ec:	217d      	movs	r1, #125	; 0x7d
 80011ee:	6818      	ldr	r0, [r3, #0]
 80011f0:	f7ff fe04 	bl	8000dfc <__aeabi_uidiv>
    \return          0  Function succeeded
    \return          1  Function failed
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <main+0x90>)
 80011f6:	4298      	cmp	r0, r3
 80011f8:	d80f      	bhi.n	800121a <main+0x5a>

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <main+0x94>)
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 80011fc:	4a16      	ldr	r2, [pc, #88]	; (8001258 <main+0x98>)
 */
static __INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
 80011fe:	3801      	subs	r0, #1
 8001200:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set
 */
static __INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[_SHP_IDX(IRQn)] = (SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFF << _BIT_SHIFT(IRQn))) |
 8001202:	6a10      	ldr	r0, [r2, #32]
 8001204:	21c0      	movs	r1, #192	; 0xc0
 8001206:	0200      	lsls	r0, r0, #8
 8001208:	0a00      	lsrs	r0, r0, #8
 800120a:	0609      	lsls	r1, r1, #24
 800120c:	4301      	orrs	r1, r0
 800120e:	6211      	str	r1, [r2, #32]
{
  if (ticks > SysTick_LOAD_RELOAD_Msk)  return (1);            /* Reload value impossible */

  SysTick->LOAD  = (ticks & SysTick_LOAD_RELOAD_Msk) - 1;      /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Cortex-M0 System Interrupts */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
 8001210:	2200      	movs	r2, #0
 8001212:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	e000      	b.n	800121c <main+0x5c>
 800121a:	e7fe      	b.n	800121a <main+0x5a>
  }

  /* Infinite loop */
  while (1)
    {
      if(commands[0])
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <main+0x9c>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2a00      	cmp	r2, #0
 8001222:	d0fb      	beq.n	800121c <main+0x5c>
        {
          switch(commands[0])
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	2b64      	cmp	r3, #100	; 0x64
 8001228:	d1f8      	bne.n	800121c <main+0x5c>
            {
              case CONVERT:
                ConvertTemp();
 800122a:	f7ff ff8d 	bl	8001148 <ConvertTemp>
                ReadTemp();
 800122e:	f7ff ff9d 	bl	800116c <ReadTemp>
                GPIOC->ODR ^= GPIO_Pin_9;
 8001232:	4b0b      	ldr	r3, [pc, #44]	; (8001260 <main+0xa0>)
 8001234:	2280      	movs	r2, #128	; 0x80
 8001236:	8a99      	ldrh	r1, [r3, #20]
 8001238:	0092      	lsls	r2, r2, #2
 800123a:	404a      	eors	r2, r1
 800123c:	829a      	strh	r2, [r3, #20]
                break;
 800123e:	e7ed      	b.n	800121c <main+0x5c>
 8001240:	40013800 	.word	0x40013800
 8001244:	00050105 	.word	0x00050105
 8001248:	40004400 	.word	0x40004400
 800124c:	20000010 	.word	0x20000010
 8001250:	00ffffff 	.word	0x00ffffff
 8001254:	e000e010 	.word	0xe000e010
 8001258:	e000ed00 	.word	0xe000ed00
 800125c:	20000034 	.word	0x20000034
 8001260:	48000800 	.word	0x48000800

08001264 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <SystemInit+0xd8>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001266:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001268:	6819      	ldr	r1, [r3, #0]
 800126a:	2201      	movs	r2, #1
 800126c:	4311      	orrs	r1, r2
 800126e:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001270:	6858      	ldr	r0, [r3, #4]
 8001272:	4933      	ldr	r1, [pc, #204]	; (8001340 <SystemInit+0xdc>)

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001274:	240f      	movs	r4, #15
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001276:	4001      	ands	r1, r0
 8001278:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800127a:	6818      	ldr	r0, [r3, #0]
 800127c:	4931      	ldr	r1, [pc, #196]	; (8001344 <SystemInit+0xe0>)
 800127e:	4001      	ands	r1, r0
 8001280:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001282:	6818      	ldr	r0, [r3, #0]
 8001284:	4930      	ldr	r1, [pc, #192]	; (8001348 <SystemInit+0xe4>)
 8001286:	4001      	ands	r1, r0
 8001288:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800128a:	6858      	ldr	r0, [r3, #4]
 800128c:	492f      	ldr	r1, [pc, #188]	; (800134c <SystemInit+0xe8>)
 800128e:	4008      	ands	r0, r1
 8001290:	6058      	str	r0, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001292:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001294:	43a0      	bics	r0, r4
 8001296:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001298:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 800129a:	482d      	ldr	r0, [pc, #180]	; (8001350 <SystemInit+0xec>)
 800129c:	4020      	ands	r0, r4
 800129e:	6318      	str	r0, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80012a0:	6b58      	ldr	r0, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012a2:	2480      	movs	r4, #128	; 0x80

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80012a4:	4390      	bics	r0, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012a6:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 80012a8:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80012aa:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80012ac:	9200      	str	r2, [sp, #0]
 80012ae:	9201      	str	r2, [sp, #4]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	2280      	movs	r2, #128	; 0x80
 80012b4:	0252      	lsls	r2, r2, #9
 80012b6:	4302      	orrs	r2, r0
 80012b8:	601a      	str	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012ba:	22a0      	movs	r2, #160	; 0xa0
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012bc:	02a4      	lsls	r4, r4, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012be:	00d2      	lsls	r2, r2, #3
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80012c0:	6818      	ldr	r0, [r3, #0]
 80012c2:	4020      	ands	r0, r4
 80012c4:	9001      	str	r0, [sp, #4]
    StartUpCounter++;  
 80012c6:	9800      	ldr	r0, [sp, #0]
 80012c8:	3001      	adds	r0, #1
 80012ca:	9000      	str	r0, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012cc:	9801      	ldr	r0, [sp, #4]
 80012ce:	2800      	cmp	r0, #0
 80012d0:	d102      	bne.n	80012d8 <SystemInit+0x74>
 80012d2:	9800      	ldr	r0, [sp, #0]
 80012d4:	4290      	cmp	r0, r2
 80012d6:	d1f3      	bne.n	80012c0 <SystemInit+0x5c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012d8:	6818      	ldr	r0, [r3, #0]
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	0292      	lsls	r2, r2, #10
 80012de:	4002      	ands	r2, r0
 80012e0:	d000      	beq.n	80012e4 <SystemInit+0x80>
  {
    HSEStatus = (uint32_t)0x01;
 80012e2:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012e4:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 80012e6:	9a01      	ldr	r2, [sp, #4]
 80012e8:	2a01      	cmp	r2, #1
 80012ea:	d126      	bne.n	800133a <SystemInit+0xd6>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <SystemInit+0xf0>)
 80012ee:	2011      	movs	r0, #17
 80012f0:	6010      	str	r0, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 80012f2:	685a      	ldr	r2, [r3, #4]
 80012f4:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 80012f6:	685a      	ldr	r2, [r3, #4]
 80012f8:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 80012fa:	685a      	ldr	r2, [r3, #4]
 80012fc:	4011      	ands	r1, r2
 80012fe:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8001300:	6859      	ldr	r1, [r3, #4]
 8001302:	2288      	movs	r2, #136	; 0x88
 8001304:	0352      	lsls	r2, r2, #13
 8001306:	430a      	orrs	r2, r1
 8001308:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 800130a:	6819      	ldr	r1, [r3, #0]
 800130c:	2280      	movs	r2, #128	; 0x80
 800130e:	4082      	lsls	r2, r0
 8001310:	430a      	orrs	r2, r1

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001312:	2180      	movs	r1, #128	; 0x80
    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001314:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001316:	0489      	lsls	r1, r1, #18
 8001318:	6818      	ldr	r0, [r3, #0]
 800131a:	4a08      	ldr	r2, [pc, #32]	; (800133c <SystemInit+0xd8>)
 800131c:	4208      	tst	r0, r1
 800131e:	d0fb      	beq.n	8001318 <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001320:	6851      	ldr	r1, [r2, #4]
 8001322:	2003      	movs	r0, #3
 8001324:	4381      	bics	r1, r0
 8001326:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001328:	6851      	ldr	r1, [r2, #4]
 800132a:	2002      	movs	r0, #2
 800132c:	4301      	orrs	r1, r0
 800132e:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001330:	210c      	movs	r1, #12
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	400a      	ands	r2, r1
 8001336:	2a08      	cmp	r2, #8
 8001338:	d1fb      	bne.n	8001332 <SystemInit+0xce>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 800133a:	bd13      	pop	{r0, r1, r4, pc}
 800133c:	40021000 	.word	0x40021000
 8001340:	f8ffb80c 	.word	0xf8ffb80c
 8001344:	fef6ffff 	.word	0xfef6ffff
 8001348:	fffbffff 	.word	0xfffbffff
 800134c:	ffc0ffff 	.word	0xffc0ffff
 8001350:	fffffeac 	.word	0xfffffeac
 8001354:	40022000 	.word	0x40022000

08001358 <NMI_Handler>:
int commands[1];
volatile int done = 0;

void NMI_Handler(void)
  {
  }
 8001358:	4770      	bx	lr

0800135a <HardFault_Handler>:

void HardFault_Handler(void)
  {
 800135a:	b500      	push	{lr}
 800135c:	e7fe      	b.n	800135c <HardFault_Handler+0x2>

0800135e <SVC_Handler>:
      }
  }

void SVC_Handler(void)
  {
  }
 800135e:	4770      	bx	lr

08001360 <PendSV_Handler>:

void PendSV_Handler(void)
  {
  }
 8001360:	4770      	bx	lr
	...

08001364 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
  {
 8001364:	b508      	push	{r3, lr}
  /*
   * USART stty config
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8001366:	481a      	ldr	r0, [pc, #104]	; (80013d0 <USART1_IRQHandler+0x6c>)
 8001368:	491a      	ldr	r1, [pc, #104]	; (80013d4 <USART1_IRQHandler+0x70>)
 800136a:	f7ff fd21 	bl	8000db0 <USART_GetITStatus>
 800136e:	2800      	cmp	r0, #0
 8001370:	d01c      	beq.n	80013ac <USART1_IRQHandler+0x48>
      {
        //char in = (USART_ReceiveData(USART1));
        char command = USART_ReceiveData(USART1);
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <USART1_IRQHandler+0x6c>)
 8001374:	f7ff fbf8 	bl	8000b68 <USART_ReceiveData>

        if(command == GETTEMP)
 8001378:	b2c0      	uxtb	r0, r0
 800137a:	2865      	cmp	r0, #101	; 0x65
 800137c:	d102      	bne.n	8001384 <USART1_IRQHandler+0x20>
          {
            USART_SendData(USART1, temperature);
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <USART1_IRQHandler+0x74>)
 8001380:	7819      	ldrb	r1, [r3, #0]
 8001382:	e001      	b.n	8001388 <USART1_IRQHandler+0x24>
          }
        else
          {
            USART_SendData(USART1, commands[0]);
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <USART1_IRQHandler+0x78>)
 8001386:	8819      	ldrh	r1, [r3, #0]
 8001388:	4811      	ldr	r0, [pc, #68]	; (80013d0 <USART1_IRQHandler+0x6c>)
 800138a:	f7ff fbe9 	bl	8000b60 <USART_SendData>
          }
        //  GPIOC->ODR ^= GPIO_Pin_9;

        USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
 800138e:	4810      	ldr	r0, [pc, #64]	; (80013d0 <USART1_IRQHandler+0x6c>)
 8001390:	4910      	ldr	r1, [pc, #64]	; (80013d4 <USART1_IRQHandler+0x70>)
 8001392:	2200      	movs	r2, #0
 8001394:	f7ff fcd6 	bl	8000d44 <USART_ITConfig>
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8001398:	480d      	ldr	r0, [pc, #52]	; (80013d0 <USART1_IRQHandler+0x6c>)
 800139a:	4911      	ldr	r1, [pc, #68]	; (80013e0 <USART1_IRQHandler+0x7c>)
 800139c:	2201      	movs	r2, #1
 800139e:	f7ff fcd1 	bl	8000d44 <USART_ITConfig>
        
        USART_SendData(USART1, count);
 80013a2:	4b10      	ldr	r3, [pc, #64]	; (80013e4 <USART1_IRQHandler+0x80>)
 80013a4:	480a      	ldr	r0, [pc, #40]	; (80013d0 <USART1_IRQHandler+0x6c>)
 80013a6:	8819      	ldrh	r1, [r3, #0]
 80013a8:	f7ff fbda 	bl	8000b60 <USART_SendData>

      }

    if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 80013ac:	4808      	ldr	r0, [pc, #32]	; (80013d0 <USART1_IRQHandler+0x6c>)
 80013ae:	490c      	ldr	r1, [pc, #48]	; (80013e0 <USART1_IRQHandler+0x7c>)
 80013b0:	f7ff fcfe 	bl	8000db0 <USART_GetITStatus>
 80013b4:	2800      	cmp	r0, #0
 80013b6:	d009      	beq.n	80013cc <USART1_IRQHandler+0x68>
      {
        USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <USART1_IRQHandler+0x6c>)
 80013ba:	4909      	ldr	r1, [pc, #36]	; (80013e0 <USART1_IRQHandler+0x7c>)
 80013bc:	2200      	movs	r2, #0
 80013be:	f7ff fcc1 	bl	8000d44 <USART_ITConfig>
        USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 80013c2:	4803      	ldr	r0, [pc, #12]	; (80013d0 <USART1_IRQHandler+0x6c>)
 80013c4:	4903      	ldr	r1, [pc, #12]	; (80013d4 <USART1_IRQHandler+0x70>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	f7ff fcbc 	bl	8000d44 <USART_ITConfig>
      }
  }
 80013cc:	bd08      	pop	{r3, pc}
 80013ce:	46c0      	nop			; (mov r8, r8)
 80013d0:	40013800 	.word	0x40013800
 80013d4:	00050105 	.word	0x00050105
 80013d8:	20000018 	.word	0x20000018
 80013dc:	20000034 	.word	0x20000034
 80013e0:	00070107 	.word	0x00070107
 80013e4:	2000001c 	.word	0x2000001c

080013e8 <USART2_IRQHandler>:
  
void USART2_IRQHandler(void)
  {
 80013e8:	b508      	push	{r3, lr}
  /*
   * USART stty config
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 80013ea:	4814      	ldr	r0, [pc, #80]	; (800143c <USART2_IRQHandler+0x54>)
 80013ec:	4914      	ldr	r1, [pc, #80]	; (8001440 <USART2_IRQHandler+0x58>)
 80013ee:	f7ff fcdf 	bl	8000db0 <USART_GetITStatus>
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d010      	beq.n	8001418 <USART2_IRQHandler+0x30>
      {
        input = USART_ReceiveData(USART2);
 80013f6:	4811      	ldr	r0, [pc, #68]	; (800143c <USART2_IRQHandler+0x54>)
 80013f8:	f7ff fbb6 	bl	8000b68 <USART_ReceiveData>
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <USART2_IRQHandler+0x5c>)
        
        done = 0;
 80013fe:	2200      	movs	r2, #0
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
      {
        input = USART_ReceiveData(USART2);
 8001400:	7018      	strb	r0, [r3, #0]
        
        done = 0;
 8001402:	4b11      	ldr	r3, [pc, #68]	; (8001448 <USART2_IRQHandler+0x60>)
        //GPIOC->ODR ^= GPIO_Pin_8;

        USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
 8001404:	480d      	ldr	r0, [pc, #52]	; (800143c <USART2_IRQHandler+0x54>)
 8001406:	490e      	ldr	r1, [pc, #56]	; (8001440 <USART2_IRQHandler+0x58>)

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
      {
        input = USART_ReceiveData(USART2);
        
        done = 0;
 8001408:	601a      	str	r2, [r3, #0]
        //GPIOC->ODR ^= GPIO_Pin_8;

        USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
 800140a:	f7ff fc9b 	bl	8000d44 <USART_ITConfig>
        USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 800140e:	480b      	ldr	r0, [pc, #44]	; (800143c <USART2_IRQHandler+0x54>)
 8001410:	490e      	ldr	r1, [pc, #56]	; (800144c <USART2_IRQHandler+0x64>)
 8001412:	2201      	movs	r2, #1
 8001414:	f7ff fc96 	bl	8000d44 <USART_ITConfig>
      }

    if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
 8001418:	4808      	ldr	r0, [pc, #32]	; (800143c <USART2_IRQHandler+0x54>)
 800141a:	490c      	ldr	r1, [pc, #48]	; (800144c <USART2_IRQHandler+0x64>)
 800141c:	f7ff fcc8 	bl	8000db0 <USART_GetITStatus>
 8001420:	2800      	cmp	r0, #0
 8001422:	d009      	beq.n	8001438 <USART2_IRQHandler+0x50>
      {
        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <USART2_IRQHandler+0x54>)
 8001426:	4909      	ldr	r1, [pc, #36]	; (800144c <USART2_IRQHandler+0x64>)
 8001428:	2200      	movs	r2, #0
 800142a:	f7ff fc8b 	bl	8000d44 <USART_ITConfig>
        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <USART2_IRQHandler+0x54>)
 8001430:	4903      	ldr	r1, [pc, #12]	; (8001440 <USART2_IRQHandler+0x58>)
 8001432:	2201      	movs	r2, #1
 8001434:	f7ff fc86 	bl	8000d44 <USART_ITConfig>
      }
  }
 8001438:	bd08      	pop	{r3, pc}
 800143a:	46c0      	nop			; (mov r8, r8)
 800143c:	40004400 	.word	0x40004400
 8001440:	00050105 	.word	0x00050105
 8001444:	20000020 	.word	0x20000020
 8001448:	20000014 	.word	0x20000014
 800144c:	00070107 	.word	0x00070107

08001450 <SysTick_Handler>:

void SysTick_Handler(void)
  {
    c++;
 8001450:	4a0d      	ldr	r2, [pc, #52]	; (8001488 <SysTick_Handler+0x38>)
        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
      }
  }

void SysTick_Handler(void)
  {
 8001452:	b500      	push	{lr}
    c++;
 8001454:	6813      	ldr	r3, [r2, #0]
 8001456:	3301      	adds	r3, #1
 8001458:	6013      	str	r3, [r2, #0]
    if(c == 250)
 800145a:	2bfa      	cmp	r3, #250	; 0xfa
 800145c:	d112      	bne.n	8001484 <SysTick_Handler+0x34>
      {
        GPIOC->ODR ^= GPIO_Pin_8;
 800145e:	4b0b      	ldr	r3, [pc, #44]	; (800148c <SysTick_Handler+0x3c>)
 8001460:	2280      	movs	r2, #128	; 0x80
 8001462:	8a99      	ldrh	r1, [r3, #20]
 8001464:	0052      	lsls	r2, r2, #1
 8001466:	404a      	eors	r2, r1
 8001468:	829a      	strh	r2, [r3, #20]
        if(!commands[0])
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <SysTick_Handler+0x40>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	2a00      	cmp	r2, #0
 8001470:	d101      	bne.n	8001476 <SysTick_Handler+0x26>
          {
            commands[0] = CONVERT;
 8001472:	2264      	movs	r2, #100	; 0x64
 8001474:	601a      	str	r2, [r3, #0]
          }
        count++;
 8001476:	4b07      	ldr	r3, [pc, #28]	; (8001494 <SysTick_Handler+0x44>)
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	3201      	adds	r2, #1
 800147c:	601a      	str	r2, [r3, #0]
        c = 0;
 800147e:	4b02      	ldr	r3, [pc, #8]	; (8001488 <SysTick_Handler+0x38>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
      }
  }
 8001484:	bd00      	pop	{pc}
 8001486:	46c0      	nop			; (mov r8, r8)
 8001488:	20000024 	.word	0x20000024
 800148c:	48000800 	.word	0x48000800
 8001490:	20000034 	.word	0x20000034
 8001494:	2000001c 	.word	0x2000001c

08001498 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001498:	480d      	ldr	r0, [pc, #52]	; (80014d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800149a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800149c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800149e:	e003      	b.n	80014a8 <LoopCopyDataInit>

080014a0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80014a2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80014a4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80014a6:	3104      	adds	r1, #4

080014a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80014a8:	480b      	ldr	r0, [pc, #44]	; (80014d8 <LoopForever+0xa>)
  ldr r3, =_edata
 80014aa:	4b0c      	ldr	r3, [pc, #48]	; (80014dc <LoopForever+0xe>)
  adds r2, r0, r1
 80014ac:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80014ae:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80014b0:	d3f6      	bcc.n	80014a0 <CopyDataInit>
  ldr r2, =_sbss
 80014b2:	4a0b      	ldr	r2, [pc, #44]	; (80014e0 <LoopForever+0x12>)
  b LoopFillZerobss
 80014b4:	e002      	b.n	80014bc <LoopFillZerobss>

080014b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80014b6:	2300      	movs	r3, #0
  str  r3, [r2]
 80014b8:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014ba:	3204      	adds	r2, #4

080014bc <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <LoopForever+0x16>)
  cmp r2, r3
 80014be:	429a      	cmp	r2, r3
  bcc FillZerobss
 80014c0:	d3f9      	bcc.n	80014b6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014c2:	f7ff fecf 	bl	8001264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014c6:	f7ff fce9 	bl	8000e9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80014ca:	f7ff fe79 	bl	80011c0 <main>

080014ce <LoopForever>:

LoopForever:
    b LoopForever
 80014ce:	e7fe      	b.n	80014ce <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80014d0:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80014d4:	08001504 	.word	0x08001504
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80014d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80014dc:	20000014 	.word	0x20000014
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80014e0:	20000014 	.word	0x20000014
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 80014e4:	20000038 	.word	0x20000038

080014e8 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80014e8:	e7fe      	b.n	80014e8 <ADC1_COMP_IRQHandler>
	...

080014ec <_init>:
 80014ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014ee:	46c0      	nop			; (mov r8, r8)
 80014f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014f2:	bc08      	pop	{r3}
 80014f4:	469e      	mov	lr, r3
 80014f6:	4770      	bx	lr

080014f8 <_fini>:
 80014f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014fa:	46c0      	nop			; (mov r8, r8)
 80014fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014fe:	bc08      	pop	{r3}
 8001500:	469e      	mov	lr, r3
 8001502:	4770      	bx	lr
