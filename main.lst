
main.elf:     file format elf32-littlearm

SYMBOL TABLE:
08000000 l    d  .isr_vector	00000000 .isr_vector
080000c4 l    d  .text	00000000 .text
20000000 l    d  .data	00000000 .data
20000014 l    d  .bss	00000000 .bss
2000002c l    d  ._user_heap_stack	00000000 ._user_heap_stack
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 /tmp/ccR3UKv6.o
f108f85f l       *ABS*	00000000 BootRAM
08001f90 l       .text	00000000 LoopCopyDataInit
08001f88 l       .text	00000000 CopyDataInit
08001fa4 l       .text	00000000 LoopFillZerobss
08001f9e l       .text	00000000 FillZerobss
08001fb6 l       .text	00000000 LoopForever
08001fd0 l       .text	00000000 Infinite_Loop
00000000 l    df *ABS*	00000000 stm32f0xx_gpio.c
00000000 l    df *ABS*	00000000 stm32f0xx_misc.c
00000000 l    df *ABS*	00000000 stm32f0xx_rcc.c
20000000 l     O .data	00000010 APBAHBPrescTable
00000000 l    df *ABS*	00000000 stm32f0xx_tim.c
00000000 l    df *ABS*	00000000 stm32f0xx_usart.c
00000000 l    df *ABS*	00000000 _udivsi3.o
080019c8 l       .text	00000000 .udivsi3_skip_div0_test
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 system_stm32f0xx.c
00000000 l    df *ABS*	00000000 main_it.c
00000000 l    df *ABS*	00000000 /home/mas/Projekt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/armv6-m/crti.o
00000000 l    df *ABS*	00000000 /home/mas/Projekt/arm-2012.09/bin/../lib/gcc/arm-none-eabi/4.7.2/armv6-m/crtn.o
00000000 l    df *ABS*	00000000 
00000400 l       *ABS*	00000000 _Min_Stack_Size
2000002c l       .bss	00000000 __exidx_end
2000002c l       .bss	00000000 __exidx_start
00000000 l       *UND*	00000000 __deregister_frame_info
00000000 l       *UND*	00000000 _ITM_registerTMCloneTable
00000400 l       *ABS*	00000000 _Min_Heap_Size
00000000 l       *UND*	00000000 _ITM_deregisterTMCloneTable
00000000 l       *UND*	00000000 _Jv_RegisterClasses
00000000 l       *UND*	00000000 __register_frame_info
08000a30 g     F .text	00000012 TIM_TimeBaseStructInit
080017dc g     F .text	00000012 USART_SetGuardTime
080018cc g     F .text	00000018 USART_SetDEDeassertionTime
080003d0 g     F .text	00000020 RCC_HSICmd
08000db4 g     F .text	00000014 TIM_ForcedOC2Config
08000464 g     F .text	00000018 RCC_LSEDriveConfig
08001610 g     F .text	00000020 USART_MSBFirstCmd
080004bc g     F .text	00000024 RCC_PLLCmd
08000d9c g     F .text	00000004 TIM_SetCompare2
080007a4 g     F .text	0000001c RCC_AHBPeriphResetCmd
08000298 g     F .text	00000024 GPIO_PinAFConfig
08000f70 g     F .text	0000001a TIM_SelectCOM
080008a4 g     F .text	0000000c RCC_ClearITPendingBit
0800026c g     F .text	0000000a GPIO_ReadOutputDataBit
08001828 g     F .text	00000018 USART_SetAutoRetryCount
08000f40 g     F .text	00000018 TIM_CCxCmd
08001264 g     F .text	00000018 TIM_SetIC4Prescaler
08000de8 g     F .text	0000001a TIM_CCPreloadControl
08001fd0  w    F .text	00000002 TIM1_CC_IRQHandler
08001e2e g     F .text	00000004 HardFault_Handler
20000024 g     O .bss	00000001 response
08001fd0  w    F .text	00000002 ADC1_COMP_IRQHandler
08000e04 g     F .text	0000000c TIM_OC1PreloadConfig
08001e36 g     F .text	00000002 SysTick_Handler
08000518 g     F .text	0000000c RCC_MCOConfig
080002bc g     F .text	00000058 NVIC_Init
20000010 g     O .data	00000001 x
08001c04 g     F .text	00000054 TIMER_Config
08001fd0  w    F .text	00000002 PVD_IRQHandler
080005a8 g     F .text	00000018 RCC_CECCLKConfig
08001fec g       .text	00000000 _sidata
08001e34 g     F .text	00000002 PendSV_Handler
08001e2c g     F .text	00000002 NMI_Handler
080013b4 g     F .text	0000001e TIM_ETRClockMode2Config
08001fd0  w    F .text	00000002 I2C1_IRQHandler
080007f8 g     F .text	0000001c RCC_ITConfig
08000ec8 g     F .text	0000000c TIM_OC1NPolarityConfig
080015bc g     F .text	00000014 USART_DirectionModeCmd
08000da8 g     F .text	0000000c TIM_ForcedOC1Config
080012d0 g     F .text	00000014 TIM_DMACmd
08001394 g     F .text	0000001e TIM_ETRClockMode1Config
08001254 g     F .text	00000010 TIM_SetIC3Prescaler
080017f0 g     F .text	0000001a USART_SmartCardCmd
08001968 g     F .text	0000000a USART_GetFlagStatus
08000ea0 g     F .text	0000000c TIM_ClearOC3Ref
080016a4 g     F .text	00000010 USART_SetReceiverTimeOut
08001fec g       .text	00000000 _etext
08001aa8 g     F .text	00000098 USART1_Config
20000014 g       .bss	00000000 _sbss
08000524 g     F .text	00000014 RCC_SYSCLKConfig
0800176c g     F .text	00000014 USART_MuteModeWakeUpConfig
0800084c g     F .text	00000032 RCC_WaitForHSEStartUp
08001738 g     F .text	00000012 USART_SetAddress
08001714 g     F .text	00000014 USART_AutoBaudRateConfig
080016b4 g     F .text	00000010 USART_SetPrescaler
0800072c g     F .text	00000024 RCC_BackupResetCmd
080015f0 g     F .text	00000020 USART_OneBitMethodCmd
08000b30 g     F .text	0000001e TIM_CtrlPWMOutputs
080004f4 g     F .text	00000024 RCC_ClockSecuritySystemCmd
08000880 g     F .text	00000014 RCC_ClearFlag
08000ae0 g     F .text	0000001a TIM_Cmd
08000e30 g     F .text	00000014 TIM_OC4PreloadConfig
08001730 g     F .text	00000008 USART_ReceiveData
080003ac g     F .text	00000010 RCC_HSEConfig
080019c4 g     F .text	00000088 __udivsi3
080012a0 g     F .text	00000006 TIM_ClearFlag
080012c0 g     F .text	00000006 TIM_ClearITPendingBit
08000a60 g     F .text	00000004 TIM_GetCounter
0800076c g     F .text	0000001c RCC_APB2PeriphClockCmd
08001224 g     F .text	00000004 TIM_GetCapture3
20000020 g     O .bss	00000004 input
08000168 g     F .text	000000b6 GPIO_Init
0800049c g     F .text	00000020 RCC_PLLConfig
08000574 g     F .text	00000034 RCC_ADCCLKConfig
08001bd4 g     F .text	00000030 LED_Config
20000000 g       .data	00000000 _sdata
08001fd0  w    F .text	00000002 SPI1_IRQHandler
080015a0 g     F .text	0000001a USART_Cmd
0800121c g     F .text	00000004 TIM_GetCapture1
08000f30 g     F .text	00000010 TIM_SelectOCREFClear
08001864 g     F .text	0000001a USART_IrDACmd
08000330 g     F .text	0000001c SysTick_CLKSourceConfig
08000294 g     F .text	00000004 GPIO_Write
08001fd0  w    F .text	00000002 TIM6_DAC_IRQHandler
08000278 g     F .text	00000004 GPIO_ReadOutputData
08000c50 g     F .text	00000084 TIM_OC3Init
08000444 g     F .text	00000020 RCC_LSEConfig
080019b8 g     F .text	0000000a USART_ClearITPendingBit
08000708 g     F .text	00000024 RCC_RTCCLKCmd
080008b0 g     F .text	000000f8 TIM_DeInit
08000788 g     F .text	0000001c RCC_APB1PeriphClockCmd
08000894 g     F .text	00000010 RCC_GetITStatus
08001a64 g     F .text	00000044 __libc_init_array
08001294 g     F .text	0000000a TIM_GetFlagStatus
08000750 g     F .text	0000001c RCC_AHBPeriphClockCmd
08000e64 g     F .text	0000000c TIM_OC3FastConfig
20000014 g     O .bss	00000004 rx
08001fd0  w    F .text	00000002 EXTI2_3_IRQHandler
0800174c g     F .text	00000020 USART_MuteModeCmd
080012e4 g     F .text	0000001a TIM_SelectCCDMA
080015d0 g     F .text	00000020 USART_OverSampling8Cmd
08001fd4 g     F .text	00000000 _init
08001fd0  w    F .text	00000002 I2C2_IRQHandler
08000acc g     F .text	00000014 TIM_SetClockDivision
08001fd0  w    F .text	00000002 TIM17_IRQHandler
08001fd0  w    F .text	00000002 RTC_IRQHandler
2000002c g       .bss	00000000 _ebss
08001978 g     F .text	0000003e USART_GetITStatus
08000b50 g     F .text	00000084 TIM_OC1Init
08000e24 g     F .text	0000000c TIM_OC3PreloadConfig
08001f80  w    F .text	00000038 Reset_Handler
08000268 g     F .text	00000004 GPIO_ReadInputData
08000a5c g     F .text	00000004 TIM_SetAutoreload
08001790 g     F .text	00000010 USART_LINBreakDetectLengthConfig
08000814 g     F .text	00000038 RCC_GetFlagStatus
08001780 g     F .text	00000010 USART_AddressDetectionConfig
0800027c g     F .text	00000004 GPIO_SetBits
08000538 g     F .text	00000010 RCC_GetSYSCLKSource
08000aa0 g     F .text	0000001a TIM_ARRPreloadConfig
08001c90 g     F .text	0000004c TReadByte
08000284 g     F .text	0000000e GPIO_WriteBit
080012a8 g     F .text	00000016 TIM_GetITStatus
080005f0 g     F .text	00000108 RCC_GetClocksFreq
08001fd0  w    F .text	00000002 TIM16_IRQHandler
08000d48 g     F .text	00000050 TIM_SelectOCxM
080014bc g     F .text	000000a0 USART_Init
08001470 g     F .text	00000006 TIM_RemapConfig
08001f50 g     F .text	00000030 TIM3_IRQHandler
08001fd0  w    F .text	00000002 EXTI4_15_IRQHandler
08001fd0  w    F .text	00000002 RCC_IRQHandler
20000014 g       .bss	00000000 _bss
08001fd0  w    F .text	00000002 DMA1_Channel1_IRQHandler
08001880 g     F .text	00000020 USART_DECmd
08000e44 g     F .text	0000000c TIM_OC1FastConfig
08001fd0 g       .text	00000002 Default_Handler
080017c0 g     F .text	0000001a USART_HalfDuplexCmd
08000e10 g     F .text	00000014 TIM_OC2PreloadConfig
080006f8 g     F .text	00000010 RCC_RTCCLKConfig
080013d4 g     F .text	0000000c TIM_SelectInputTrigger
08001fd0  w    F .text	00000002 CEC_IRQHandler
08000404 g     F .text	00000020 RCC_HSI14Cmd
0800127c g     F .text	00000014 TIM_ITConfig
08000bd4 g     F .text	0000007c TIM_OC2Init
08001fd0  w    F .text	00000002 TIM14_IRQHandler
0800190c g     F .text	00000032 USART_ITConfig
08001fd0  w    F .text	00000002 DMA1_Channel4_5_IRQHandler
08001630 g     F .text	00000020 USART_DataInvCmd
20000028 g     O .bss	00000004 c
08000a44 g     F .text	00000006 TIM_PrescalerConfig
08001664 g     F .text	00000020 USART_SWAPPinCmd
08000280 g     F .text	00000004 GPIO_ResetBits
08000f1c g     F .text	00000014 TIM_OC4PolarityConfig
080013e0 g     F .text	00000010 TIM_SelectOutputTrigger
08001854 g     F .text	00000010 USART_IrDAConfig
08000da0 g     F .text	00000004 TIM_SetCompare3
08000cd4 g     F .text	00000060 TIM_OC4Init
08001fd0  w    F .text	00000002 TIM15_IRQHandler
080016c4 g     F .text	0000001a USART_STOPModeCmd
08001fd0  w    F .text	00000002 EXTI0_1_IRQHandler
080018a0 g     F .text	00000014 USART_DEPolarityConfig
08001454 g     F .text	0000001a TIM_SelectHallSensor
08001a60  w    F .text	00000002 __aeabi_ldiv0
08000424 g     F .text	00000020 RCC_HSI14ADCRequestCmd
08001954 g     F .text	00000014 USART_OverrunDetectionConfig
0800122c g     F .text	00000010 TIM_SetIC1Prescaler
08001478 g     F .text	00000044 USART_DeInit
08000dd4 g     F .text	00000014 TIM_ForcedOC4Config
08001fd0  w    F .text	00000002 SPI2_IRQHandler
080003bc g     F .text	00000014 RCC_AdjustHSICalibrationValue
08001cdc g     F .text	0000005c main
08001b40 g     F .text	00000094 USART2_Config
08001574 g     F .text	00000020 USART_ClockInit
0800130c g     F .text	00000014 TIM_ITRxExternalClockConfig
08000ef4 g     F .text	00000014 TIM_OC3PolarityConfig
080019c4 g     F .text	00000000 __aeabi_uidiv
08001e32 g     F .text	00000002 SVC_Handler
00000000  w      *UND*	00000000 __init_array_end
08001300 g     F .text	0000000a TIM_InternalClockConfig
08000ebc g     F .text	0000000c TIM_OC1PolarityConfig
08000e50 g     F .text	00000014 TIM_OC2FastConfig
08000a58 g     F .text	00000004 TIM_SetCounter
08000da4 g     F .text	00000004 TIM_SetCompare4
08001220 g     F .text	00000004 TIM_GetCapture2
08001974 g     F .text	00000004 USART_ClearFlag
08000a64 g     F .text	00000004 TIM_GetPrescaler
08000e90 g     F .text	0000000e TIM_ClearOC2Ref
08001d38 g     F .text	000000f4 SystemInit
080003f0 g     F .text	00000014 RCC_AdjustHSI14CalibrationValue
2000001c g     O .bss	00000004 count
08000f8c g     F .text	0000013c TIM_ICInit
080000c4 g     F .text	000000a4 GPIO_DeInit
08001fe0 g     F .text	00000000 _fini
0800034c g     F .text	00000060 RCC_DeInit
080010c8 g     F .text	00000010 TIM_ICStructInit
080010d8 g     F .text	00000144 TIM_PWMIConfig
080016e0 g     F .text	00000014 USART_StopModeWakeUpSourceConfig
08000ee4 g     F .text	00000010 TIM_OC2NPolarityConfig
08000314 g     F .text	0000001c NVIC_SystemLPConfig
08001fd0  w    F .text	00000002 TS_IRQHandler
00000000  w      *UND*	00000000 __preinit_array_end
08000e84 g     F .text	0000000c TIM_ClearOC1Ref
08001fd0  w    F .text	00000002 WWDG_IRQHandler
080007dc g     F .text	0000001c RCC_APB1PeriphResetCmd
20000000 g       .data	00000000 _data
080004e0 g     F .text	00000014 RCC_PREDIV1Config
08001fd0  w    F .text	00000002 TIM2_IRQHandler
08000a84 g     F .text	0000001a TIM_UpdateRequestConfig
08000dc8 g     F .text	0000000c TIM_ForcedOC3Config
08001320 g     F .text	00000074 TIM_TIxExternalClockConfig
08000220 g     F .text	00000018 GPIO_StructInit
08001fd0  w    F .text	00000002 DMA1_Channel2_3_IRQHandler
08000d34 g     F .text	00000014 TIM_OCStructInit
08000b1c g     F .text	00000012 TIM_BDTRStructInit
08001940 g     F .text	00000014 USART_RequestCmd
08000f08 g     F .text	00000014 TIM_OC3NPolarityConfig
20002000 g       *ABS*	00000000 _estack
08001728 g     F .text	00000008 USART_SendData
08000f58 g     F .text	00000018 TIM_CCxNCmd
08001a4c g     F .text	00000012 __aeabi_uidivmod
08001400 g     F .text	00000010 TIM_SelectMasterSlaveMode
20000014 g       .data	00000000 _edata
08001228 g     F .text	00000004 TIM_GetCapture4
0800155c g     F .text	00000016 USART_StructInit
08001684 g     F .text	00000020 USART_ReceiverTimeOutCmd
080009a8 g     F .text	00000088 TIM_TimeBaseInit
08001c58 g     F .text	00000038 USART2_SetSpeed
08001ea4 g     F .text	000000ac USART2_IRQHandler
0800180c g     F .text	0000001a USART_SmartCardNACKCmd
08001840 g     F .text	00000012 USART_SetBlockLength
08000000 g     O .isr_vector	00000000 g_pfnVectors
080017a0 g     F .text	00000020 USART_LINCmd
080012c8 g     F .text	00000008 TIM_DMAConfig
080005d8 g     F .text	00000018 RCC_USARTCLKConfig
08001650 g     F .text	00000014 USART_InvPinCmd
08001290 g     F .text	00000004 TIM_GenerateEvent
00000000  w      *UND*	00000000 __init_array_start
08001a60  w    F .text	00000002 __aeabi_idiv0
08000afc g     F .text	00000020 TIM_BDTRConfig
080005c0 g     F .text	00000018 RCC_I2CCLKConfig
20000018 g     O .bss	00000004 binary
0800055c g     F .text	00000018 RCC_PCLKConfig
08001fd0  w    F .text	00000002 FLASH_IRQHandler
08000238 g     F .text	00000024 GPIO_PinLockConfig
08001e38 g     F .text	0000006c USART1_IRQHandler
0800047c g     F .text	00000020 RCC_LSICmd
0800123c g     F .text	00000018 TIM_SetIC2Prescaler
08001410 g     F .text	00000014 TIM_ETRConfig
08001594 g     F .text	0000000c USART_ClockStructInit
080007c0 g     F .text	0000001c RCC_APB2PeriphResetCmd
080013f0 g     F .text	00000010 TIM_SelectSlaveMode
080016f4 g     F .text	00000020 USART_AutoBaudRateCmd
08001fd0  w    F .text	00000002 TIM1_BRK_UP_TRG_COM_IRQHandler
08000eac g     F .text	0000000e TIM_ClearOC4Ref
08000abc g     F .text	00000010 TIM_SelectOnePulseMode
08001424 g     F .text	00000030 TIM_EncoderInterfaceConfig
00000000  w      *UND*	00000000 __preinit_array_start
08000d98 g     F .text	00000004 TIM_SetCompare1
08000ed4 g     F .text	00000010 TIM_OC2PolarityConfig
08000a68 g     F .text	0000001a TIM_UpdateDisableConfig
0800025c g     F .text	0000000a GPIO_ReadInputDataBit
080018e4 g     F .text	00000014 USART_DMACmd
08000e70 g     F .text	00000014 TIM_OC4FastConfig
080018b4 g     F .text	00000018 USART_SetDEAssertionTime
08000548 g     F .text	00000014 RCC_HCLKConfig
08000a4c g     F .text	0000000c TIM_CounterModeConfig
080018f8 g     F .text	00000014 USART_DMAReceptionErrorConfig



Disassembly of section .text:

080000c4 <GPIO_DeInit>:
  *         values.
  * @param  GPIOx: where x can be (A, B, C, D or F) to select the GPIO peripheral.
  * @retval None
  */
void GPIO_DeInit(GPIO_TypeDef* GPIOx)
{
 80000c4:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
 80000c6:	2390      	movs	r3, #144	; 0x90
 80000c8:	05db      	lsls	r3, r3, #23
 80000ca:	4298      	cmp	r0, r3
 80000cc:	d017      	beq.n	80000fe <GPIO_DeInit+0x3a>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
  }
  else if(GPIOx == GPIOB)
 80000ce:	4b22      	ldr	r3, [pc, #136]	; (8000158 <GPIO_DeInit+0x94>)
 80000d0:	4298      	cmp	r0, r3
 80000d2:	d01f      	beq.n	8000114 <GPIO_DeInit+0x50>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
  }
  else if(GPIOx == GPIOC)
 80000d4:	4b21      	ldr	r3, [pc, #132]	; (800015c <GPIO_DeInit+0x98>)
 80000d6:	4298      	cmp	r0, r3
 80000d8:	d027      	beq.n	800012a <GPIO_DeInit+0x66>
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
  }
  else if(GPIOx == GPIOD)
 80000da:	4b21      	ldr	r3, [pc, #132]	; (8000160 <GPIO_DeInit+0x9c>)
 80000dc:	4298      	cmp	r0, r3
 80000de:	d02f      	beq.n	8000140 <GPIO_DeInit+0x7c>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
  }
  else
  {
    if(GPIOx == GPIOF)
 80000e0:	4b20      	ldr	r3, [pc, #128]	; (8000164 <GPIO_DeInit+0xa0>)
 80000e2:	4298      	cmp	r0, r3
 80000e4:	d000      	beq.n	80000e8 <GPIO_DeInit+0x24>
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
    }
  }
}
 80000e6:	bd08      	pop	{r3, pc}
  }
  else
  {
    if(GPIOx == GPIOF)
    {
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, ENABLE);
 80000e8:	2080      	movs	r0, #128	; 0x80
 80000ea:	03c0      	lsls	r0, r0, #15
 80000ec:	2101      	movs	r1, #1
 80000ee:	f000 fb59 	bl	80007a4 <RCC_AHBPeriphResetCmd>
      RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOF, DISABLE);
 80000f2:	2080      	movs	r0, #128	; 0x80
 80000f4:	03c0      	lsls	r0, r0, #15
 80000f6:	2100      	movs	r1, #0
 80000f8:	f000 fb54 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 80000fc:	e7f3      	b.n	80000e6 <GPIO_DeInit+0x22>
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  if(GPIOx == GPIOA)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80000fe:	2080      	movs	r0, #128	; 0x80
 8000100:	0280      	lsls	r0, r0, #10
 8000102:	2101      	movs	r1, #1
 8000104:	f000 fb4e 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOA, DISABLE);
 8000108:	2080      	movs	r0, #128	; 0x80
 800010a:	0280      	lsls	r0, r0, #10
 800010c:	2100      	movs	r1, #0
 800010e:	f000 fb49 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000112:	e7e8      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOB)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8000114:	2080      	movs	r0, #128	; 0x80
 8000116:	02c0      	lsls	r0, r0, #11
 8000118:	2101      	movs	r1, #1
 800011a:	f000 fb43 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOB, DISABLE);
 800011e:	2080      	movs	r0, #128	; 0x80
 8000120:	02c0      	lsls	r0, r0, #11
 8000122:	2100      	movs	r1, #0
 8000124:	f000 fb3e 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000128:	e7dd      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOC)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 800012a:	2080      	movs	r0, #128	; 0x80
 800012c:	0300      	lsls	r0, r0, #12
 800012e:	2101      	movs	r1, #1
 8000130:	f000 fb38 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOC, DISABLE);
 8000134:	2080      	movs	r0, #128	; 0x80
 8000136:	0300      	lsls	r0, r0, #12
 8000138:	2100      	movs	r1, #0
 800013a:	f000 fb33 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 800013e:	e7d2      	b.n	80000e6 <GPIO_DeInit+0x22>
  }
  else if(GPIOx == GPIOD)
  {
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, ENABLE);
 8000140:	2080      	movs	r0, #128	; 0x80
 8000142:	0340      	lsls	r0, r0, #13
 8000144:	2101      	movs	r1, #1
 8000146:	f000 fb2d 	bl	80007a4 <RCC_AHBPeriphResetCmd>
    RCC_AHBPeriphResetCmd(RCC_AHBPeriph_GPIOD, DISABLE);
 800014a:	2080      	movs	r0, #128	; 0x80
 800014c:	0340      	lsls	r0, r0, #13
 800014e:	2100      	movs	r1, #0
 8000150:	f000 fb28 	bl	80007a4 <RCC_AHBPeriphResetCmd>
 8000154:	e7c7      	b.n	80000e6 <GPIO_DeInit+0x22>
 8000156:	46c0      	nop			; (mov r8, r8)
 8000158:	48000400 	.word	0x48000400
 800015c:	48000800 	.word	0x48000800
 8000160:	48000c00 	.word	0x48000c00
 8000164:	48001400 	.word	0x48001400

08000168 <GPIO_Init>:
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800016a:	465f      	mov	r7, fp
 800016c:	4656      	mov	r6, sl
 800016e:	4644      	mov	r4, r8
 8000170:	464d      	mov	r5, r9
 8000172:	b4f0      	push	{r4, r5, r6, r7}
 8000174:	b083      	sub	sp, #12
 8000176:	9101      	str	r1, [sp, #4]
 8000178:	680f      	ldr	r7, [r1, #0]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 800017a:	2103      	movs	r1, #3
  * @note   The configured pins can be: GPIO_Pin_0 to GPIO_Pin_15 for GPIOA, GPIOB and GPIOC,
  *         GPIO_Pin_0 to GPIO_Pin_2 for GPIOD, GPIO_Pin_0 to GPIO_Pin_3 for GPIOF.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800017c:	2200      	movs	r2, #0
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800017e:	2300      	movs	r3, #0
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000180:	2601      	movs	r6, #1
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000182:	4688      	mov	r8, r1
 8000184:	e003      	b.n	800018e <GPIO_Init+0x26>
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000186:	3301      	adds	r3, #1
 8000188:	3202      	adds	r2, #2
 800018a:	2b10      	cmp	r3, #16
 800018c:	d029      	beq.n	80001e2 <GPIO_Init+0x7a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 800018e:	1c34      	adds	r4, r6, #0
 8000190:	409c      	lsls	r4, r3

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000192:	1c3d      	adds	r5, r7, #0
 8000194:	4025      	ands	r5, r4

    if (currentpin == pos)
 8000196:	42a5      	cmp	r5, r4
 8000198:	d1f5      	bne.n	8000186 <GPIO_Init+0x1e>
    {
      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800019a:	9c01      	ldr	r4, [sp, #4]
 800019c:	2101      	movs	r1, #1
 800019e:	7924      	ldrb	r4, [r4, #4]
 80001a0:	4249      	negs	r1, r1
 80001a2:	46a3      	mov	fp, r4
 80001a4:	4459      	add	r1, fp
 80001a6:	2901      	cmp	r1, #1
 80001a8:	d922      	bls.n	80001f0 <GPIO_Init+0x88>
 80001aa:	4645      	mov	r5, r8
 80001ac:	4095      	lsls	r5, r2
 80001ae:	43ed      	mvns	r5, r5
 80001b0:	46ac      	mov	ip, r5
        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
      }

      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80001b2:	6805      	ldr	r5, [r0, #0]
 80001b4:	4664      	mov	r4, ip
 80001b6:	4025      	ands	r5, r4
 80001b8:	6005      	str	r5, [r0, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 80001ba:	6805      	ldr	r5, [r0, #0]
 80001bc:	465c      	mov	r4, fp
 80001be:	4094      	lsls	r4, r2
 80001c0:	432c      	orrs	r4, r5
 80001c2:	6004      	str	r4, [r0, #0]

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001c4:	68c4      	ldr	r4, [r0, #12]
 80001c6:	4645      	mov	r5, r8
 80001c8:	4095      	lsls	r5, r2
 80001ca:	43ac      	bics	r4, r5
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001cc:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80001ce:	60c4      	str	r4, [r0, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001d0:	79cc      	ldrb	r4, [r1, #7]
 80001d2:	68c5      	ldr	r5, [r0, #12]
 80001d4:	4094      	lsls	r4, r2
 80001d6:	432c      	orrs	r4, r5
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001d8:	3301      	adds	r3, #1

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80001da:	60c4      	str	r4, [r0, #12]
 80001dc:	3202      	adds	r2, #2
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /*-------------------------- Configure the port pins -----------------------*/
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80001de:	2b10      	cmp	r3, #16
 80001e0:	d1d5      	bne.n	800018e <GPIO_Init+0x26>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80001e2:	b003      	add	sp, #12
 80001e4:	bc3c      	pop	{r2, r3, r4, r5}
 80001e6:	4690      	mov	r8, r2
 80001e8:	4699      	mov	r9, r3
 80001ea:	46a2      	mov	sl, r4
 80001ec:	46ab      	mov	fp, r5
 80001ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001f0:	4641      	mov	r1, r8
 80001f2:	6884      	ldr	r4, [r0, #8]
 80001f4:	4091      	lsls	r1, r2
 80001f6:	43c9      	mvns	r1, r1
 80001f8:	400c      	ands	r4, r1
 80001fa:	6084      	str	r4, [r0, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 80001fc:	9c01      	ldr	r4, [sp, #4]
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 80001fe:	468c      	mov	ip, r1
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000200:	7964      	ldrb	r4, [r4, #5]
 8000202:	6881      	ldr	r1, [r0, #8]
 8000204:	4094      	lsls	r4, r2
 8000206:	430c      	orrs	r4, r1
 8000208:	6084      	str	r4, [r0, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos));
 800020a:	8881      	ldrh	r1, [r0, #4]
 800020c:	43a9      	bics	r1, r5
 800020e:	8081      	strh	r1, [r0, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000210:	9901      	ldr	r1, [sp, #4]
 8000212:	8884      	ldrh	r4, [r0, #4]
 8000214:	798d      	ldrb	r5, [r1, #6]
 8000216:	409d      	lsls	r5, r3
 8000218:	4325      	orrs	r5, r4
 800021a:	8085      	strh	r5, [r0, #4]
 800021c:	e7c9      	b.n	80001b2 <GPIO_Init+0x4a>
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <GPIO_StructInit>:
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000220:	4b04      	ldr	r3, [pc, #16]	; (8000234 <GPIO_StructInit+0x14>)
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 8000222:	2202      	movs	r2, #2
  * @retval None
  */
void GPIO_StructInit(GPIO_InitTypeDef* GPIO_InitStruct)
{
  /* Reset GPIO init structure parameters values */
  GPIO_InitStruct->GPIO_Pin  = GPIO_Pin_All;
 8000224:	6003      	str	r3, [r0, #0]
  GPIO_InitStruct->GPIO_Mode = GPIO_Mode_IN;
 8000226:	2300      	movs	r3, #0
 8000228:	7103      	strb	r3, [r0, #4]
  GPIO_InitStruct->GPIO_Speed = GPIO_Speed_Level_2;
 800022a:	7142      	strb	r2, [r0, #5]
  GPIO_InitStruct->GPIO_OType = GPIO_OType_PP;
 800022c:	7183      	strb	r3, [r0, #6]
  GPIO_InitStruct->GPIO_PuPd = GPIO_PuPd_NOPULL;
 800022e:	71c3      	strb	r3, [r0, #7]
}
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)
 8000234:	0000ffff 	.word	0x0000ffff

08000238 <GPIO_PinLockConfig>:
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  __IO uint32_t tmp = 0x00010000;
 8000238:	2380      	movs	r3, #128	; 0x80
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void GPIO_PinLockConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800023a:	b082      	sub	sp, #8
  __IO uint32_t tmp = 0x00010000;
 800023c:	025b      	lsls	r3, r3, #9
 800023e:	9301      	str	r3, [sp, #4]

  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  tmp |= GPIO_Pin;
 8000240:	9b01      	ldr	r3, [sp, #4]
 8000242:	430b      	orrs	r3, r1
 8000244:	9301      	str	r3, [sp, #4]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 8000246:	9b01      	ldr	r3, [sp, #4]
 8000248:	61c3      	str	r3, [r0, #28]
  /* Reset LCKK bit */
  GPIOx->LCKR =  GPIO_Pin;
 800024a:	61c1      	str	r1, [r0, #28]
  /* Set LCKK bit */
  GPIOx->LCKR = tmp;
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	61c3      	str	r3, [r0, #28]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000250:	69c3      	ldr	r3, [r0, #28]
 8000252:	9301      	str	r3, [sp, #4]
  /* Read LCKK bit */
  tmp = GPIOx->LCKR;
 8000254:	69c3      	ldr	r3, [r0, #28]
 8000256:	9301      	str	r3, [sp, #4]
}
 8000258:	b002      	add	sp, #8
 800025a:	4770      	bx	lr

0800025c <GPIO_ReadInputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800025c:	8a00      	ldrh	r0, [r0, #16]
 800025e:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000260:	1e43      	subs	r3, r0, #1
 8000262:	4198      	sbcs	r0, r3
}
 8000264:	4770      	bx	lr
 8000266:	46c0      	nop			; (mov r8, r8)

08000268 <GPIO_ReadInputData>:
uint16_t GPIO_ReadInputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->IDR);
 8000268:	8a00      	ldrh	r0, [r0, #16]
}
 800026a:	4770      	bx	lr

0800026c <GPIO_ReadOutputDataBit>:

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != (uint32_t)Bit_RESET)
 800026c:	8a80      	ldrh	r0, [r0, #20]
 800026e:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
  }
  return bitstatus;
 8000270:	1e43      	subs	r3, r0, #1
 8000272:	4198      	sbcs	r0, r3
}
 8000274:	4770      	bx	lr
 8000276:	46c0      	nop			; (mov r8, r8)

08000278 <GPIO_ReadOutputData>:
uint16_t GPIO_ReadOutputData(GPIO_TypeDef* GPIOx)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  return ((uint16_t)GPIOx->ODR);
 8000278:	8a80      	ldrh	r0, [r0, #20]
}
 800027a:	4770      	bx	lr

0800027c <GPIO_SetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BSRR = GPIO_Pin;
 800027c:	6181      	str	r1, [r0, #24]
}
 800027e:	4770      	bx	lr

08000280 <GPIO_ResetBits>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->BRR = GPIO_Pin;
 8000280:	8501      	strh	r1, [r0, #40]	; 0x28
}
 8000282:	4770      	bx	lr

08000284 <GPIO_WriteBit>:
  * @note   The GPIO_Pin parameter can be GPIO_Pin_x where x can be: (0..15) for GPIOA, 
  *         GPIOB or GPIOC,(0..2) for GPIOD and(0..3) for GPIOF.  
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 8000284:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 8000286:	2a00      	cmp	r2, #0
 8000288:	d101      	bne.n	800028e <GPIO_WriteBit+0xa>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
 800028a:	8501      	strh	r1, [r0, #40]	; 0x28
  }
}
 800028c:	bd00      	pop	{pc}
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
  {
    GPIOx->BSRR = GPIO_Pin;
 800028e:	6181      	str	r1, [r0, #24]
 8000290:	e7fc      	b.n	800028c <GPIO_WriteBit+0x8>
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <GPIO_Write>:
void GPIO_Write(GPIO_TypeDef* GPIOx, uint16_t PortVal)
{
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));

  GPIOx->ODR = PortVal;
 8000294:	8281      	strh	r1, [r0, #20]
}
 8000296:	4770      	bx	lr

08000298 <GPIO_PinAFConfig>:
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 8000298:	2307      	movs	r3, #7
 800029a:	400b      	ands	r3, r1
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 800029c:	08c9      	lsrs	r1, r1, #3
 800029e:	3108      	adds	r1, #8
 80002a0:	0089      	lsls	r1, r1, #2
  *         for the detailed mapping of the system and peripherals'alternate 
  *         function I/O pins.
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80002a2:	b530      	push	{r4, r5, lr}
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002a4:	009b      	lsls	r3, r3, #2
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002a6:	580c      	ldr	r4, [r1, r0]
 80002a8:	250f      	movs	r5, #15
 80002aa:	409d      	lsls	r5, r3
 80002ac:	43ac      	bics	r4, r5
 80002ae:	500c      	str	r4, [r1, r0]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002b0:	580c      	ldr	r4, [r1, r0]
  /* Check the parameters */
  assert_param(IS_GPIO_LIST_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));

  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
 80002b2:	409a      	lsls	r2, r3
 80002b4:	1c13      	adds	r3, r2, #0
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4));
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80002b6:	4323      	orrs	r3, r4
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80002b8:	500b      	str	r3, [r1, r0]
}
 80002ba:	bd30      	pop	{r4, r5, pc}

080002bc <NVIC_Init>:
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002bc:	7883      	ldrb	r3, [r0, #2]
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80002be:	b570      	push	{r4, r5, r6, lr}
  
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d109      	bne.n	80002d8 <NVIC_Init+0x1c>
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 80002c4:	7803      	ldrb	r3, [r0, #0]
 80002c6:	211f      	movs	r1, #31
 80002c8:	4019      	ands	r1, r3
 80002ca:	2301      	movs	r3, #1
 80002cc:	408b      	lsls	r3, r1
 80002ce:	4a10      	ldr	r2, [pc, #64]	; (8000310 <NVIC_Init+0x54>)
 80002d0:	1c19      	adds	r1, r3, #0
 80002d2:	2380      	movs	r3, #128	; 0x80
 80002d4:	50d1      	str	r1, [r2, r3]
  }
}
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002d8:	7805      	ldrb	r5, [r0, #0]
 80002da:	4b0d      	ldr	r3, [pc, #52]	; (8000310 <NVIC_Init+0x54>)
 80002dc:	08aa      	lsrs	r2, r5, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002de:	2103      	movs	r1, #3
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002e0:	32c0      	adds	r2, #192	; 0xc0
 80002e2:	0092      	lsls	r2, r2, #2
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002e4:	400d      	ands	r5, r1
 80002e6:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_NVIC_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPriority));  
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02];
 80002e8:	58d6      	ldr	r6, [r2, r3]
    tmppriority &= (uint32_t)(~(((uint32_t)0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8)));
 80002ea:	00e9      	lsls	r1, r5, #3
 80002ec:	1c25      	adds	r5, r4, #0
 80002ee:	408d      	lsls	r5, r1
 80002f0:	43ae      	bics	r6, r5
 80002f2:	1c35      	adds	r5, r6, #0
    tmppriority |= (uint32_t)((((uint32_t)NVIC_InitStruct->NVIC_IRQChannelPriority << 6) & 0xFF) << ((NVIC_InitStruct->NVIC_IRQChannel & 0x03) * 8));    
 80002f4:	7846      	ldrb	r6, [r0, #1]
 80002f6:	01b6      	lsls	r6, r6, #6
 80002f8:	4034      	ands	r4, r6
 80002fa:	408c      	lsls	r4, r1
 80002fc:	1c29      	adds	r1, r5, #0
 80002fe:	4321      	orrs	r1, r4
    
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel >> 0x02] = tmppriority;
 8000300:	50d1      	str	r1, [r2, r3]
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[0] = (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000302:	7802      	ldrb	r2, [r0, #0]
 8000304:	211f      	movs	r1, #31
 8000306:	400a      	ands	r2, r1
 8000308:	2101      	movs	r1, #1
 800030a:	4091      	lsls	r1, r2
 800030c:	6019      	str	r1, [r3, #0]
 800030e:	e7e2      	b.n	80002d6 <NVIC_Init+0x1a>
 8000310:	e000e100 	.word	0xe000e100

08000314 <NVIC_SystemLPConfig>:
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <NVIC_SystemLPConfig+0x18>)
  * @param  NewState: new state of LP condition. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void NVIC_SystemLPConfig(uint8_t LowPowerMode, FunctionalState NewState)
{
 8000316:	b500      	push	{lr}
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000318:	691a      	ldr	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_NVIC_LP(LowPowerMode));
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
 800031a:	2900      	cmp	r1, #0
 800031c:	d102      	bne.n	8000324 <NVIC_SystemLPConfig+0x10>
  {
    SCB->SCR |= LowPowerMode;
  }
  else
  {
    SCB->SCR &= (uint32_t)(~(uint32_t)LowPowerMode);
 800031e:	4382      	bics	r2, r0
 8000320:	611a      	str	r2, [r3, #16]
  }
}
 8000322:	bd00      	pop	{pc}
  
  assert_param(IS_FUNCTIONAL_STATE(NewState));  
  
  if (NewState != DISABLE)
  {
    SCB->SCR |= LowPowerMode;
 8000324:	4310      	orrs	r0, r2
 8000326:	6118      	str	r0, [r3, #16]
 8000328:	e7fb      	b.n	8000322 <NVIC_SystemLPConfig+0xe>
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	e000ed00 	.word	0xe000ed00

08000330 <SysTick_CLKSourceConfig>:
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SysTick_CLKSourceConfig+0x18>)
  *            @arg SysTick_CLKSource_HCLK_Div8: AHB clock divided by 8 selected as SysTick clock source.
  *            @arg SysTick_CLKSource_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
 8000332:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000334:	681a      	ldr	r2, [r3, #0]
void SysTick_CLKSourceConfig(uint32_t SysTick_CLKSource)
{
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
 8000336:	2804      	cmp	r0, #4
 8000338:	d003      	beq.n	8000342 <SysTick_CLKSourceConfig+0x12>
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
  }
  else
  {
    SysTick->CTRL &= SysTick_CLKSource_HCLK_Div8;
 800033a:	2104      	movs	r1, #4
 800033c:	438a      	bics	r2, r1
 800033e:	601a      	str	r2, [r3, #0]
  }
}
 8000340:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(SysTick_CLKSource));
  
  if (SysTick_CLKSource == SysTick_CLKSource_HCLK)
  {
    SysTick->CTRL |= SysTick_CLKSource_HCLK;
 8000342:	4310      	orrs	r0, r2
 8000344:	6018      	str	r0, [r3, #0]
 8000346:	e7fb      	b.n	8000340 <SysTick_CLKSourceConfig+0x10>
 8000348:	e000e010 	.word	0xe000e010

0800034c <RCC_DeInit>:
  * @retval None
  */
void RCC_DeInit(void)
{
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800034c:	4b11      	ldr	r3, [pc, #68]	; (8000394 <RCC_DeInit+0x48>)
 800034e:	2201      	movs	r2, #1
 8000350:	6819      	ldr	r1, [r3, #0]
 8000352:	4311      	orrs	r1, r2
 8000354:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8000356:	6858      	ldr	r0, [r3, #4]
 8000358:	490f      	ldr	r1, [pc, #60]	; (8000398 <RCC_DeInit+0x4c>)
 800035a:	4001      	ands	r1, r0
 800035c:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800035e:	6818      	ldr	r0, [r3, #0]
 8000360:	490e      	ldr	r1, [pc, #56]	; (800039c <RCC_DeInit+0x50>)
 8000362:	4001      	ands	r1, r0
 8000364:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000366:	6818      	ldr	r0, [r3, #0]
 8000368:	490d      	ldr	r1, [pc, #52]	; (80003a0 <RCC_DeInit+0x54>)
 800036a:	4001      	ands	r1, r0
 800036c:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 800036e:	6858      	ldr	r0, [r3, #4]
 8000370:	490c      	ldr	r1, [pc, #48]	; (80003a4 <RCC_DeInit+0x58>)
 8000372:	4001      	ands	r1, r0
 8000374:	6059      	str	r1, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8000376:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000378:	200f      	movs	r0, #15
 800037a:	4381      	bics	r1, r0
 800037c:	62d9      	str	r1, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 800037e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000380:	4909      	ldr	r1, [pc, #36]	; (80003a8 <RCC_DeInit+0x5c>)
 8000382:	4001      	ands	r1, r0
 8000384:	6319      	str	r1, [r3, #48]	; 0x30
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8000386:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000388:	4391      	bics	r1, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800038a:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
  
  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 800038c:	6359      	str	r1, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800038e:	609a      	str	r2, [r3, #8]
}
 8000390:	4770      	bx	lr
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	40021000 	.word	0x40021000
 8000398:	f8ffb80c 	.word	0xf8ffb80c
 800039c:	fef6ffff 	.word	0xfef6ffff
 80003a0:	fffbffff 	.word	0xfffbffff
 80003a4:	ffc0ffff 	.word	0xffc0ffff
 80003a8:	fffffeac 	.word	0xfffffeac

080003ac <RCC_HSEConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE_OFF;
 80003ac:	4b02      	ldr	r3, [pc, #8]	; (80003b8 <RCC_HSEConfig+0xc>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE2_ADDRESS = RCC_HSE;
 80003b2:	7018      	strb	r0, [r3, #0]

}
 80003b4:	4770      	bx	lr
 80003b6:	46c0      	nop			; (mov r8, r8)
 80003b8:	40021002 	.word	0x40021002

080003bc <RCC_AdjustHSICalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80003bc:	4b03      	ldr	r3, [pc, #12]	; (80003cc <RCC_AdjustHSICalibrationValue+0x10>)
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80003be:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
 80003c0:	681a      	ldr	r2, [r3, #0]
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80003c2:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI_CALIBRATION_VALUE(HSICalibrationValue));
  
  tmpreg = RCC->CR;
  
  /* Clear HSITRIM[4:0] bits */
  tmpreg &= ~RCC_CR_HSITRIM;
 80003c4:	438a      	bics	r2, r1
  
  /* Set the HSITRIM[4:0] bits according to HSICalibrationValue value */
  tmpreg |= (uint32_t)HSICalibrationValue << 3;
 80003c6:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR = tmpreg;
 80003c8:	6018      	str	r0, [r3, #0]
}
 80003ca:	4770      	bx	lr
 80003cc:	40021000 	.word	0x40021000

080003d0 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80003d0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80003d2:	4b06      	ldr	r3, [pc, #24]	; (80003ec <RCC_HSICmd+0x1c>)
void RCC_HSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80003d4:	2800      	cmp	r0, #0
 80003d6:	d104      	bne.n	80003e2 <RCC_HSICmd+0x12>
  {
    RCC->CR |= RCC_CR_HSION;
  }
  else
  {
    RCC->CR &= ~RCC_CR_HSION;
 80003d8:	681a      	ldr	r2, [r3, #0]
 80003da:	2101      	movs	r1, #1
 80003dc:	438a      	bics	r2, r1
 80003de:	601a      	str	r2, [r3, #0]
  }
}
 80003e0:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_HSION;
 80003e2:	6819      	ldr	r1, [r3, #0]
 80003e4:	2201      	movs	r2, #1
 80003e6:	430a      	orrs	r2, r1
 80003e8:	601a      	str	r2, [r3, #0]
 80003ea:	e7f9      	b.n	80003e0 <RCC_HSICmd+0x10>
 80003ec:	40021000 	.word	0x40021000

080003f0 <RCC_AdjustHSI14CalibrationValue>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 80003f0:	4b03      	ldr	r3, [pc, #12]	; (8000400 <RCC_AdjustHSI14CalibrationValue+0x10>)
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80003f2:	21f8      	movs	r1, #248	; 0xf8
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
 80003f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80003f6:	00c0      	lsls	r0, r0, #3
  assert_param(IS_RCC_HSI14_CALIBRATION_VALUE(HSI14CalibrationValue));
  
  tmpreg = RCC->CR2;
  
  /* Clear HSI14TRIM[4:0] bits */
  tmpreg &= ~RCC_CR2_HSI14TRIM;
 80003f8:	438a      	bics	r2, r1
  
  /* Set the HSITRIM14[4:0] bits according to HSI14CalibrationValue value */
  tmpreg |= (uint32_t)HSI14CalibrationValue << 3;
 80003fa:	4310      	orrs	r0, r2

  /* Store the new value */
  RCC->CR2 = tmpreg;
 80003fc:	6358      	str	r0, [r3, #52]	; 0x34
}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000

08000404 <RCC_HSI14Cmd>:
  * @note   When the HSI14 is stopped, HSI14RDY flag goes low after 6 HSI14 oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_HSI14Cmd(FunctionalState NewState)
{
 8000404:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <RCC_HSI14Cmd+0x1c>)
void RCC_HSI14Cmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000408:	2800      	cmp	r0, #0
 800040a:	d104      	bne.n	8000416 <RCC_HSI14Cmd+0x12>
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
  }
  else
  {
    RCC->CR2 &= ~RCC_CR2_HSI14ON;
 800040c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800040e:	2101      	movs	r1, #1
 8000410:	438a      	bics	r2, r1
 8000412:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000414:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 |= RCC_CR2_HSI14ON;
 8000416:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000418:	2201      	movs	r2, #1
 800041a:	430a      	orrs	r2, r1
 800041c:	635a      	str	r2, [r3, #52]	; 0x34
 800041e:	e7f9      	b.n	8000414 <RCC_HSI14Cmd+0x10>
 8000420:	40021000 	.word	0x40021000

08000424 <RCC_HSI14ADCRequestCmd>:
  * @param  NewState: new state of the HSI14 ADC request.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
 8000424:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000426:	4b06      	ldr	r3, [pc, #24]	; (8000440 <RCC_HSI14ADCRequestCmd+0x1c>)
void RCC_HSI14ADCRequestCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000428:	2800      	cmp	r0, #0
 800042a:	d104      	bne.n	8000436 <RCC_HSI14ADCRequestCmd+0x12>
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
  }
  else
  {
    RCC->CR2 |= RCC_CR2_HSI14DIS;
 800042c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800042e:	2204      	movs	r2, #4
 8000430:	430a      	orrs	r2, r1
 8000432:	635a      	str	r2, [r3, #52]	; 0x34
  }
}
 8000434:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR2 &= ~RCC_CR2_HSI14DIS;
 8000436:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000438:	2104      	movs	r1, #4
 800043a:	438a      	bics	r2, r1
 800043c:	635a      	str	r2, [r3, #52]	; 0x34
 800043e:	e7f9      	b.n	8000434 <RCC_HSI14ADCRequestCmd+0x10>
 8000440:	40021000 	.word	0x40021000

08000444 <RCC_LSEConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_LSE(RCC_LSE));

  /* Reset LSEON and LSEBYP bits before configuring the LSE ------------------*/
  /* Reset LSEON bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEON);
 8000444:	4b06      	ldr	r3, [pc, #24]	; (8000460 <RCC_LSEConfig+0x1c>)
 8000446:	2101      	movs	r1, #1
 8000448:	6a1a      	ldr	r2, [r3, #32]
 800044a:	438a      	bics	r2, r1
 800044c:	621a      	str	r2, [r3, #32]

  /* Reset LSEBYP bit */
  RCC->BDCR &= ~(RCC_BDCR_LSEBYP);
 800044e:	6a1a      	ldr	r2, [r3, #32]
 8000450:	2104      	movs	r1, #4
 8000452:	438a      	bics	r2, r1
 8000454:	621a      	str	r2, [r3, #32]

  /* Configure LSE */
  RCC->BDCR |= RCC_LSE;
 8000456:	6a1a      	ldr	r2, [r3, #32]
 8000458:	4310      	orrs	r0, r2
 800045a:	6218      	str	r0, [r3, #32]
}
 800045c:	4770      	bx	lr
 800045e:	46c0      	nop			; (mov r8, r8)
 8000460:	40021000 	.word	0x40021000

08000464 <RCC_LSEDriveConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_LSE_DRIVE(RCC_LSEDrive));
  
  /* Clear LSEDRV[1:0] bits */
  RCC->BDCR &= ~(RCC_BDCR_LSEDRV);
 8000464:	4b04      	ldr	r3, [pc, #16]	; (8000478 <RCC_LSEDriveConfig+0x14>)
 8000466:	2118      	movs	r1, #24
 8000468:	6a1a      	ldr	r2, [r3, #32]
 800046a:	438a      	bics	r2, r1
 800046c:	621a      	str	r2, [r3, #32]

  /* Set the LSE Drive */
  RCC->BDCR |= RCC_LSEDrive;
 800046e:	6a1a      	ldr	r2, [r3, #32]
 8000470:	4310      	orrs	r0, r2
 8000472:	6218      	str	r0, [r3, #32]
}
 8000474:	4770      	bx	lr
 8000476:	46c0      	nop			; (mov r8, r8)
 8000478:	40021000 	.word	0x40021000

0800047c <RCC_LSICmd>:
  * @note   When the LSI is stopped, LSIRDY flag goes low after 6 LSI oscillator
  *         clock cycles.
  * @retval None
  */
void RCC_LSICmd(FunctionalState NewState)
{
 800047c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800047e:	4b06      	ldr	r3, [pc, #24]	; (8000498 <RCC_LSICmd+0x1c>)
void RCC_LSICmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000480:	2800      	cmp	r0, #0
 8000482:	d104      	bne.n	800048e <RCC_LSICmd+0x12>
  {
    RCC->CSR |= RCC_CSR_LSION;
  }
  else
  {
    RCC->CSR &= ~RCC_CSR_LSION;
 8000484:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000486:	2101      	movs	r1, #1
 8000488:	438a      	bics	r2, r1
 800048a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800048c:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CSR |= RCC_CSR_LSION;
 800048e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000490:	2201      	movs	r2, #1
 8000492:	430a      	orrs	r2, r1
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
 8000496:	e7f9      	b.n	800048c <RCC_LSICmd+0x10>
 8000498:	40021000 	.word	0x40021000

0800049c <RCC_PLLConfig>:
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 800049c:	4b05      	ldr	r3, [pc, #20]	; (80004b4 <RCC_PLLConfig+0x18>)
  *          This parameter can be RCC_PLLMul_x where x:[2,16] 
  *
  * @retval None
  */
void RCC_PLLConfig(uint32_t RCC_PLLSource, uint32_t RCC_PLLMul)
{
 800049e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_RCC_PLL_SOURCE(RCC_PLLSource));
  assert_param(IS_RCC_PLL_MUL(RCC_PLLMul));

  /* Clear PLL Source [16] and Multiplier [21:18] bits */
  RCC->CFGR &= ~(RCC_CFGR_PLLMULL | RCC_CFGR_PLLSRC);
 80004a0:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <RCC_PLLConfig+0x1c>)
 80004a2:	685c      	ldr	r4, [r3, #4]
 80004a4:	4022      	ands	r2, r4
 80004a6:	605a      	str	r2, [r3, #4]

  /* Set the PLL Source and Multiplier */
  RCC->CFGR |= (uint32_t)(RCC_PLLSource | RCC_PLLMul);
 80004a8:	685a      	ldr	r2, [r3, #4]
 80004aa:	4310      	orrs	r0, r2
 80004ac:	4308      	orrs	r0, r1
 80004ae:	6058      	str	r0, [r3, #4]
}
 80004b0:	bd10      	pop	{r4, pc}
 80004b2:	46c0      	nop			; (mov r8, r8)
 80004b4:	40021000 	.word	0x40021000
 80004b8:	ffc2ffff 	.word	0xffc2ffff

080004bc <RCC_PLLCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <RCC_PLLCmd+0x1c>)
  * @param  NewState: new state of the PLL.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_PLLCmd(FunctionalState NewState)
{
 80004be:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004c0:	6819      	ldr	r1, [r3, #0]
void RCC_PLLCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004c2:	2800      	cmp	r0, #0
 80004c4:	d103      	bne.n	80004ce <RCC_PLLCmd+0x12>
  {
    RCC->CR |= RCC_CR_PLLON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_PLLON;
 80004c6:	4a05      	ldr	r2, [pc, #20]	; (80004dc <RCC_PLLCmd+0x20>)
 80004c8:	400a      	ands	r2, r1
 80004ca:	601a      	str	r2, [r3, #0]
  }
}
 80004cc:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_PLLON;
 80004ce:	2280      	movs	r2, #128	; 0x80
 80004d0:	0452      	lsls	r2, r2, #17
 80004d2:	430a      	orrs	r2, r1
 80004d4:	601a      	str	r2, [r3, #0]
 80004d6:	e7f9      	b.n	80004cc <RCC_PLLCmd+0x10>
 80004d8:	40021000 	.word	0x40021000
 80004dc:	feffffff 	.word	0xfeffffff

080004e0 <RCC_PREDIV1Config>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <RCC_PREDIV1Config+0x10>)
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80004e2:	210f      	movs	r1, #15
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PREDIV1(RCC_PREDIV1_Div));

  tmpreg = RCC->CFGR2;
 80004e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  /* Clear PREDIV1[3:0] bits */
  tmpreg &= ~(RCC_CFGR2_PREDIV1);
 80004e6:	438a      	bics	r2, r1
  /* Set the PREDIV1 division factor */
  tmpreg |= RCC_PREDIV1_Div;
 80004e8:	4310      	orrs	r0, r2
  /* Store the new value */
  RCC->CFGR2 = tmpreg;
 80004ea:	62d8      	str	r0, [r3, #44]	; 0x2c
}
 80004ec:	4770      	bx	lr
 80004ee:	46c0      	nop			; (mov r8, r8)
 80004f0:	40021000 	.word	0x40021000

080004f4 <RCC_ClockSecuritySystemCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <RCC_ClockSecuritySystemCmd+0x1c>)
  * @param  NewState: new state of the Clock Security System.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 80004f6:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 80004f8:	6819      	ldr	r1, [r3, #0]
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004fa:	2800      	cmp	r0, #0
 80004fc:	d103      	bne.n	8000506 <RCC_ClockSecuritySystemCmd+0x12>
  {
    RCC->CR |= RCC_CR_CSSON;
  }
  else
  {
    RCC->CR &= ~RCC_CR_CSSON;
 80004fe:	4a05      	ldr	r2, [pc, #20]	; (8000514 <RCC_ClockSecuritySystemCmd+0x20>)
 8000500:	400a      	ands	r2, r1
 8000502:	601a      	str	r2, [r3, #0]
  }
}
 8000504:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->CR |= RCC_CR_CSSON;
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0312      	lsls	r2, r2, #12
 800050a:	430a      	orrs	r2, r1
 800050c:	601a      	str	r2, [r3, #0]
 800050e:	e7f9      	b.n	8000504 <RCC_ClockSecuritySystemCmd+0x10>
 8000510:	40021000 	.word	0x40021000
 8000514:	fff7ffff 	.word	0xfff7ffff

08000518 <RCC_MCOConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_MCO_SOURCE(RCC_MCOSource));
    
  /* Select MCO clock source and prescaler */
  *(__IO uint8_t *) CFGR_BYTE3_ADDRESS =  RCC_MCOSource;
 8000518:	4b01      	ldr	r3, [pc, #4]	; (8000520 <RCC_MCOConfig+0x8>)
 800051a:	7018      	strb	r0, [r3, #0]
}
 800051c:	4770      	bx	lr
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	40021007 	.word	0x40021007

08000524 <RCC_SYSCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000524:	4b03      	ldr	r3, [pc, #12]	; (8000534 <RCC_SYSCLKConfig+0x10>)
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 8000526:	2103      	movs	r1, #3
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));
  
  tmpreg = RCC->CFGR;
 8000528:	685a      	ldr	r2, [r3, #4]
  
  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 800052a:	438a      	bics	r2, r1
  
  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 800052c:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 800052e:	6058      	str	r0, [r3, #4]
}
 8000530:	4770      	bx	lr
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	40021000 	.word	0x40021000

08000538 <RCC_GetSYSCLKSource>:
  *           - 0x04: HSE used as system clock  
  *           - 0x08: PLL used as system clock
  */
uint8_t RCC_GetSYSCLKSource(void)
{
  return ((uint8_t)(RCC->CFGR & RCC_CFGR_SWS));
 8000538:	4b02      	ldr	r3, [pc, #8]	; (8000544 <RCC_GetSYSCLKSource+0xc>)
 800053a:	200c      	movs	r0, #12
 800053c:	685b      	ldr	r3, [r3, #4]
 800053e:	4018      	ands	r0, r3
}
 8000540:	4770      	bx	lr
 8000542:	46c0      	nop			; (mov r8, r8)
 8000544:	40021000 	.word	0x40021000

08000548 <RCC_HCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 8000548:	4b03      	ldr	r3, [pc, #12]	; (8000558 <RCC_HCLKConfig+0x10>)
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800054a:	21f0      	movs	r1, #240	; 0xf0
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));
  
  tmpreg = RCC->CFGR;
 800054c:	685a      	ldr	r2, [r3, #4]
  
  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 800054e:	438a      	bics	r2, r1
  
  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 8000550:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000552:	6058      	str	r0, [r3, #4]
}
 8000554:	4770      	bx	lr
 8000556:	46c0      	nop			; (mov r8, r8)
 8000558:	40021000 	.word	0x40021000

0800055c <RCC_PCLKConfig>:
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 800055c:	4b03      	ldr	r3, [pc, #12]	; (800056c <RCC_PCLKConfig+0x10>)
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <RCC_PCLKConfig+0x14>)
  uint32_t tmpreg = 0;
  
  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));
  
  tmpreg = RCC->CFGR;
 8000560:	6859      	ldr	r1, [r3, #4]
  
  /* Clear PPRE[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE;
 8000562:	400a      	ands	r2, r1
  
  /* Set PPRE[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000564:	4310      	orrs	r0, r2
  
  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000566:	6058      	str	r0, [r3, #4]
}
 8000568:	4770      	bx	lr
 800056a:	46c0      	nop			; (mov r8, r8)
 800056c:	40021000 	.word	0x40021000
 8000570:	fffff8ff 	.word	0xfffff8ff

08000574 <RCC_ADCCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_ADCCLK(RCC_ADCCLK));

  /* Clear ADCPRE bit */
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
 8000574:	4b09      	ldr	r3, [pc, #36]	; (800059c <RCC_ADCCLKConfig+0x28>)
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <RCC_ADCCLKConfig+0x2c>)
 8000578:	6859      	ldr	r1, [r3, #4]
 800057a:	400a      	ands	r2, r1
 800057c:	605a      	str	r2, [r3, #4]
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;
 800057e:	6859      	ldr	r1, [r3, #4]
 8000580:	0402      	lsls	r2, r0, #16
 8000582:	0c12      	lsrs	r2, r2, #16
 8000584:	430a      	orrs	r2, r1
 8000586:	605a      	str	r2, [r3, #4]

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 8000588:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800058a:	4a06      	ldr	r2, [pc, #24]	; (80005a4 <RCC_ADCCLKConfig+0x30>)
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 800058c:	0c00      	lsrs	r0, r0, #16
  RCC->CFGR &= ~RCC_CFGR_ADCPRE;
  /* Set ADCPRE bits according to RCC_PCLK value */
  RCC->CFGR |= RCC_ADCCLK & 0xFFFF;

  /* Clear ADCSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_ADCSW; 
 800058e:	400a      	ands	r2, r1
 8000590:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set ADCSW bits according to RCC_ADCCLK value */
  RCC->CFGR3 |= RCC_ADCCLK >> 16;  
 8000592:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000594:	4310      	orrs	r0, r2
 8000596:	6318      	str	r0, [r3, #48]	; 0x30
}
 8000598:	4770      	bx	lr
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	40021000 	.word	0x40021000
 80005a0:	ffffbfff 	.word	0xffffbfff
 80005a4:	fffffeff 	.word	0xfffffeff

080005a8 <RCC_CECCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_CECCLK(RCC_CECCLK));

  /* Clear CECSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_CECSW;
 80005a8:	4b04      	ldr	r3, [pc, #16]	; (80005bc <RCC_CECCLKConfig+0x14>)
 80005aa:	2140      	movs	r1, #64	; 0x40
 80005ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005ae:	438a      	bics	r2, r1
 80005b0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set CECSW bits according to RCC_CECCLK value */
  RCC->CFGR3 |= RCC_CECCLK;
 80005b2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005b4:	4310      	orrs	r0, r2
 80005b6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005b8:	4770      	bx	lr
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	40021000 	.word	0x40021000

080005c0 <RCC_I2CCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_I2CCLK(RCC_I2CCLK));

  /* Clear I2CSW bit */
  RCC->CFGR3 &= ~RCC_CFGR3_I2C1SW;
 80005c0:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <RCC_I2CCLKConfig+0x14>)
 80005c2:	2110      	movs	r1, #16
 80005c4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005c6:	438a      	bics	r2, r1
 80005c8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set I2CSW bits according to RCC_I2CCLK value */
  RCC->CFGR3 |= RCC_I2CCLK;
 80005ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005cc:	4310      	orrs	r0, r2
 80005ce:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005d0:	4770      	bx	lr
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	40021000 	.word	0x40021000

080005d8 <RCC_USARTCLKConfig>:
{ 
  /* Check the parameters */
  assert_param(IS_RCC_USARTCLK(RCC_USARTCLK));

  /* Clear USARTSW[1:0] bit */
  RCC->CFGR3 &= ~RCC_CFGR3_USART1SW;
 80005d8:	4b04      	ldr	r3, [pc, #16]	; (80005ec <RCC_USARTCLKConfig+0x14>)
 80005da:	2103      	movs	r1, #3
 80005dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005de:	438a      	bics	r2, r1
 80005e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Set USARTSW bits according to RCC_USARTCLK value */
  RCC->CFGR3 |= RCC_USARTCLK;
 80005e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80005e4:	4310      	orrs	r0, r2
 80005e6:	6318      	str	r0, [r3, #48]	; 0x30
}
 80005e8:	4770      	bx	lr
 80005ea:	46c0      	nop			; (mov r8, r8)
 80005ec:	40021000 	.word	0x40021000

080005f0 <RCC_GetClocksFreq>:
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f0:	4a3b      	ldr	r2, [pc, #236]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005f2:	b538      	push	{r3, r4, r5, lr}
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005f4:	6853      	ldr	r3, [r2, #4]
 80005f6:	210c      	movs	r1, #12
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 80005f8:	1c04      	adds	r4, r0, #0
  uint32_t tmp = 0, pllmull = 0, pllsource = 0, prediv1factor = 0, presc = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80005fa:	400b      	ands	r3, r1
  
  switch (tmp)
 80005fc:	2b04      	cmp	r3, #4
 80005fe:	d001      	beq.n	8000604 <RCC_GetClocksFreq+0x14>
 8000600:	2b08      	cmp	r3, #8
 8000602:	d052      	beq.n	80006aa <RCC_GetClocksFreq+0xba>
  {
    case 0x00:  /* HSI used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 8000604:	4837      	ldr	r0, [pc, #220]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 8000606:	6020      	str	r0, [r4, #0]
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000608:	4b35      	ldr	r3, [pc, #212]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
 800060a:	4937      	ldr	r1, [pc, #220]	; (80006e8 <RCC_GetClocksFreq+0xf8>)
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 800060c:	685a      	ldr	r2, [r3, #4]
  tmp = tmp >> 4;
  presc = APBAHBPrescTable[tmp]; 
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 800060e:	1c05      	adds	r5, r0, #0
      RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
      break;
  }
  /* Compute HCLK, PCLK clocks frequencies -----------------------------------*/
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000610:	0612      	lsls	r2, r2, #24
  tmp = tmp >> 4;
 8000612:	0f12      	lsrs	r2, r2, #28
  presc = APBAHBPrescTable[tmp]; 
 8000614:	5c8a      	ldrb	r2, [r1, r2]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000616:	40d5      	lsrs	r5, r2
 8000618:	6065      	str	r5, [r4, #4]
 800061a:	1c2a      	adds	r2, r5, #0

  /* Get PCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE;
 800061c:	685d      	ldr	r5, [r3, #4]
 800061e:	056d      	lsls	r5, r5, #21
  tmp = tmp >> 8;
 8000620:	0f6d      	lsrs	r5, r5, #29
  presc = APBAHBPrescTable[tmp];
 8000622:	5d49      	ldrb	r1, [r1, r5]
  /* PCLK clock frequency */
  RCC_Clocks->PCLK_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000624:	40ca      	lsrs	r2, r1
 8000626:	60a2      	str	r2, [r4, #8]
 8000628:	1c11      	adds	r1, r2, #0

  /* ADCCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_ADCSW) != RCC_CFGR3_ADCSW)
 800062a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800062c:	05d5      	lsls	r5, r2, #23
 800062e:	d421      	bmi.n	8000674 <RCC_GetClocksFreq+0x84>
  {
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
 8000630:	4b2e      	ldr	r3, [pc, #184]	; (80006ec <RCC_GetClocksFreq+0xfc>)
 8000632:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 8000634:	4b2a      	ldr	r3, [pc, #168]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000638:	065d      	lsls	r5, r3, #25
 800063a:	d424      	bmi.n	8000686 <RCC_GetClocksFreq+0x96>
  {
    /* CEC Clock is HSI/256 */
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
 800063c:	4b2c      	ldr	r3, [pc, #176]	; (80006f0 <RCC_GetClocksFreq+0x100>)
 800063e:	6123      	str	r3, [r4, #16]
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000644:	06da      	lsls	r2, r3, #27
 8000646:	d425      	bmi.n	8000694 <RCC_GetClocksFreq+0xa4>
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 8000648:	4b26      	ldr	r3, [pc, #152]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800064a:	4a25      	ldr	r2, [pc, #148]	; (80006e0 <RCC_GetClocksFreq+0xf0>)

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
  {
    /* I2C1 Clock is HSI Osc. */
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
 800064c:	6163      	str	r3, [r4, #20]
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 800064e:	6b15      	ldr	r5, [r2, #48]	; 0x30
 8000650:	2303      	movs	r3, #3
 8000652:	422b      	tst	r3, r5
 8000654:	d024      	beq.n	80006a0 <RCC_GetClocksFreq+0xb0>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
 8000656:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000658:	4019      	ands	r1, r3
 800065a:	2901      	cmp	r1, #1
 800065c:	d03a      	beq.n	80006d4 <RCC_GetClocksFreq+0xe4>
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
 800065e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8000660:	4019      	ands	r1, r3
 8000662:	2902      	cmp	r1, #2
 8000664:	d038      	beq.n	80006d8 <RCC_GetClocksFreq+0xe8>
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW)
 8000666:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000668:	4013      	ands	r3, r2
 800066a:	2b03      	cmp	r3, #3
 800066c:	d101      	bne.n	8000672 <RCC_GetClocksFreq+0x82>
  {
    /* USART1 Clock is HSI Osc. */
    RCC_Clocks->USART1CLK_Frequency = HSI_VALUE;
 800066e:	4b1d      	ldr	r3, [pc, #116]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 8000670:	61a3      	str	r3, [r4, #24]
  }
}
 8000672:	bd38      	pop	{r3, r4, r5, pc}
    /* ADC Clock is HSI14 Osc. */
    RCC_Clocks->ADCCLK_Frequency = HSI14_VALUE;
  }
  else
  {
    if((RCC->CFGR & RCC_CFGR_ADCPRE) != RCC_CFGR_ADCPRE)
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	045a      	lsls	r2, r3, #17
 8000678:	d414      	bmi.n	80006a4 <RCC_GetClocksFreq+0xb4>
    {
      /* ADC Clock is derived from PCLK/2 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
 800067a:	084b      	lsrs	r3, r1, #1
 800067c:	60e3      	str	r3, [r4, #12]
    }
    
  }

  /* CECCLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_CECSW) != RCC_CFGR3_CECSW)
 800067e:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 8000680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000682:	065d      	lsls	r5, r3, #25
 8000684:	d5da      	bpl.n	800063c <RCC_GetClocksFreq+0x4c>
    RCC_Clocks->CECCLK_Frequency = HSI_VALUE / 244;
  }
  else
  {
    /* CECC Clock is LSE Osc. */
    RCC_Clocks->CECCLK_Frequency = LSE_VALUE;
 8000686:	2380      	movs	r3, #128	; 0x80
 8000688:	021b      	lsls	r3, r3, #8
 800068a:	6123      	str	r3, [r4, #16]
  }

  /* I2C1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_I2C1SW) != RCC_CFGR3_I2C1SW)
 800068c:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
 800068e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000690:	06da      	lsls	r2, r3, #27
 8000692:	d5d9      	bpl.n	8000648 <RCC_GetClocksFreq+0x58>
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <RCC_GetClocksFreq+0xf0>)
    RCC_Clocks->I2C1CLK_Frequency = HSI_VALUE;
  }
  else
  {
    /* I2C1 Clock is System Clock */
    RCC_Clocks->I2C1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 8000696:	6160      	str	r0, [r4, #20]
  }

  /* USART1CLK clock frequency */
  if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == 0x0)
 8000698:	6b15      	ldr	r5, [r2, #48]	; 0x30
 800069a:	2303      	movs	r3, #3
 800069c:	422b      	tst	r3, r5
 800069e:	d1da      	bne.n	8000656 <RCC_GetClocksFreq+0x66>
  {
    /* USART1 Clock is PCLK */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
 80006a0:	61a1      	str	r1, [r4, #24]
 80006a2:	e7e6      	b.n	8000672 <RCC_GetClocksFreq+0x82>
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 1;
    }
    else
    {
      /* ADC Clock is derived from PCLK/4 */
      RCC_Clocks->ADCCLK_Frequency = RCC_Clocks->PCLK_Frequency >> 2;
 80006a4:	088b      	lsrs	r3, r1, #2
 80006a6:	60e3      	str	r3, [r4, #12]
 80006a8:	e7c4      	b.n	8000634 <RCC_GetClocksFreq+0x44>
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80006aa:	6855      	ldr	r5, [r2, #4]
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
 80006ac:	6853      	ldr	r3, [r2, #4]
    case 0x04:  /* HSE used as system clock */
      RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
      break;
    case 0x08:  /* PLL used as system clock */
      /* Get PLL clock source and multiplication factor ----------------------*/
      pllmull = RCC->CFGR & RCC_CFGR_PLLMULL;
 80006ae:	02ad      	lsls	r5, r5, #10
      pllsource = RCC->CFGR & RCC_CFGR_PLLSRC;
      pllmull = ( pllmull >> 18) + 2;
 80006b0:	0f2d      	lsrs	r5, r5, #28
 80006b2:	3502      	adds	r5, #2
      
      if (pllsource == 0x00)
 80006b4:	03d9      	lsls	r1, r3, #15
 80006b6:	d403      	bmi.n	80006c0 <RCC_GetClocksFreq+0xd0>
      {
        /* HSI oscillator clock divided by 2 selected as PLL clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSI_VALUE >> 1) * pllmull;
 80006b8:	480e      	ldr	r0, [pc, #56]	; (80006f4 <RCC_GetClocksFreq+0x104>)
 80006ba:	4368      	muls	r0, r5
 80006bc:	6020      	str	r0, [r4, #0]
 80006be:	e7a3      	b.n	8000608 <RCC_GetClocksFreq+0x18>
      }
      else
      {
        prediv1factor = (RCC->CFGR2 & RCC_CFGR2_PREDIV1) + 1;
 80006c0:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 80006c2:	210f      	movs	r1, #15
 80006c4:	4019      	ands	r1, r3
 80006c6:	3101      	adds	r1, #1
        /* HSE oscillator clock selected as PREDIV1 clock entry */
        RCC_Clocks->SYSCLK_Frequency = (HSE_VALUE / prediv1factor) * pllmull; 
 80006c8:	4806      	ldr	r0, [pc, #24]	; (80006e4 <RCC_GetClocksFreq+0xf4>)
 80006ca:	f001 f97b 	bl	80019c4 <__aeabi_uidiv>
 80006ce:	4368      	muls	r0, r5
 80006d0:	6020      	str	r0, [r4, #0]
 80006d2:	e799      	b.n	8000608 <RCC_GetClocksFreq+0x18>
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->PCLK_Frequency;
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_0)
  {
    /* USART1 Clock is System Clock */
    RCC_Clocks->USART1CLK_Frequency = RCC_Clocks->SYSCLK_Frequency;
 80006d4:	61a0      	str	r0, [r4, #24]
 80006d6:	e7cc      	b.n	8000672 <RCC_GetClocksFreq+0x82>
  }
  else if((RCC->CFGR3 & RCC_CFGR3_USART1SW) == RCC_CFGR3_USART1SW_1)
  {
    /* USART1 Clock is LSE Osc. */
    RCC_Clocks->USART1CLK_Frequency = LSE_VALUE;
 80006d8:	2380      	movs	r3, #128	; 0x80
 80006da:	021b      	lsls	r3, r3, #8
 80006dc:	61a3      	str	r3, [r4, #24]
 80006de:	e7c8      	b.n	8000672 <RCC_GetClocksFreq+0x82>
 80006e0:	40021000 	.word	0x40021000
 80006e4:	007a1200 	.word	0x007a1200
 80006e8:	20000000 	.word	0x20000000
 80006ec:	00d59f80 	.word	0x00d59f80
 80006f0:	00008012 	.word	0x00008012
 80006f4:	003d0900 	.word	0x003d0900

080006f8 <RCC_RTCCLKConfig>:
{
  /* Check the parameters */
  assert_param(IS_RCC_RTCCLK_SOURCE(RCC_RTCCLKSource));
  
  /* Select the RTC clock source */
  RCC->BDCR |= RCC_RTCCLKSource;
 80006f8:	4b02      	ldr	r3, [pc, #8]	; (8000704 <RCC_RTCCLKConfig+0xc>)
 80006fa:	6a1a      	ldr	r2, [r3, #32]
 80006fc:	4310      	orrs	r0, r2
 80006fe:	6218      	str	r0, [r3, #32]
}
 8000700:	4770      	bx	lr
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	40021000 	.word	0x40021000

08000708 <RCC_RTCCLKCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 8000708:	4b06      	ldr	r3, [pc, #24]	; (8000724 <RCC_RTCCLKCmd+0x1c>)
  * @param  NewState: new state of the RTC clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_RTCCLKCmd(FunctionalState NewState)
{
 800070a:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800070c:	6a19      	ldr	r1, [r3, #32]
void RCC_RTCCLKCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 800070e:	2800      	cmp	r0, #0
 8000710:	d103      	bne.n	800071a <RCC_RTCCLKCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_RTCEN;
 8000712:	4a05      	ldr	r2, [pc, #20]	; (8000728 <RCC_RTCCLKCmd+0x20>)
 8000714:	400a      	ands	r2, r1
 8000716:	621a      	str	r2, [r3, #32]
  }
}
 8000718:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_RTCEN;
 800071a:	2280      	movs	r2, #128	; 0x80
 800071c:	0212      	lsls	r2, r2, #8
 800071e:	430a      	orrs	r2, r1
 8000720:	621a      	str	r2, [r3, #32]
 8000722:	e7f9      	b.n	8000718 <RCC_RTCCLKCmd+0x10>
 8000724:	40021000 	.word	0x40021000
 8000728:	ffff7fff 	.word	0xffff7fff

0800072c <RCC_BackupResetCmd>:
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 800072c:	4b06      	ldr	r3, [pc, #24]	; (8000748 <RCC_BackupResetCmd+0x1c>)
  * @param  NewState: new state of the Backup domain reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_BackupResetCmd(FunctionalState NewState)
{
 800072e:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 8000730:	6a19      	ldr	r1, [r3, #32]
void RCC_BackupResetCmd(FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000732:	2800      	cmp	r0, #0
 8000734:	d103      	bne.n	800073e <RCC_BackupResetCmd+0x12>
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
  }
  else
  {
    RCC->BDCR &= ~RCC_BDCR_BDRST;
 8000736:	4a05      	ldr	r2, [pc, #20]	; (800074c <RCC_BackupResetCmd+0x20>)
 8000738:	400a      	ands	r2, r1
 800073a:	621a      	str	r2, [r3, #32]
  }
}
 800073c:	bd00      	pop	{pc}
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->BDCR |= RCC_BDCR_BDRST;
 800073e:	2280      	movs	r2, #128	; 0x80
 8000740:	0252      	lsls	r2, r2, #9
 8000742:	430a      	orrs	r2, r1
 8000744:	621a      	str	r2, [r3, #32]
 8000746:	e7f9      	b.n	800073c <RCC_BackupResetCmd+0x10>
 8000748:	40021000 	.word	0x40021000
 800074c:	fffeffff 	.word	0xfffeffff

08000750 <RCC_AHBPeriphClockCmd>:
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <RCC_AHBPeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000752:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000754:	695a      	ldr	r2, [r3, #20]
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000756:	2900      	cmp	r1, #0
 8000758:	d102      	bne.n	8000760 <RCC_AHBPeriphClockCmd+0x10>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 800075a:	4382      	bics	r2, r0
 800075c:	615a      	str	r2, [r3, #20]
  }
}
 800075e:	bd00      	pop	{pc}
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000760:	4310      	orrs	r0, r2
 8000762:	6158      	str	r0, [r3, #20]
 8000764:	e7fb      	b.n	800075e <RCC_AHBPeriphClockCmd+0xe>
 8000766:	46c0      	nop			; (mov r8, r8)
 8000768:	40021000 	.word	0x40021000

0800076c <RCC_APB2PeriphClockCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800076c:	4b05      	ldr	r3, [pc, #20]	; (8000784 <RCC_APB2PeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 800076e:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000770:	699a      	ldr	r2, [r3, #24]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000772:	2900      	cmp	r1, #0
 8000774:	d102      	bne.n	800077c <RCC_APB2PeriphClockCmd+0x10>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000776:	4382      	bics	r2, r0
 8000778:	619a      	str	r2, [r3, #24]
  }
}
 800077a:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 800077c:	4310      	orrs	r0, r2
 800077e:	6198      	str	r0, [r3, #24]
 8000780:	e7fb      	b.n	800077a <RCC_APB2PeriphClockCmd+0xe>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	40021000 	.word	0x40021000

08000788 <RCC_APB1PeriphClockCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000788:	4b05      	ldr	r3, [pc, #20]	; (80007a0 <RCC_APB1PeriphClockCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800078a:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800078c:	69da      	ldr	r2, [r3, #28]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800078e:	2900      	cmp	r1, #0
 8000790:	d102      	bne.n	8000798 <RCC_APB1PeriphClockCmd+0x10>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
 8000792:	4382      	bics	r2, r0
 8000794:	61da      	str	r2, [r3, #28]
  }
}
 8000796:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 8000798:	4310      	orrs	r0, r2
 800079a:	61d8      	str	r0, [r3, #28]
 800079c:	e7fb      	b.n	8000796 <RCC_APB1PeriphClockCmd+0xe>
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	40021000 	.word	0x40021000

080007a4 <RCC_AHBPeriphResetCmd>:
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007a4:	4b05      	ldr	r3, [pc, #20]	; (80007bc <RCC_AHBPeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphResetCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80007a6:	b500      	push	{lr}
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
  /* Check the parameters */
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007aa:	2900      	cmp	r1, #0
 80007ac:	d102      	bne.n	80007b4 <RCC_AHBPeriphResetCmd+0x10>
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBRSTR &= ~RCC_AHBPeriph;
 80007ae:	4382      	bics	r2, r0
 80007b0:	629a      	str	r2, [r3, #40]	; 0x28
  }
}
 80007b2:	bd00      	pop	{pc}
  assert_param(IS_RCC_AHB_RST_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->AHBRSTR |= RCC_AHBPeriph;
 80007b4:	4310      	orrs	r0, r2
 80007b6:	6298      	str	r0, [r3, #40]	; 0x28
 80007b8:	e7fb      	b.n	80007b2 <RCC_AHBPeriphResetCmd+0xe>
 80007ba:	46c0      	nop			; (mov r8, r8)
 80007bc:	40021000 	.word	0x40021000

080007c0 <RCC_APB2PeriphResetCmd>:
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007c0:	4b05      	ldr	r3, [pc, #20]	; (80007d8 <RCC_APB2PeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral reset.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphResetCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80007c2:	b500      	push	{lr}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007c4:	68da      	ldr	r2, [r3, #12]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007c6:	2900      	cmp	r1, #0
 80007c8:	d102      	bne.n	80007d0 <RCC_APB2PeriphResetCmd+0x10>
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2RSTR &= ~RCC_APB2Periph;
 80007ca:	4382      	bics	r2, r0
 80007cc:	60da      	str	r2, [r3, #12]
  }
}
 80007ce:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB2RSTR |= RCC_APB2Periph;
 80007d0:	4310      	orrs	r0, r2
 80007d2:	60d8      	str	r0, [r3, #12]
 80007d4:	e7fb      	b.n	80007ce <RCC_APB2PeriphResetCmd+0xe>
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	40021000 	.word	0x40021000

080007dc <RCC_APB1PeriphResetCmd>:
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007dc:	4b05      	ldr	r3, [pc, #20]	; (80007f4 <RCC_APB1PeriphResetCmd+0x18>)
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphResetCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80007de:	b500      	push	{lr}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007e0:	691a      	ldr	r2, [r3, #16]
{
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e2:	2900      	cmp	r1, #0
 80007e4:	d102      	bne.n	80007ec <RCC_APB1PeriphResetCmd+0x10>
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
  }
  else
  {
    RCC->APB1RSTR &= ~RCC_APB1Periph;
 80007e6:	4382      	bics	r2, r0
 80007e8:	611a      	str	r2, [r3, #16]
  }
}
 80007ea:	bd00      	pop	{pc}
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    RCC->APB1RSTR |= RCC_APB1Periph;
 80007ec:	4310      	orrs	r0, r2
 80007ee:	6118      	str	r0, [r3, #16]
 80007f0:	e7fb      	b.n	80007ea <RCC_APB1PeriphResetCmd+0xe>
 80007f2:	46c0      	nop			; (mov r8, r8)
 80007f4:	40021000 	.word	0x40021000

080007f8 <RCC_ITConfig>:
  * @param  NewState: new state of the specified RCC interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ITConfig(uint8_t RCC_IT, FunctionalState NewState)
{
 80007f8:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 80007fa:	4b05      	ldr	r3, [pc, #20]	; (8000810 <RCC_ITConfig+0x18>)
 80007fc:	781a      	ldrb	r2, [r3, #0]
{
  /* Check the parameters */
  assert_param(IS_RCC_IT(RCC_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80007fe:	2900      	cmp	r1, #0
 8000800:	d102      	bne.n	8000808 <RCC_ITConfig+0x10>
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
  }
  else
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to disable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS &= (uint8_t)~RCC_IT;
 8000802:	4382      	bics	r2, r0
 8000804:	701a      	strb	r2, [r3, #0]
  }
}
 8000806:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Perform Byte access to RCC_CIR[13:8] bits to enable the selected interrupts */
    *(__IO uint8_t *) CIR_BYTE1_ADDRESS |= RCC_IT;
 8000808:	4310      	orrs	r0, r2
 800080a:	7018      	strb	r0, [r3, #0]
 800080c:	e7fb      	b.n	8000806 <RCC_ITConfig+0xe>
 800080e:	46c0      	nop			; (mov r8, r8)
 8000810:	40021009 	.word	0x40021009

08000814 <RCC_GetFlagStatus>:
  *             @arg RCC_FLAG_LPWRRST: Low Power reset
  *             @arg RCC_FLAG_HSI14RDY: HSI14 oscillator clock ready  
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000814:	b500      	push	{lr}

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000816:	0943      	lsrs	r3, r0, #5

  if (tmp == 0)               /* The flag to check is in CR register */
 8000818:	d108      	bne.n	800082c <RCC_GetFlagStatus+0x18>
  {
    statusreg = RCC->CR;
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <RCC_GetFlagStatus+0x34>)
 800081c:	681a      	ldr	r2, [r3, #0]
  }    

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 800081e:	231f      	movs	r3, #31
 8000820:	4018      	ands	r0, r3
 8000822:	40c2      	lsrs	r2, r0
 8000824:	1c10      	adds	r0, r2, #0
  else
  {
    bitstatus = RESET;
  }
  /* Return the flag status */
  return bitstatus;
 8000826:	2301      	movs	r3, #1
 8000828:	4018      	ands	r0, r3
}
 800082a:	bd00      	pop	{pc}

  if (tmp == 0)               /* The flag to check is in CR register */
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
 800082c:	2b01      	cmp	r3, #1
 800082e:	d004      	beq.n	800083a <RCC_GetFlagStatus+0x26>
  {
    statusreg = RCC->BDCR;
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
 8000830:	2b02      	cmp	r3, #2
 8000832:	d005      	beq.n	8000840 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CSR;
  }
  else                        /* The flag to check is in CR2 register */
  {
    statusreg = RCC->CR2;
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <RCC_GetFlagStatus+0x34>)
 8000836:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000838:	e7f1      	b.n	800081e <RCC_GetFlagStatus+0xa>
  {
    statusreg = RCC->CR;
  }
  else if (tmp == 1)          /* The flag to check is in BDCR register */
  {
    statusreg = RCC->BDCR;
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <RCC_GetFlagStatus+0x34>)
 800083c:	6a1a      	ldr	r2, [r3, #32]
 800083e:	e7ee      	b.n	800081e <RCC_GetFlagStatus+0xa>
  }
  else if (tmp == 2)          /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000840:	4b01      	ldr	r3, [pc, #4]	; (8000848 <RCC_GetFlagStatus+0x34>)
 8000842:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000844:	e7eb      	b.n	800081e <RCC_GetFlagStatus+0xa>
 8000846:	46c0      	nop			; (mov r8, r8)
 8000848:	40021000 	.word	0x40021000

0800084c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800084c:	b510      	push	{r4, lr}
  __IO uint32_t StartUpCounter = 0;
 800084e:	2300      	movs	r3, #0
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 8000850:	b082      	sub	sp, #8
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000852:	24a0      	movs	r4, #160	; 0xa0
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
  __IO uint32_t StartUpCounter = 0;
 8000854:	9301      	str	r3, [sp, #4]
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
    StartUpCounter++;  
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 8000856:	00e4      	lsls	r4, r4, #3
 8000858:	e001      	b.n	800085e <RCC_WaitForHSEStartUp+0x12>
 800085a:	2800      	cmp	r0, #0
 800085c:	d108      	bne.n	8000870 <RCC_WaitForHSEStartUp+0x24>
  FlagStatus HSEStatus = RESET;
  
  /* Wait till HSE is ready and if timeout is reached exit */
  do
  {
    HSEStatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800085e:	2011      	movs	r0, #17
 8000860:	f7ff ffd8 	bl	8000814 <RCC_GetFlagStatus>
    StartUpCounter++;  
 8000864:	9b01      	ldr	r3, [sp, #4]
 8000866:	3301      	adds	r3, #1
 8000868:	9301      	str	r3, [sp, #4]
  } while((StartUpCounter != HSE_STARTUP_TIMEOUT) && (HSEStatus == RESET));
 800086a:	9b01      	ldr	r3, [sp, #4]
 800086c:	42a3      	cmp	r3, r4
 800086e:	d1f4      	bne.n	800085a <RCC_WaitForHSEStartUp+0xe>
  
  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 8000870:	2011      	movs	r0, #17
 8000872:	f7ff ffcf 	bl	8000814 <RCC_GetFlagStatus>
  }
  else
  {
    status = ERROR;
  }  
  return (status);
 8000876:	1e43      	subs	r3, r0, #1
 8000878:	4198      	sbcs	r0, r3
}
 800087a:	b002      	add	sp, #8
 800087c:	bd10      	pop	{r4, pc}
 800087e:	46c0      	nop			; (mov r8, r8)

08000880 <RCC_ClearFlag>:
  * @retval None
  */
void RCC_ClearFlag(void)
{
  /* Set RMVF bit to clear the reset flags */
  RCC->CSR |= RCC_CSR_RMVF;
 8000880:	4b03      	ldr	r3, [pc, #12]	; (8000890 <RCC_ClearFlag+0x10>)
 8000882:	2280      	movs	r2, #128	; 0x80
 8000884:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8000886:	0452      	lsls	r2, r2, #17
 8000888:	430a      	orrs	r2, r1
 800088a:	625a      	str	r2, [r3, #36]	; 0x24
}
 800088c:	4770      	bx	lr
 800088e:	46c0      	nop			; (mov r8, r8)
 8000890:	40021000 	.word	0x40021000

08000894 <RCC_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_RCC_GET_IT(RCC_IT));
  
  /* Check the status of the specified RCC interrupt */
  if ((RCC->CIR & RCC_IT) != (uint32_t)RESET)
 8000894:	4b02      	ldr	r3, [pc, #8]	; (80008a0 <RCC_GetITStatus+0xc>)
 8000896:	689b      	ldr	r3, [r3, #8]
 8000898:	4018      	ands	r0, r3
  else
  {
    bitstatus = RESET;
  }
  /* Return the RCC_IT status */
  return  bitstatus;
 800089a:	1e43      	subs	r3, r0, #1
 800089c:	4198      	sbcs	r0, r3
}
 800089e:	4770      	bx	lr
 80008a0:	40021000 	.word	0x40021000

080008a4 <RCC_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_RCC_CLEAR_IT(RCC_IT));
  
  /* Perform Byte access to RCC_CIR[23:16] bits to clear the selected interrupt
     pending bits */
  *(__IO uint8_t *) CIR_BYTE2_ADDRESS = RCC_IT;
 80008a4:	4b01      	ldr	r3, [pc, #4]	; (80008ac <RCC_ClearITPendingBit+0x8>)
 80008a6:	7018      	strb	r0, [r3, #0]
}
 80008a8:	4770      	bx	lr
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	4002100a 	.word	0x4002100a

080008b0 <TIM_DeInit>:
  * @param  TIMx: where x can be 1, 2, 3, 6, 14, 15, 16 and 17 to select the TIM peripheral.
  * @retval None
  *   
  */
void TIM_DeInit(TIM_TypeDef* TIMx)
{
 80008b0:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
 80008b2:	4b36      	ldr	r3, [pc, #216]	; (800098c <TIM_DeInit+0xdc>)
 80008b4:	4298      	cmp	r0, r3
 80008b6:	d021      	beq.n	80008fc <TIM_DeInit+0x4c>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
  }     
  else if (TIMx == TIM2)
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	05db      	lsls	r3, r3, #23
 80008bc:	4298      	cmp	r0, r3
 80008be:	d028      	beq.n	8000912 <TIM_DeInit+0x62>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
  }
  else if (TIMx == TIM3)
 80008c0:	4b33      	ldr	r3, [pc, #204]	; (8000990 <TIM_DeInit+0xe0>)
 80008c2:	4298      	cmp	r0, r3
 80008c4:	d02e      	beq.n	8000924 <TIM_DeInit+0x74>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
  }
  else if (TIMx == TIM6)
 80008c6:	4b33      	ldr	r3, [pc, #204]	; (8000994 <TIM_DeInit+0xe4>)
 80008c8:	4298      	cmp	r0, r3
 80008ca:	d034      	beq.n	8000936 <TIM_DeInit+0x86>
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
  } 
  else if (TIMx == TIM14) 
 80008cc:	4b32      	ldr	r3, [pc, #200]	; (8000998 <TIM_DeInit+0xe8>)
 80008ce:	4298      	cmp	r0, r3
 80008d0:	d03a      	beq.n	8000948 <TIM_DeInit+0x98>
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
  }        
  else if (TIMx == TIM15)
 80008d2:	4b32      	ldr	r3, [pc, #200]	; (800099c <TIM_DeInit+0xec>)
 80008d4:	4298      	cmp	r0, r3
 80008d6:	d042      	beq.n	800095e <TIM_DeInit+0xae>
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
  } 
  else if (TIMx == TIM16)
 80008d8:	4b31      	ldr	r3, [pc, #196]	; (80009a0 <TIM_DeInit+0xf0>)
 80008da:	4298      	cmp	r0, r3
 80008dc:	d04a      	beq.n	8000974 <TIM_DeInit+0xc4>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
  } 
  else
  {
    if (TIMx == TIM17)
 80008de:	4b31      	ldr	r3, [pc, #196]	; (80009a4 <TIM_DeInit+0xf4>)
 80008e0:	4298      	cmp	r0, r3
 80008e2:	d000      	beq.n	80008e6 <TIM_DeInit+0x36>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
    }  
  }
     
}
 80008e4:	bd08      	pop	{r3, pc}
  } 
  else
  {
    if (TIMx == TIM17)
    {
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, ENABLE);
 80008e6:	2080      	movs	r0, #128	; 0x80
 80008e8:	02c0      	lsls	r0, r0, #11
 80008ea:	2101      	movs	r1, #1
 80008ec:	f7ff ff68 	bl	80007c0 <RCC_APB2PeriphResetCmd>
      RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM17, DISABLE);
 80008f0:	2080      	movs	r0, #128	; 0x80
 80008f2:	02c0      	lsls	r0, r0, #11
 80008f4:	2100      	movs	r1, #0
 80008f6:	f7ff ff63 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 80008fa:	e7f3      	b.n	80008e4 <TIM_DeInit+0x34>
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 

  if (TIMx == TIM1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, ENABLE);
 80008fc:	2080      	movs	r0, #128	; 0x80
 80008fe:	0100      	lsls	r0, r0, #4
 8000900:	2101      	movs	r1, #1
 8000902:	f7ff ff5d 	bl	80007c0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM1, DISABLE);  
 8000906:	2080      	movs	r0, #128	; 0x80
 8000908:	0100      	lsls	r0, r0, #4
 800090a:	2100      	movs	r1, #0
 800090c:	f7ff ff58 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 8000910:	e7e8      	b.n	80008e4 <TIM_DeInit+0x34>
  }     
  else if (TIMx == TIM2)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, ENABLE);
 8000912:	2001      	movs	r0, #1
 8000914:	2101      	movs	r1, #1
 8000916:	f7ff ff61 	bl	80007dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM2, DISABLE);
 800091a:	2001      	movs	r0, #1
 800091c:	2100      	movs	r1, #0
 800091e:	f7ff ff5d 	bl	80007dc <RCC_APB1PeriphResetCmd>
 8000922:	e7df      	b.n	80008e4 <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM3)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, ENABLE);
 8000924:	2002      	movs	r0, #2
 8000926:	2101      	movs	r1, #1
 8000928:	f7ff ff58 	bl	80007dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM3, DISABLE);
 800092c:	2002      	movs	r0, #2
 800092e:	2100      	movs	r1, #0
 8000930:	f7ff ff54 	bl	80007dc <RCC_APB1PeriphResetCmd>
 8000934:	e7d6      	b.n	80008e4 <TIM_DeInit+0x34>
  }
  else if (TIMx == TIM6)
  {
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, ENABLE);
 8000936:	2010      	movs	r0, #16
 8000938:	2101      	movs	r1, #1
 800093a:	f7ff ff4f 	bl	80007dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM6, DISABLE);
 800093e:	2010      	movs	r0, #16
 8000940:	2100      	movs	r1, #0
 8000942:	f7ff ff4b 	bl	80007dc <RCC_APB1PeriphResetCmd>
 8000946:	e7cd      	b.n	80008e4 <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM14) 
  {       
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, ENABLE);
 8000948:	2080      	movs	r0, #128	; 0x80
 800094a:	0040      	lsls	r0, r0, #1
 800094c:	2101      	movs	r1, #1
 800094e:	f7ff ff45 	bl	80007dc <RCC_APB1PeriphResetCmd>
    RCC_APB1PeriphResetCmd(RCC_APB1Periph_TIM14, DISABLE);  
 8000952:	2080      	movs	r0, #128	; 0x80
 8000954:	0040      	lsls	r0, r0, #1
 8000956:	2100      	movs	r1, #0
 8000958:	f7ff ff40 	bl	80007dc <RCC_APB1PeriphResetCmd>
 800095c:	e7c2      	b.n	80008e4 <TIM_DeInit+0x34>
  }        
  else if (TIMx == TIM15)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, ENABLE);
 800095e:	2080      	movs	r0, #128	; 0x80
 8000960:	0240      	lsls	r0, r0, #9
 8000962:	2101      	movs	r1, #1
 8000964:	f7ff ff2c 	bl	80007c0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM15, DISABLE);
 8000968:	2080      	movs	r0, #128	; 0x80
 800096a:	0240      	lsls	r0, r0, #9
 800096c:	2100      	movs	r1, #0
 800096e:	f7ff ff27 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 8000972:	e7b7      	b.n	80008e4 <TIM_DeInit+0x34>
  } 
  else if (TIMx == TIM16)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, ENABLE);
 8000974:	2080      	movs	r0, #128	; 0x80
 8000976:	0280      	lsls	r0, r0, #10
 8000978:	2101      	movs	r1, #1
 800097a:	f7ff ff21 	bl	80007c0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_TIM16, DISABLE);
 800097e:	2080      	movs	r0, #128	; 0x80
 8000980:	0280      	lsls	r0, r0, #10
 8000982:	2100      	movs	r1, #0
 8000984:	f7ff ff1c 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 8000988:	e7ac      	b.n	80008e4 <TIM_DeInit+0x34>
 800098a:	46c0      	nop			; (mov r8, r8)
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40000400 	.word	0x40000400
 8000994:	40001000 	.word	0x40001000
 8000998:	40002000 	.word	0x40002000
 800099c:	40014000 	.word	0x40014000
 80009a0:	40014400 	.word	0x40014400
 80009a4:	40014800 	.word	0x40014800

080009a8 <TIM_TimeBaseInit>:
  *         structure that contains the configuration information for
  *         the specified TIM peripheral.
  * @retval None
  */
void TIM_TimeBaseInit(TIM_TypeDef* TIMx, TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
 80009a8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 80009aa:	4c1a      	ldr	r4, [pc, #104]	; (8000a14 <TIM_TimeBaseInit+0x6c>)
 80009ac:	25c0      	movs	r5, #192	; 0xc0
 80009ae:	1902      	adds	r2, r0, r4
 80009b0:	062d      	lsls	r5, r5, #24
 80009b2:	4254      	negs	r4, r2
 80009b4:	4162      	adcs	r2, r4
 80009b6:	1944      	adds	r4, r0, r5
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  
 80009b8:	8803      	ldrh	r3, [r0, #0]

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 80009ba:	2c00      	cmp	r4, #0
 80009bc:	d001      	beq.n	80009c2 <TIM_TimeBaseInit+0x1a>
 80009be:	2a00      	cmp	r2, #0
 80009c0:	d01a      	beq.n	80009f8 <TIM_TimeBaseInit+0x50>
  {
    /* Select the Counter Mode */
    tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 80009c2:	2470      	movs	r4, #112	; 0x70
 80009c4:	43a3      	bics	r3, r4
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_CounterMode;
 80009c6:	884c      	ldrh	r4, [r1, #2]
 80009c8:	4323      	orrs	r3, r4
  }
 
  if(TIMx != TIM6)
 80009ca:	4c13      	ldr	r4, [pc, #76]	; (8000a18 <TIM_TimeBaseInit+0x70>)
 80009cc:	42a0      	cmp	r0, r4
 80009ce:	d003      	beq.n	80009d8 <TIM_TimeBaseInit+0x30>
  {
    /* Set the clock division */
    tmpcr1 &= (uint16_t)(~((uint16_t)TIM_CR1_CKD));
    tmpcr1 |= (uint32_t)TIM_TimeBaseInitStruct->TIM_ClockDivision;
 80009d0:	4d12      	ldr	r5, [pc, #72]	; (8000a1c <TIM_TimeBaseInit+0x74>)
 80009d2:	890c      	ldrh	r4, [r1, #8]
 80009d4:	402b      	ands	r3, r5
 80009d6:	4323      	orrs	r3, r4
  }

  TIMx->CR1 = tmpcr1;
 80009d8:	8003      	strh	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009da:	684b      	ldr	r3, [r1, #4]
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80009dc:	4c10      	ldr	r4, [pc, #64]	; (8000a20 <TIM_TimeBaseInit+0x78>)
  }

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 80009de:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
 80009e0:	880b      	ldrh	r3, [r1, #0]
 80009e2:	8503      	strh	r3, [r0, #40]	; 0x28
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 80009e4:	1903      	adds	r3, r0, r4
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <TIM_TimeBaseInit+0x46>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d008      	beq.n	8000a00 <TIM_TimeBaseInit+0x58>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = TIM_TimeBaseInitStruct->TIM_RepetitionCounter;
 80009ee:	7a8b      	ldrb	r3, [r1, #10]
 80009f0:	8603      	strh	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler and the Repetition counter
     values immediately */
  TIMx->EGR = TIM_PSCReloadMode_Immediate;           
 80009f2:	2301      	movs	r3, #1
 80009f4:	8283      	strh	r3, [r0, #20]
}
 80009f6:	bd30      	pop	{r4, r5, pc}
  assert_param(IS_TIM_COUNTER_MODE(TIM_TimeBaseInitStruct->TIM_CounterMode));
  assert_param(IS_TIM_CKD_DIV(TIM_TimeBaseInitStruct->TIM_ClockDivision));

  tmpcr1 = TIMx->CR1;  

  if((TIMx == TIM1) || (TIMx == TIM2) || (TIMx == TIM3))
 80009f8:	4c0a      	ldr	r4, [pc, #40]	; (8000a24 <TIM_TimeBaseInit+0x7c>)
 80009fa:	42a0      	cmp	r0, r4
 80009fc:	d1e5      	bne.n	80009ca <TIM_TimeBaseInit+0x22>
 80009fe:	e7e0      	b.n	80009c2 <TIM_TimeBaseInit+0x1a>
  TIMx->ARR = TIM_TimeBaseInitStruct->TIM_Period ;
 
  /* Set the Prescaler value */
  TIMx->PSC = TIM_TimeBaseInitStruct->TIM_Prescaler;
    
  if ((TIMx == TIM1) || (TIMx == TIM15)|| (TIMx == TIM16) || (TIMx == TIM17))  
 8000a00:	4d09      	ldr	r5, [pc, #36]	; (8000a28 <TIM_TimeBaseInit+0x80>)
 8000a02:	1943      	adds	r3, r0, r5
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d0f2      	beq.n	80009ee <TIM_TimeBaseInit+0x46>
 8000a08:	4a08      	ldr	r2, [pc, #32]	; (8000a2c <TIM_TimeBaseInit+0x84>)
 8000a0a:	1883      	adds	r3, r0, r2
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0ee      	beq.n	80009ee <TIM_TimeBaseInit+0x46>
 8000a10:	e7ef      	b.n	80009f2 <TIM_TimeBaseInit+0x4a>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	bffed400 	.word	0xbffed400
 8000a18:	40001000 	.word	0x40001000
 8000a1c:	fffffcff 	.word	0xfffffcff
 8000a20:	bffec000 	.word	0xbffec000
 8000a24:	40000400 	.word	0x40000400
 8000a28:	bffeb800 	.word	0xbffeb800
 8000a2c:	bffebc00 	.word	0xbffebc00

08000a30 <TIM_TimeBaseStructInit>:
  * @retval None
  */
void TIM_TimeBaseStructInit(TIM_TimeBaseInitTypeDef* TIM_TimeBaseInitStruct)
{
  /* Set the default configuration */
  TIM_TimeBaseInitStruct->TIM_Period = 0xFFFFFFFF;
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	6043      	str	r3, [r0, #4]
  TIM_TimeBaseInitStruct->TIM_Prescaler = 0x0000;
 8000a36:	2300      	movs	r3, #0
 8000a38:	8003      	strh	r3, [r0, #0]
  TIM_TimeBaseInitStruct->TIM_ClockDivision = TIM_CKD_DIV1;
 8000a3a:	8103      	strh	r3, [r0, #8]
  TIM_TimeBaseInitStruct->TIM_CounterMode = TIM_CounterMode_Up;
 8000a3c:	8043      	strh	r3, [r0, #2]
  TIM_TimeBaseInitStruct->TIM_RepetitionCounter = 0x0000;
 8000a3e:	7283      	strb	r3, [r0, #10]
}
 8000a40:	4770      	bx	lr
 8000a42:	46c0      	nop			; (mov r8, r8)

08000a44 <TIM_PrescalerConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_PRESCALER_RELOAD(TIM_PSCReloadMode));
  
  /* Set the Prescaler value */
  TIMx->PSC = Prescaler;
 8000a44:	8501      	strh	r1, [r0, #40]	; 0x28
  /* Set or reset the UG Bit */
  TIMx->EGR = TIM_PSCReloadMode;
 8000a46:	8282      	strh	r2, [r0, #20]
}
 8000a48:	4770      	bx	lr
 8000a4a:	46c0      	nop			; (mov r8, r8)

08000a4c <TIM_CounterModeConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_COUNTER_MODE(TIM_CounterMode));
  
  tmpcr1 = TIMx->CR1;
 8000a4c:	8803      	ldrh	r3, [r0, #0]
  /* Reset the CMS and DIR Bits */
  tmpcr1 &= (uint16_t)(~((uint16_t)(TIM_CR1_DIR | TIM_CR1_CMS)));
 8000a4e:	2270      	movs	r2, #112	; 0x70
 8000a50:	4393      	bics	r3, r2
  /* Set the Counter Mode */
  tmpcr1 |= TIM_CounterMode;
 8000a52:	4319      	orrs	r1, r3
  /* Write to TIMx CR1 register */
  TIMx->CR1 = tmpcr1;
 8000a54:	8001      	strh	r1, [r0, #0]
}
 8000a56:	4770      	bx	lr

08000a58 <TIM_SetCounter>:
{
  /* Check the parameters */
   assert_param(IS_TIM_ALL_PERIPH(TIMx));
   
  /* Set the Counter Register value */
  TIMx->CNT = Counter;
 8000a58:	6241      	str	r1, [r0, #36]	; 0x24
}
 8000a5a:	4770      	bx	lr

08000a5c <TIM_SetAutoreload>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Set the Autoreload Register value */
  TIMx->ARR = Autoreload;
 8000a5c:	62c1      	str	r1, [r0, #44]	; 0x2c
}
 8000a5e:	4770      	bx	lr

08000a60 <TIM_GetCounter>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Counter Register value */
  return TIMx->CNT;
 8000a60:	6a40      	ldr	r0, [r0, #36]	; 0x24
}
 8000a62:	4770      	bx	lr

08000a64 <TIM_GetPrescaler>:
{
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  
  /* Get the Prescaler Register value */
  return TIMx->PSC;
 8000a64:	8d00      	ldrh	r0, [r0, #40]	; 0x28
}
 8000a66:	4770      	bx	lr

08000a68 <TIM_UpdateDisableConfig>:
  * @param  NewState: new state of the TIMx UDIS bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_UpdateDisableConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000a68:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000a6a:	2900      	cmp	r1, #0
 8000a6c:	d104      	bne.n	8000a78 <TIM_UpdateDisableConfig+0x10>
    TIMx->CR1 |= TIM_CR1_UDIS;
  }
  else
  {
    /* Reset the Update Disable Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_UDIS);
 8000a6e:	8803      	ldrh	r3, [r0, #0]
 8000a70:	2202      	movs	r2, #2
 8000a72:	4393      	bics	r3, r2
 8000a74:	8003      	strh	r3, [r0, #0]
  }
}
 8000a76:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the Update Disable Bit */
    TIMx->CR1 |= TIM_CR1_UDIS;
 8000a78:	8802      	ldrh	r2, [r0, #0]
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	8003      	strh	r3, [r0, #0]
 8000a80:	e7f9      	b.n	8000a76 <TIM_UpdateDisableConfig+0xe>
 8000a82:	46c0      	nop			; (mov r8, r8)

08000a84 <TIM_UpdateRequestConfig>:
  *                 generation through the slave mode controller.
  *            @arg TIM_UpdateSource_Global: Source of update is counter overflow/underflow.
  * @retval None
  */
void TIM_UpdateRequestConfig(TIM_TypeDef* TIMx, uint16_t TIM_UpdateSource)
{
 8000a84:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
 8000a86:	2900      	cmp	r1, #0
 8000a88:	d104      	bne.n	8000a94 <TIM_UpdateRequestConfig+0x10>
    TIMx->CR1 |= TIM_CR1_URS;
  }
  else
  {
    /* Reset the URS Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_URS);
 8000a8a:	8803      	ldrh	r3, [r0, #0]
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	4393      	bics	r3, r2
 8000a90:	8003      	strh	r3, [r0, #0]
  }
}
 8000a92:	bd00      	pop	{pc}
  assert_param(IS_TIM_UPDATE_SOURCE(TIM_UpdateSource));
  
  if (TIM_UpdateSource != TIM_UpdateSource_Global)
  {
    /* Set the URS Bit */
    TIMx->CR1 |= TIM_CR1_URS;
 8000a94:	8802      	ldrh	r2, [r0, #0]
 8000a96:	2304      	movs	r3, #4
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	8003      	strh	r3, [r0, #0]
 8000a9c:	e7f9      	b.n	8000a92 <TIM_UpdateRequestConfig+0xe>
 8000a9e:	46c0      	nop			; (mov r8, r8)

08000aa0 <TIM_ARRPreloadConfig>:
  * @param  NewState: new state of the TIMx peripheral Preload register
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ARRPreloadConfig(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000aa0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000aa2:	2900      	cmp	r1, #0
 8000aa4:	d104      	bne.n	8000ab0 <TIM_ARRPreloadConfig+0x10>
    TIMx->CR1 |= TIM_CR1_ARPE;
  }
  else
  {
    /* Reset the ARR Preload Bit */
    TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_ARPE);
 8000aa6:	8803      	ldrh	r3, [r0, #0]
 8000aa8:	2280      	movs	r2, #128	; 0x80
 8000aaa:	4393      	bics	r3, r2
 8000aac:	8003      	strh	r3, [r0, #0]
  }
}
 8000aae:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the ARR Preload Bit */
    TIMx->CR1 |= TIM_CR1_ARPE;
 8000ab0:	8802      	ldrh	r2, [r0, #0]
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	4313      	orrs	r3, r2
 8000ab6:	8003      	strh	r3, [r0, #0]
 8000ab8:	e7f9      	b.n	8000aae <TIM_ARRPreloadConfig+0xe>
 8000aba:	46c0      	nop			; (mov r8, r8)

08000abc <TIM_SelectOnePulseMode>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_OPM_MODE(TIM_OPMode));
  
  /* Reset the OPM Bit */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_OPM);
 8000abc:	8803      	ldrh	r3, [r0, #0]
 8000abe:	2208      	movs	r2, #8
 8000ac0:	4393      	bics	r3, r2
 8000ac2:	8003      	strh	r3, [r0, #0]
  /* Configure the OPM Mode */
  TIMx->CR1 |= TIM_OPMode;
 8000ac4:	8803      	ldrh	r3, [r0, #0]
 8000ac6:	4319      	orrs	r1, r3
 8000ac8:	8001      	strh	r1, [r0, #0]
}
 8000aca:	4770      	bx	lr

08000acc <TIM_SetClockDivision>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_CKD_DIV(TIM_CKD));
  
  /* Reset the CKD Bits */
  TIMx->CR1 &= (uint16_t)~((uint16_t)TIM_CR1_CKD);
 8000acc:	8802      	ldrh	r2, [r0, #0]
 8000ace:	4b03      	ldr	r3, [pc, #12]	; (8000adc <TIM_SetClockDivision+0x10>)
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	8003      	strh	r3, [r0, #0]
  /* Set the CKD value */
  TIMx->CR1 |= TIM_CKD;
 8000ad4:	8803      	ldrh	r3, [r0, #0]
 8000ad6:	4319      	orrs	r1, r3
 8000ad8:	8001      	strh	r1, [r0, #0]
}
 8000ada:	4770      	bx	lr
 8000adc:	fffffcff 	.word	0xfffffcff

08000ae0 <TIM_Cmd>:
  * @param  NewState: new state of the TIMx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_Cmd(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000ae0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000ae2:	2900      	cmp	r1, #0
 8000ae4:	d104      	bne.n	8000af0 <TIM_Cmd+0x10>
    TIMx->CR1 |= TIM_CR1_CEN;
  }
  else
  {
    /* Disable the TIM Counter */
    TIMx->CR1 &= (uint16_t)(~((uint16_t)TIM_CR1_CEN));
 8000ae6:	8803      	ldrh	r3, [r0, #0]
 8000ae8:	2201      	movs	r2, #1
 8000aea:	4393      	bics	r3, r2
 8000aec:	8003      	strh	r3, [r0, #0]
  }
}
 8000aee:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the TIM Counter */
    TIMx->CR1 |= TIM_CR1_CEN;
 8000af0:	8802      	ldrh	r2, [r0, #0]
 8000af2:	2301      	movs	r3, #1
 8000af4:	4313      	orrs	r3, r2
 8000af6:	8003      	strh	r3, [r0, #0]
 8000af8:	e7f9      	b.n	8000aee <TIM_Cmd+0xe>
 8000afa:	46c0      	nop			; (mov r8, r8)

08000afc <TIM_BDTRConfig>:
  assert_param(IS_TIM_BREAK_STATE(TIM_BDTRInitStruct->TIM_Break));
  assert_param(IS_TIM_BREAK_POLARITY(TIM_BDTRInitStruct->TIM_BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(TIM_BDTRInitStruct->TIM_AutomaticOutput));
  /* Set the Lock level, the Break enable Bit and the Ploarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */
  TIMx->BDTR = (uint32_t)TIM_BDTRInitStruct->TIM_OSSRState | TIM_BDTRInitStruct->TIM_OSSIState |
 8000afc:	880b      	ldrh	r3, [r1, #0]
 8000afe:	884a      	ldrh	r2, [r1, #2]
 8000b00:	431a      	orrs	r2, r3
 8000b02:	888b      	ldrh	r3, [r1, #4]
 8000b04:	431a      	orrs	r2, r3
 8000b06:	88cb      	ldrh	r3, [r1, #6]
 8000b08:	431a      	orrs	r2, r3
 8000b0a:	890b      	ldrh	r3, [r1, #8]
 8000b0c:	431a      	orrs	r2, r3
 8000b0e:	894b      	ldrh	r3, [r1, #10]
 8000b10:	431a      	orrs	r2, r3
 8000b12:	898b      	ldrh	r3, [r1, #12]
 8000b14:	431a      	orrs	r2, r3
 8000b16:	2344      	movs	r3, #68	; 0x44
 8000b18:	52c2      	strh	r2, [r0, r3]
             TIM_BDTRInitStruct->TIM_LOCKLevel | TIM_BDTRInitStruct->TIM_DeadTime |
             TIM_BDTRInitStruct->TIM_Break | TIM_BDTRInitStruct->TIM_BreakPolarity |
             TIM_BDTRInitStruct->TIM_AutomaticOutput;
}
 8000b1a:	4770      	bx	lr

08000b1c <TIM_BDTRStructInit>:
  * @retval None
  */
void TIM_BDTRStructInit(TIM_BDTRInitTypeDef* TIM_BDTRInitStruct)
{
  /* Set the default configuration */
  TIM_BDTRInitStruct->TIM_OSSRState = TIM_OSSRState_Disable;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	8003      	strh	r3, [r0, #0]
  TIM_BDTRInitStruct->TIM_OSSIState = TIM_OSSIState_Disable;
 8000b20:	8043      	strh	r3, [r0, #2]
  TIM_BDTRInitStruct->TIM_LOCKLevel = TIM_LOCKLevel_OFF;
 8000b22:	8083      	strh	r3, [r0, #4]
  TIM_BDTRInitStruct->TIM_DeadTime = 0x00;
 8000b24:	80c3      	strh	r3, [r0, #6]
  TIM_BDTRInitStruct->TIM_Break = TIM_Break_Disable;
 8000b26:	8103      	strh	r3, [r0, #8]
  TIM_BDTRInitStruct->TIM_BreakPolarity = TIM_BreakPolarity_Low;
 8000b28:	8143      	strh	r3, [r0, #10]
  TIM_BDTRInitStruct->TIM_AutomaticOutput = TIM_AutomaticOutput_Disable;
 8000b2a:	8183      	strh	r3, [r0, #12]
}
 8000b2c:	4770      	bx	lr
 8000b2e:	46c0      	nop			; (mov r8, r8)

08000b30 <TIM_CtrlPWMOutputs>:
  * @param  NewState: new state of the TIM peripheral Main Outputs.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000b30:	b500      	push	{lr}
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000b32:	2344      	movs	r3, #68	; 0x44
void TIM_CtrlPWMOutputs(TIM_TypeDef* TIMx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b34:	2900      	cmp	r1, #0
 8000b36:	d104      	bne.n	8000b42 <TIM_CtrlPWMOutputs+0x12>
    TIMx->BDTR |= TIM_BDTR_MOE;
  }
  else
  {
    /* Disable the TIM Main Output */
    TIMx->BDTR &= (uint16_t)(~((uint16_t)TIM_BDTR_MOE));
 8000b38:	5ac2      	ldrh	r2, [r0, r3]
 8000b3a:	0452      	lsls	r2, r2, #17
 8000b3c:	0c52      	lsrs	r2, r2, #17
 8000b3e:	52c2      	strh	r2, [r0, r3]
  }  
}
 8000b40:	bd00      	pop	{pc}
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the TIM Main Output */
    TIMx->BDTR |= TIM_BDTR_MOE;
 8000b42:	5ac1      	ldrh	r1, [r0, r3]
 8000b44:	2280      	movs	r2, #128	; 0x80
 8000b46:	0212      	lsls	r2, r2, #8
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	52c2      	strh	r2, [r0, r3]
 8000b4c:	e7f8      	b.n	8000b40 <TIM_CtrlPWMOutputs+0x10>
 8000b4e:	46c0      	nop			; (mov r8, r8)

08000b50 <TIM_OC1Init>:
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
 8000b50:	8c03      	ldrh	r3, [r0, #32]
 8000b52:	2201      	movs	r2, #1
 8000b54:	4393      	bics	r3, r2
 8000b56:	8403      	strh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC1Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000b58:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
 /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)(~(uint16_t)TIM_CCER_CC1E);
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000b5a:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000b5c:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000b5e:	8b04      	ldrh	r4, [r0, #24]
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));
 8000b60:	2373      	movs	r3, #115	; 0x73
 8000b62:	439c      	bics	r4, r3

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b64:	880b      	ldrh	r3, [r1, #0]
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000b66:	884e      	ldrh	r6, [r1, #2]
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC1M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC1S));

  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000b68:	431c      	orrs	r4, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	439d      	bics	r5, r3
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
 8000b6e:	898b      	ldrh	r3, [r1, #12]
 8000b70:	4333      	orrs	r3, r6
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000b72:	4e13      	ldr	r6, [pc, #76]	; (8000bc0 <TIM_OC1Init+0x70>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1P));
  /* Set the Output Compare Polarity */
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
 8000b74:	432b      	orrs	r3, r5
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000b76:	1985      	adds	r5, r0, r6
 8000b78:	2d00      	cmp	r5, #0
 8000b7a:	d003      	beq.n	8000b84 <TIM_OC1Init+0x34>
 8000b7c:	4e11      	ldr	r6, [pc, #68]	; (8000bc4 <TIM_OC1Init+0x74>)
 8000b7e:	1985      	adds	r5, r0, r6
 8000b80:	2d00      	cmp	r5, #0
 8000b82:	d113      	bne.n	8000bac <TIM_OC1Init+0x5c>
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
 8000b84:	2508      	movs	r5, #8
 8000b86:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b88:	89cd      	ldrh	r5, [r1, #14]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000b8a:	8a4e      	ldrh	r6, [r1, #18]
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NP));
    /* Set the Output N Polarity */
    tmpccer |= TIM_OCInitStruct->TIM_OCNPolarity;
 8000b8c:	432b      	orrs	r3, r5
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC1NE));    
 8000b8e:	2504      	movs	r5, #4
 8000b90:	43ab      	bics	r3, r5
    /* Set the Output N State */
    tmpccer |= TIM_OCInitStruct->TIM_OutputNState;
 8000b92:	888d      	ldrh	r5, [r1, #4]
 8000b94:	432b      	orrs	r3, r5
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS1N));
 8000b96:	4d0c      	ldr	r5, [pc, #48]	; (8000bc8 <TIM_OC1Init+0x78>)
 8000b98:	402a      	ands	r2, r5
    
    /* Set the Output Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCIdleState;
 8000b9a:	8a0d      	ldrh	r5, [r1, #16]
 8000b9c:	4335      	orrs	r5, r6
    /* Set the Output N Idle state */
    tmpcr2 |= TIM_OCInitStruct->TIM_OCNIdleState;
 8000b9e:	432a      	orrs	r2, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000ba0:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000ba2:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000ba4:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = TIM_OCInitStruct->TIM_Pulse; 
 8000ba6:	6342      	str	r2, [r0, #52]	; 0x34
 
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000ba8:	8403      	strh	r3, [r0, #32]
}
 8000baa:	bd70      	pop	{r4, r5, r6, pc}
  tmpccer |= TIM_OCInitStruct->TIM_OCPolarity;
  
  /* Set the Output State */
  tmpccer |= TIM_OCInitStruct->TIM_OutputState;
    
  if((TIMx == TIM1) || (TIMx == TIM15) || (TIMx == TIM16) || (TIMx == TIM17))
 8000bac:	4e07      	ldr	r6, [pc, #28]	; (8000bcc <TIM_OC1Init+0x7c>)
 8000bae:	1985      	adds	r5, r0, r6
 8000bb0:	2d00      	cmp	r5, #0
 8000bb2:	d0e7      	beq.n	8000b84 <TIM_OC1Init+0x34>
 8000bb4:	4e06      	ldr	r6, [pc, #24]	; (8000bd0 <TIM_OC1Init+0x80>)
 8000bb6:	1985      	adds	r5, r0, r6
 8000bb8:	2d00      	cmp	r5, #0
 8000bba:	d0e3      	beq.n	8000b84 <TIM_OC1Init+0x34>
 8000bbc:	e7f0      	b.n	8000ba0 <TIM_OC1Init+0x50>
 8000bbe:	46c0      	nop			; (mov r8, r8)
 8000bc0:	bffec000 	.word	0xbffec000
 8000bc4:	bffed400 	.word	0xbffed400
 8000bc8:	fffffcff 	.word	0xfffffcff
 8000bcc:	bffeb800 	.word	0xbffeb800
 8000bd0:	bffebc00 	.word	0xbffebc00

08000bd4 <TIM_OC2Init>:
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
   /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
 8000bd4:	8c03      	ldrh	r3, [r0, #32]
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	4393      	bics	r3, r2
 8000bda:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
 8000bdc:	8c03      	ldrh	r3, [r0, #32]
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC2Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000bde:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC2E));
  
  /* Get the TIMx CCER register value */  
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000be0:	8882      	ldrh	r2, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000be2:	4c17      	ldr	r4, [pc, #92]	; (8000c40 <TIM_OC2Init+0x6c>)
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000be4:	8b05      	ldrh	r5, [r0, #24]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_OC2M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S));
 8000be6:	402c      	ands	r4, r5
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000be8:	880d      	ldrh	r5, [r1, #0]
 8000bea:	022d      	lsls	r5, r5, #8
 8000bec:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
 8000bee:	2520      	movs	r5, #32
 8000bf0:	43ab      	bics	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000bf2:	898d      	ldrh	r5, [r1, #12]
 8000bf4:	012d      	lsls	r5, r5, #4
 8000bf6:	432b      	orrs	r3, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000bf8:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
 8000bfa:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000bfc:	012d      	lsls	r5, r5, #4
 8000bfe:	432b      	orrs	r3, r5
    
  if(TIMx == TIM1)
 8000c00:	4d10      	ldr	r5, [pc, #64]	; (8000c44 <TIM_OC2Init+0x70>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 4);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 4);
 8000c02:	b29b      	uxth	r3, r3
    
  if(TIMx == TIM1)
 8000c04:	42a8      	cmp	r0, r5
 8000c06:	d005      	beq.n	8000c14 <TIM_OC2Init+0x40>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c08:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000c0a:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000c0c:	8304      	strh	r4, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = TIM_OCInitStruct->TIM_Pulse;
 8000c0e:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c10:	8403      	strh	r3, [r0, #32]
}
 8000c12:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NP));
 8000c14:	2580      	movs	r5, #128	; 0x80
 8000c16:	43ab      	bics	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
 8000c18:	89cd      	ldrh	r5, [r1, #14]
 8000c1a:	012d      	lsls	r5, r5, #4
 8000c1c:	432b      	orrs	r3, r5
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
 8000c1e:	4d0a      	ldr	r5, [pc, #40]	; (8000c48 <TIM_OC2Init+0x74>)
 8000c20:	402b      	ands	r3, r5
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000c22:	888d      	ldrh	r5, [r1, #4]
 8000c24:	012d      	lsls	r5, r5, #4
 8000c26:	432b      	orrs	r3, r5
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000c28:	4d08      	ldr	r5, [pc, #32]	; (8000c4c <TIM_OC2Init+0x78>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 4);
    
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC2NE));    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 4);
 8000c2a:	b29b      	uxth	r3, r3
    
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
 8000c2c:	402a      	ands	r2, r5
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000c2e:	8a0d      	ldrh	r5, [r1, #16]
 8000c30:	00ad      	lsls	r5, r5, #2
 8000c32:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000c34:	8a4d      	ldrh	r5, [r1, #18]
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS2N));
    
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 2);
 8000c36:	b292      	uxth	r2, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 2);
 8000c38:	00ad      	lsls	r5, r5, #2
 8000c3a:	432a      	orrs	r2, r5
 8000c3c:	b292      	uxth	r2, r2
 8000c3e:	e7e3      	b.n	8000c08 <TIM_OC2Init+0x34>
 8000c40:	ffff8cff 	.word	0xffff8cff
 8000c44:	40012c00 	.word	0x40012c00
 8000c48:	0000ffbf 	.word	0x0000ffbf
 8000c4c:	fffff3ff 	.word	0xfffff3ff

08000c50 <TIM_OC3Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000c50:	8c02      	ldrh	r2, [r0, #32]
 8000c52:	4b1a      	ldr	r3, [pc, #104]	; (8000cbc <TIM_OC3Init+0x6c>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC3Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000c54:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC3E));
 8000c56:	4013      	ands	r3, r2
 8000c58:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000c5a:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000c5c:	8882      	ldrh	r2, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000c5e:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC3M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC3S));  
 8000c60:	2373      	movs	r3, #115	; 0x73
 8000c62:	439c      	bics	r4, r3
  /* Select the Output Compare Mode */
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
 8000c64:	880b      	ldrh	r3, [r1, #0]
 8000c66:	431c      	orrs	r4, r3
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
 8000c68:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <TIM_OC3Init+0x70>)
 8000c6a:	402b      	ands	r3, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000c6c:	898d      	ldrh	r5, [r1, #12]
 8000c6e:	022d      	lsls	r5, r5, #8
 8000c70:	432b      	orrs	r3, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000c72:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= TIM_OCInitStruct->TIM_OCMode;
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
 8000c74:	b29b      	uxth	r3, r3
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000c76:	022d      	lsls	r5, r5, #8
 8000c78:	432b      	orrs	r3, r5
    
  if(TIMx == TIM1)
 8000c7a:	4d12      	ldr	r5, [pc, #72]	; (8000cc4 <TIM_OC3Init+0x74>)
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 8);
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 8);
 8000c7c:	b29b      	uxth	r3, r3
    
  if(TIMx == TIM1)
 8000c7e:	42a8      	cmp	r0, r5
 8000c80:	d005      	beq.n	8000c8e <TIM_OC3Init+0x3e>
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000c82:	8082      	strh	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000c84:	688a      	ldr	r2, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8000c86:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = TIM_OCInitStruct->TIM_Pulse;
 8000c88:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000c8a:	8403      	strh	r3, [r0, #32]
}
 8000c8c:	bd30      	pop	{r4, r5, pc}
    assert_param(IS_TIM_OCN_POLARITY(TIM_OCInitStruct->TIM_OCNPolarity));
    assert_param(IS_TIM_OCNIDLE_STATE(TIM_OCInitStruct->TIM_OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    
    /* Reset the Output N Polarity level */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NP));
 8000c8e:	4d0e      	ldr	r5, [pc, #56]	; (8000cc8 <TIM_OC3Init+0x78>)
 8000c90:	402b      	ands	r3, r5
    /* Set the Output N Polarity */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
 8000c92:	89cd      	ldrh	r5, [r1, #14]
 8000c94:	022d      	lsls	r5, r5, #8
 8000c96:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
 8000c98:	4d0c      	ldr	r5, [pc, #48]	; (8000ccc <TIM_OC3Init+0x7c>)
 8000c9a:	402b      	ands	r3, r5
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000c9c:	888d      	ldrh	r5, [r1, #4]
 8000c9e:	022d      	lsls	r5, r5, #8
 8000ca0:	432b      	orrs	r3, r5
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000ca2:	4d0b      	ldr	r5, [pc, #44]	; (8000cd0 <TIM_OC3Init+0x80>)
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCNPolarity << 8);
    /* Reset the Output N State */
    tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC3NE));
    
    /* Set the Output N State */
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
 8000ca4:	b29b      	uxth	r3, r3
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
 8000ca6:	402a      	ands	r2, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000ca8:	8a0d      	ldrh	r5, [r1, #16]
 8000caa:	012d      	lsls	r5, r5, #4
 8000cac:	432a      	orrs	r2, r5
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000cae:	8a4d      	ldrh	r5, [r1, #18]
    tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputNState << 8);
    /* Reset the Ouput Compare and Output Compare N IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3));
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS3N));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 4);
 8000cb0:	b292      	uxth	r2, r2
    /* Set the Output N Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCNIdleState << 4);
 8000cb2:	012d      	lsls	r5, r5, #4
 8000cb4:	432a      	orrs	r2, r5
 8000cb6:	b292      	uxth	r2, r2
 8000cb8:	e7e3      	b.n	8000c82 <TIM_OC3Init+0x32>
 8000cba:	46c0      	nop			; (mov r8, r8)
 8000cbc:	fffffeff 	.word	0xfffffeff
 8000cc0:	fffffdff 	.word	0xfffffdff
 8000cc4:	40012c00 	.word	0x40012c00
 8000cc8:	fffff7ff 	.word	0xfffff7ff
 8000ccc:	0000fbff 	.word	0x0000fbff
 8000cd0:	ffffcfff 	.word	0xffffcfff

08000cd4 <TIM_OC4Init>:
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000cd4:	8c02      	ldrh	r2, [r0, #32]
 8000cd6:	4b12      	ldr	r3, [pc, #72]	; (8000d20 <TIM_OC4Init+0x4c>)
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_OC4Init(TIM_TypeDef* TIMx, TIM_OCInitTypeDef* TIM_OCInitStruct)
{
 8000cd8:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  assert_param(IS_TIM_OC_MODE(TIM_OCInitStruct->TIM_OCMode));
  assert_param(IS_TIM_OUTPUT_STATE(TIM_OCInitStruct->TIM_OutputState));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCInitStruct->TIM_OCPolarity));   
  /* Disable the Channel 2: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
 8000cda:	4013      	ands	r3, r2
 8000cdc:	8403      	strh	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000cde:	8c05      	ldrh	r5, [r0, #32]
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000ce0:	4a10      	ldr	r2, [pc, #64]	; (8000d24 <TIM_OC4Init+0x50>)
  TIMx->CCER &= (uint16_t)(~((uint16_t)TIM_CCER_CC4E));
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8000ce2:	8883      	ldrh	r3, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000ce4:	8b84      	ldrh	r4, [r0, #28]
    
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_OC4M));
  tmpccmrx &= (uint16_t)(~((uint16_t)TIM_CCMR2_CC4S));
 8000ce6:	4014      	ands	r4, r2
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
 8000ce8:	880a      	ldrh	r2, [r1, #0]
 8000cea:	0212      	lsls	r2, r2, #8
 8000cec:	4314      	orrs	r4, r2
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
 8000cee:	4a0e      	ldr	r2, [pc, #56]	; (8000d28 <TIM_OC4Init+0x54>)
 8000cf0:	402a      	ands	r2, r5
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000cf2:	898d      	ldrh	r5, [r1, #12]
 8000cf4:	032d      	lsls	r5, r5, #12
 8000cf6:	432a      	orrs	r2, r5
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000cf8:	884d      	ldrh	r5, [r1, #2]
  tmpccmrx |= (uint16_t)(TIM_OCInitStruct->TIM_OCMode << 8);
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint16_t)(~((uint16_t)TIM_CCER_CC4P));
  /* Set the Output Compare Polarity */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OCPolarity << 12);
 8000cfa:	b292      	uxth	r2, r2
  
  /* Set the Output State */
  tmpccer |= (uint16_t)(TIM_OCInitStruct->TIM_OutputState << 12);
 8000cfc:	032d      	lsls	r5, r5, #12
 8000cfe:	432a      	orrs	r2, r5
    
  if(TIMx == TIM1)
 8000d00:	4d0a      	ldr	r5, [pc, #40]	; (8000d2c <TIM_OC4Init+0x58>)
 8000d02:	42a8      	cmp	r0, r5
 8000d04:	d005      	beq.n	8000d12 <TIM_OC4Init+0x3e>
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000d06:	8083      	strh	r3, [r0, #4]
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000d08:	688b      	ldr	r3, [r1, #8]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
  
  /* Write to TIMx CCMR2 */  
  TIMx->CCMR2 = tmpccmrx;
 8000d0a:	8384      	strh	r4, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = TIM_OCInitStruct->TIM_Pulse;
 8000d0c:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8000d0e:	8402      	strh	r2, [r0, #32]
}
 8000d10:	bd30      	pop	{r4, r5, pc}
    
  if(TIMx == TIM1)
  {
    assert_param(IS_TIM_OCIDLE_STATE(TIM_OCInitStruct->TIM_OCIdleState));
    /* Reset the Ouput Compare IDLE State */
    tmpcr2 &= (uint16_t)(~((uint16_t)TIM_CR2_OIS4));
 8000d12:	4d07      	ldr	r5, [pc, #28]	; (8000d30 <TIM_OC4Init+0x5c>)
 8000d14:	402b      	ands	r3, r5
    /* Set the Output Idle state */
    tmpcr2 |= (uint16_t)(TIM_OCInitStruct->TIM_OCIdleState << 6);
 8000d16:	8a0d      	ldrh	r5, [r1, #16]
 8000d18:	01ad      	lsls	r5, r5, #6
 8000d1a:	432b      	orrs	r3, r5
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	e7f2      	b.n	8000d06 <TIM_OC4Init+0x32>
 8000d20:	ffffefff 	.word	0xffffefff
 8000d24:	ffff8cff 	.word	0xffff8cff
 8000d28:	ffffdfff 	.word	0xffffdfff
 8000d2c:	40012c00 	.word	0x40012c00
 8000d30:	ffffbfff 	.word	0xffffbfff

08000d34 <TIM_OCStructInit>:
  * @retval None
  */
void TIM_OCStructInit(TIM_OCInitTypeDef* TIM_OCInitStruct)
{
  /* Set the default configuration */
  TIM_OCInitStruct->TIM_OCMode = TIM_OCMode_Timing;
 8000d34:	2300      	movs	r3, #0
 8000d36:	8003      	strh	r3, [r0, #0]
  TIM_OCInitStruct->TIM_OutputState = TIM_OutputState_Disable;
 8000d38:	8043      	strh	r3, [r0, #2]
  TIM_OCInitStruct->TIM_OutputNState = TIM_OutputNState_Disable;
 8000d3a:	8083      	strh	r3, [r0, #4]
  TIM_OCInitStruct->TIM_Pulse = 0x0000000;
 8000d3c:	6083      	str	r3, [r0, #8]
  TIM_OCInitStruct->TIM_OCPolarity = TIM_OCPolarity_High;
 8000d3e:	8183      	strh	r3, [r0, #12]
  TIM_OCInitStruct->TIM_OCNPolarity = TIM_OCPolarity_High;
 8000d40:	81c3      	strh	r3, [r0, #14]
  TIM_OCInitStruct->TIM_OCIdleState = TIM_OCIdleState_Reset;
 8000d42:	8203      	strh	r3, [r0, #16]
  TIM_OCInitStruct->TIM_OCNIdleState = TIM_OCNIdleState_Reset;
 8000d44:	8243      	strh	r3, [r0, #18]
}
 8000d46:	4770      	bx	lr

08000d48 <TIM_SelectOCxM>:
  *            @arg TIM_ForcedAction_Active
  *            @arg TIM_ForcedAction_InActive
  * @retval None
  */
void TIM_SelectOCxM(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_OCMode)
{
 8000d48:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8000d4a:	2501      	movs	r5, #1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000d4c:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;
 8000d4e:	408d      	lsls	r5, r1

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000d50:	43ac      	bics	r4, r5
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000d52:	1c03      	adds	r3, r0, #0

  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;
 8000d54:	8404      	strh	r4, [r0, #32]

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000d56:	2008      	movs	r0, #8
 8000d58:	1c0c      	adds	r4, r1, #0
 8000d5a:	4384      	bics	r4, r0
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));  
  assert_param(IS_TIM_OCM(TIM_OCMode));
  
  tmp = (uint32_t) TIMx;
  tmp += CCMR_OFFSET;
 8000d5c:	3318      	adds	r3, #24
  tmp1 = CCER_CCE_SET << (uint16_t)TIM_Channel;

  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
 8000d5e:	1e20      	subs	r0, r4, #0
 8000d60:	d00d      	beq.n	8000d7e <TIM_SelectOCxM+0x36>
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
  }
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;
 8000d62:	3904      	subs	r1, #4
 8000d64:	b289      	uxth	r1, r1
 8000d66:	0849      	lsrs	r1, r1, #1
 8000d68:	18c9      	adds	r1, r1, r3

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000d6a:	6808      	ldr	r0, [r1, #0]
 8000d6c:	4b09      	ldr	r3, [pc, #36]	; (8000d94 <TIM_SelectOCxM+0x4c>)
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000d6e:	0212      	lsls	r2, r2, #8
  else
  {
    tmp += (uint16_t)(TIM_Channel - (uint16_t)4)>> (uint16_t)1;

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC2M);
 8000d70:	4003      	ands	r3, r0
 8000d72:	600b      	str	r3, [r1, #0]
    
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= (uint16_t)(TIM_OCMode << 8);
 8000d74:	680b      	ldr	r3, [r1, #0]
 8000d76:	b292      	uxth	r2, r2
 8000d78:	431a      	orrs	r2, r3
 8000d7a:	600a      	str	r2, [r1, #0]
  }
}
 8000d7c:	bd30      	pop	{r4, r5, pc}
  /* Disable the Channel: Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t) ~tmp1;

  if((TIM_Channel == TIM_Channel_1) ||(TIM_Channel == TIM_Channel_3))
  {
    tmp += (TIM_Channel>>1);
 8000d7e:	0849      	lsrs	r1, r1, #1
 8000d80:	18cb      	adds	r3, r1, r3

    /* Reset the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp &= (uint32_t)~((uint32_t)TIM_CCMR1_OC1M);
 8000d82:	6819      	ldr	r1, [r3, #0]
 8000d84:	2070      	movs	r0, #112	; 0x70
 8000d86:	4381      	bics	r1, r0
 8000d88:	6019      	str	r1, [r3, #0]
   
    /* Configure the OCxM bits in the CCMRx register */
    *(__IO uint32_t *) tmp |= TIM_OCMode;
 8000d8a:	6819      	ldr	r1, [r3, #0]
 8000d8c:	430a      	orrs	r2, r1
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	e7f4      	b.n	8000d7c <TIM_SelectOCxM+0x34>
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	ffff8fff 	.word	0xffff8fff

08000d98 <TIM_SetCompare1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Set the Capture Compare1 Register value */
  TIMx->CCR1 = Compare1;
 8000d98:	6341      	str	r1, [r0, #52]	; 0x34
}
 8000d9a:	4770      	bx	lr

08000d9c <TIM_SetCompare2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Set the Capture Compare2 Register value */
  TIMx->CCR2 = Compare2;
 8000d9c:	6381      	str	r1, [r0, #56]	; 0x38
}
 8000d9e:	4770      	bx	lr

08000da0 <TIM_SetCompare3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare3 Register value */
  TIMx->CCR3 = Compare3;
 8000da0:	63c1      	str	r1, [r0, #60]	; 0x3c
}
 8000da2:	4770      	bx	lr

08000da4 <TIM_SetCompare4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Set the Capture Compare4 Register value */
  TIMx->CCR4 = Compare4;
 8000da4:	6401      	str	r1, [r0, #64]	; 0x40
}
 8000da6:	4770      	bx	lr

08000da8 <TIM_ForcedOC1Config>:
{
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  tmpccmr1 = TIMx->CCMR1;
 8000da8:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1M);
 8000daa:	2270      	movs	r2, #112	; 0x70
 8000dac:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr1 |= TIM_ForcedAction;
 8000dae:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000db0:	8301      	strh	r1, [r0, #24]
}
 8000db2:	4770      	bx	lr

08000db4 <TIM_ForcedOC2Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr1 = TIMx->CCMR1;
 8000db4:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2M Bits */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2M);
 8000db6:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <TIM_ForcedOC2Config+0x10>)
 8000db8:	401a      	ands	r2, r3
  /* Configure The Forced output Mode */
  tmpccmr1 |= (uint16_t)(TIM_ForcedAction << 8);
 8000dba:	020b      	lsls	r3, r1, #8
 8000dbc:	1c11      	adds	r1, r2, #0
 8000dbe:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000dc0:	8301      	strh	r1, [r0, #24]
}
 8000dc2:	4770      	bx	lr
 8000dc4:	ffff8fff 	.word	0xffff8fff

08000dc8 <TIM_ForcedOC3Config>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000dc8:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC1M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3M);
 8000dca:	2270      	movs	r2, #112	; 0x70
 8000dcc:	4393      	bics	r3, r2
  /* Configure The Forced output Mode */
  tmpccmr2 |= TIM_ForcedAction;
 8000dce:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000dd0:	8381      	strh	r1, [r0, #28]
}
 8000dd2:	4770      	bx	lr

08000dd4 <TIM_ForcedOC4Config>:
  uint16_t tmpccmr2 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_FORCED_ACTION(TIM_ForcedAction));
  
  tmpccmr2 = TIMx->CCMR2;
 8000dd4:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC2M Bits */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4M);
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <TIM_ForcedOC4Config+0x10>)
 8000dd8:	401a      	ands	r2, r3
  /* Configure The Forced output Mode */
  tmpccmr2 |= (uint16_t)(TIM_ForcedAction << 8);
 8000dda:	020b      	lsls	r3, r1, #8
 8000ddc:	1c11      	adds	r1, r2, #0
 8000dde:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000de0:	8381      	strh	r1, [r0, #28]
}
 8000de2:	4770      	bx	lr
 8000de4:	ffff8fff 	.word	0xffff8fff

08000de8 <TIM_CCPreloadControl>:
  * @param  NewState: new state of the Capture Compare Preload Control bit
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_CCPreloadControl(TIM_TypeDef* TIMx, FunctionalState NewState)
{ 
 8000de8:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000dea:	2900      	cmp	r1, #0
 8000dec:	d104      	bne.n	8000df8 <TIM_CCPreloadControl+0x10>
    TIMx->CR2 |= TIM_CR2_CCPC;
  }
  else
  {
    /* Reset the CCPC Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCPC);
 8000dee:	8883      	ldrh	r3, [r0, #4]
 8000df0:	2201      	movs	r2, #1
 8000df2:	4393      	bics	r3, r2
 8000df4:	8083      	strh	r3, [r0, #4]
  }
}
 8000df6:	bd00      	pop	{pc}
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the CCPC Bit */
    TIMx->CR2 |= TIM_CR2_CCPC;
 8000df8:	8882      	ldrh	r2, [r0, #4]
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	8083      	strh	r3, [r0, #4]
 8000e00:	e7f9      	b.n	8000df6 <TIM_CCPreloadControl+0xe>
 8000e02:	46c0      	nop			; (mov r8, r8)

08000e04 <TIM_OC1PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000e04:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1PE);
 8000e06:	2208      	movs	r2, #8
 8000e08:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= TIM_OCPreload;
 8000e0a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e0c:	8301      	strh	r1, [r0, #24]
}
 8000e0e:	4770      	bx	lr

08000e10 <TIM_OC2PreloadConfig>:
  uint16_t tmpccmr1 = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr1 = TIMx->CCMR1;
 8000e10:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2PE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2PE);
 8000e12:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <TIM_OC2PreloadConfig+0x10>)
 8000e14:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr1 |= (uint16_t)(TIM_OCPreload << 8);
 8000e16:	020b      	lsls	r3, r1, #8
 8000e18:	1c11      	adds	r1, r2, #0
 8000e1a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e1c:	8301      	strh	r1, [r0, #24]
}
 8000e1e:	4770      	bx	lr
 8000e20:	fffff7ff 	.word	0xfffff7ff

08000e24 <TIM_OC3PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e24:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3PE);
 8000e26:	2208      	movs	r2, #8
 8000e28:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= TIM_OCPreload;
 8000e2a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e2c:	8381      	strh	r1, [r0, #28]
}
 8000e2e:	4770      	bx	lr

08000e30 <TIM_OC4PreloadConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCPRELOAD_STATE(TIM_OCPreload));
  
  tmpccmr2 = TIMx->CCMR2;
 8000e30:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4PE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4PE);
 8000e32:	4b03      	ldr	r3, [pc, #12]	; (8000e40 <TIM_OC4PreloadConfig+0x10>)
 8000e34:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Preload feature */
  tmpccmr2 |= (uint16_t)(TIM_OCPreload << 8);
 8000e36:	020b      	lsls	r3, r1, #8
 8000e38:	1c11      	adds	r1, r2, #0
 8000e3a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000e3c:	8381      	strh	r1, [r0, #28]
}
 8000e3e:	4770      	bx	lr
 8000e40:	fffff7ff 	.word	0xfffff7ff

08000e44 <TIM_OC1FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000e44:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1FE);
 8000e46:	2204      	movs	r2, #4
 8000e48:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= TIM_OCFast;
 8000e4a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000e4c:	8301      	strh	r1, [r0, #24]
}
 8000e4e:	4770      	bx	lr

08000e50 <TIM_OC2FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 8000e50:	8b02      	ldrh	r2, [r0, #24]
  /* Reset the OC2FE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2FE);
 8000e52:	4b03      	ldr	r3, [pc, #12]	; (8000e60 <TIM_OC2FastConfig+0x10>)
 8000e54:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCFast << 8);
 8000e56:	020b      	lsls	r3, r1, #8
 8000e58:	1c11      	adds	r1, r2, #0
 8000e5a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8000e5c:	8301      	strh	r1, [r0, #24]
}
 8000e5e:	4770      	bx	lr
 8000e60:	fffffbff 	.word	0xfffffbff

08000e64 <TIM_OC3FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000e64:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3FE);
 8000e66:	2204      	movs	r2, #4
 8000e68:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= TIM_OCFast;
 8000e6a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000e6c:	8381      	strh	r1, [r0, #28]
}
 8000e6e:	4770      	bx	lr

08000e70 <TIM_OC4FastConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCFAST_STATE(TIM_OCFast));
  
  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = TIMx->CCMR2;
 8000e70:	8b82      	ldrh	r2, [r0, #28]
  /* Reset the OC4FE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4FE);
 8000e72:	4b03      	ldr	r3, [pc, #12]	; (8000e80 <TIM_OC4FastConfig+0x10>)
 8000e74:	401a      	ands	r2, r3
  /* Enable or Disable the Output Compare Fast Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCFast << 8);
 8000e76:	020b      	lsls	r3, r1, #8
 8000e78:	1c11      	adds	r1, r2, #0
 8000e7a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmr2;
 8000e7c:	8381      	strh	r1, [r0, #28]
}
 8000e7e:	4770      	bx	lr
 8000e80:	fffffbff 	.word	0xfffffbff

08000e84 <TIM_ClearOC1Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000e84:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC1CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC1CE);
 8000e86:	2280      	movs	r2, #128	; 0x80
 8000e88:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= TIM_OCClear;
 8000e8a:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e8c:	8301      	strh	r1, [r0, #24]
}
 8000e8e:	4770      	bx	lr

08000e90 <TIM_ClearOC2Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
 8000e90:	8b03      	ldrh	r3, [r0, #24]
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000e92:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr1 = TIMx->CCMR1;
  /* Reset the OC2CE Bit */
  tmpccmr1 &= (uint16_t)~((uint16_t)TIM_CCMR1_OC2CE);
 8000e94:	045b      	lsls	r3, r3, #17
 8000e96:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr1 |= (uint16_t)(TIM_OCClear << 8);
 8000e98:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR1 register */
  TIMx->CCMR1 = tmpccmr1;
 8000e9a:	8301      	strh	r1, [r0, #24]
}
 8000e9c:	4770      	bx	lr
 8000e9e:	46c0      	nop			; (mov r8, r8)

08000ea0 <TIM_ClearOC3Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000ea0:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC3CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC3CE);
 8000ea2:	2280      	movs	r2, #128	; 0x80
 8000ea4:	4393      	bics	r3, r2
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= TIM_OCClear;
 8000ea6:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000ea8:	8381      	strh	r1, [r0, #28]
}
 8000eaa:	4770      	bx	lr

08000eac <TIM_ClearOC4Ref>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
 8000eac:	8b83      	ldrh	r3, [r0, #28]
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000eae:	0209      	lsls	r1, r1, #8
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OCCLEAR_STATE(TIM_OCClear));
  
  tmpccmr2 = TIMx->CCMR2;
  /* Reset the OC4CE Bit */
  tmpccmr2 &= (uint16_t)~((uint16_t)TIM_CCMR2_OC4CE);
 8000eb0:	045b      	lsls	r3, r3, #17
 8000eb2:	0c5b      	lsrs	r3, r3, #17
  /* Enable or Disable the Output Compare Clear Bit */
  tmpccmr2 |= (uint16_t)(TIM_OCClear << 8);
 8000eb4:	4319      	orrs	r1, r3
  /* Write to TIMx CCMR2 register */
  TIMx->CCMR2 = tmpccmr2;
 8000eb6:	8381      	strh	r1, [r0, #28]
}
 8000eb8:	4770      	bx	lr
 8000eba:	46c0      	nop			; (mov r8, r8)

08000ebc <TIM_OC1PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000ebc:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1P);
 8000ebe:	2202      	movs	r2, #2
 8000ec0:	4393      	bics	r3, r2
  tmpccer |= TIM_OCPolarity;
 8000ec2:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000ec4:	8401      	strh	r1, [r0, #32]
}
 8000ec6:	4770      	bx	lr

08000ec8 <TIM_OC1NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
   
  tmpccer = TIMx->CCER;
 8000ec8:	8c03      	ldrh	r3, [r0, #32]
  /* Set or Reset the CC1NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC1NP);
 8000eca:	2208      	movs	r2, #8
 8000ecc:	4393      	bics	r3, r2
  tmpccer |= TIM_OCNPolarity;
 8000ece:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000ed0:	8401      	strh	r1, [r0, #32]
}
 8000ed2:	4770      	bx	lr

08000ed4 <TIM_OC2PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000ed4:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC2P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2P);
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	439a      	bics	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 4);
 8000eda:	010b      	lsls	r3, r1, #4
 8000edc:	1c11      	adds	r1, r2, #0
 8000ede:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000ee0:	8401      	strh	r1, [r0, #32]
}
 8000ee2:	4770      	bx	lr

08000ee4 <TIM_OC2NPolarityConfig>:
  uint16_t tmpccer = 0;
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
  
  tmpccer = TIMx->CCER;
 8000ee4:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC2NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC2NP);
 8000ee6:	2380      	movs	r3, #128	; 0x80
 8000ee8:	439a      	bics	r2, r3
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 4);
 8000eea:	010b      	lsls	r3, r1, #4
 8000eec:	1c11      	adds	r1, r2, #0
 8000eee:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000ef0:	8401      	strh	r1, [r0, #32]
}
 8000ef2:	4770      	bx	lr

08000ef4 <TIM_OC3PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000ef4:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3P);
 8000ef6:	4b03      	ldr	r3, [pc, #12]	; (8000f04 <TIM_OC3PolarityConfig+0x10>)
 8000ef8:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 8);
 8000efa:	020b      	lsls	r3, r1, #8
 8000efc:	1c11      	adds	r1, r2, #0
 8000efe:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000f00:	8401      	strh	r1, [r0, #32]
}
 8000f02:	4770      	bx	lr
 8000f04:	fffffdff 	.word	0xfffffdff

08000f08 <TIM_OC3NPolarityConfig>:
 
  /* Check the parameters */
  assert_param(IS_TIM_LIST1_PERIPH(TIMx));
  assert_param(IS_TIM_OCN_POLARITY(TIM_OCNPolarity));
    
  tmpccer = TIMx->CCER;
 8000f08:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC3NP Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC3NP);
 8000f0a:	4b03      	ldr	r3, [pc, #12]	; (8000f18 <TIM_OC3NPolarityConfig+0x10>)
 8000f0c:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCNPolarity << 8);
 8000f0e:	020b      	lsls	r3, r1, #8
 8000f10:	1c11      	adds	r1, r2, #0
 8000f12:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000f14:	8401      	strh	r1, [r0, #32]
}
 8000f16:	4770      	bx	lr
 8000f18:	fffff7ff 	.word	0xfffff7ff

08000f1c <TIM_OC4PolarityConfig>:
  
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_OC_POLARITY(TIM_OCPolarity));
  
  tmpccer = TIMx->CCER;
 8000f1c:	8c02      	ldrh	r2, [r0, #32]
  /* Set or Reset the CC4P Bit */
  tmpccer &= (uint16_t)~((uint16_t)TIM_CCER_CC4P);
 8000f1e:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <TIM_OC4PolarityConfig+0x10>)
 8000f20:	401a      	ands	r2, r3
  tmpccer |= (uint16_t)(TIM_OCPolarity << 12);
 8000f22:	030b      	lsls	r3, r1, #12
 8000f24:	1c11      	adds	r1, r2, #0
 8000f26:	4319      	orrs	r1, r3
  /* Write to TIMx CCER register */
  TIMx->CCER = tmpccer;
 8000f28:	8401      	strh	r1, [r0, #32]
}
 8000f2a:	4770      	bx	lr
 8000f2c:	ffffdfff 	.word	0xffffdfff

08000f30 <TIM_SelectOCREFClear>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(TIM_OCREFERENCECECLEAR_SOURCE(TIM_OCReferenceClear));

  /* Set the TIM_OCReferenceClear source */
  TIMx->SMCR &=  (uint16_t)~((uint16_t)TIM_SMCR_OCCS);
 8000f30:	8903      	ldrh	r3, [r0, #8]
 8000f32:	2208      	movs	r2, #8
 8000f34:	4393      	bics	r3, r2
 8000f36:	8103      	strh	r3, [r0, #8]
  TIMx->SMCR |=  TIM_OCReferenceClear;
 8000f38:	8903      	ldrh	r3, [r0, #8]
 8000f3a:	4319      	orrs	r1, r3
 8000f3c:	8101      	strh	r1, [r0, #8]
}
 8000f3e:	4770      	bx	lr

08000f40 <TIM_CCxCmd>:
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000f40:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCx: specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_Enable or TIM_CCx_Disable. 
  * @retval None
  */
void TIM_CCxCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCx)
{
 8000f42:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx)); 
  assert_param(IS_TIM_CCX(TIM_CCx));

  tmp = CCER_CCE_SET << TIM_Channel;
 8000f44:	2401      	movs	r4, #1
 8000f46:	408c      	lsls	r4, r1

  /* Reset the CCxE Bit */
  TIMx->CCER &= (uint16_t)~ tmp;
 8000f48:	43a3      	bics	r3, r4
 8000f4a:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCx << TIM_Channel);
 8000f4c:	8c03      	ldrh	r3, [r0, #32]
 8000f4e:	408a      	lsls	r2, r1
 8000f50:	1c11      	adds	r1, r2, #0
 8000f52:	4319      	orrs	r1, r3
 8000f54:	8401      	strh	r1, [r0, #32]
}
 8000f56:	bd10      	pop	{r4, pc}

08000f58 <TIM_CCxNCmd>:
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8000f58:	8c03      	ldrh	r3, [r0, #32]
  * @param  TIM_CCxN: specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_Enable or TIM_CCxN_Disable. 
  * @retval None
  */
void TIM_CCxNCmd(TIM_TypeDef* TIMx, uint16_t TIM_Channel, uint16_t TIM_CCxN)
{
 8000f5a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_TIM_COMPLEMENTARY_CHANNEL(TIM_Channel));
  assert_param(IS_TIM_CCXN(TIM_CCxN));

  tmp = CCER_CCNE_SET << TIM_Channel;
 8000f5c:	2404      	movs	r4, #4
 8000f5e:	408c      	lsls	r4, r1

  /* Reset the CCxNE Bit */
  TIMx->CCER &= (uint16_t) ~tmp;
 8000f60:	43a3      	bics	r3, r4
 8000f62:	8403      	strh	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */ 
  TIMx->CCER |=  (uint16_t)(TIM_CCxN << TIM_Channel);
 8000f64:	8c03      	ldrh	r3, [r0, #32]
 8000f66:	408a      	lsls	r2, r1
 8000f68:	1c11      	adds	r1, r2, #0
 8000f6a:	4319      	orrs	r1, r3
 8000f6c:	8401      	strh	r1, [r0, #32]
}
 8000f6e:	bd10      	pop	{r4, pc}

08000f70 <TIM_SelectCOM>:
  * @param  NewState: new state of the Commutation event.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCOM(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8000f70:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f72:	2900      	cmp	r1, #0
 8000f74:	d104      	bne.n	8000f80 <TIM_SelectCOM+0x10>
    TIMx->CR2 |= TIM_CR2_CCUS;
  }
  else
  {
    /* Reset the COM Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCUS);
 8000f76:	8883      	ldrh	r3, [r0, #4]
 8000f78:	2204      	movs	r2, #4
 8000f7a:	4393      	bics	r3, r2
 8000f7c:	8083      	strh	r3, [r0, #4]
  }
}
 8000f7e:	bd00      	pop	{pc}
  assert_param(IS_TIM_LIST2_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Set the COM Bit */
    TIMx->CR2 |= TIM_CR2_CCUS;
 8000f80:	8882      	ldrh	r2, [r0, #4]
 8000f82:	2304      	movs	r3, #4
 8000f84:	4313      	orrs	r3, r2
 8000f86:	8083      	strh	r3, [r0, #4]
 8000f88:	e7f9      	b.n	8000f7e <TIM_SelectCOM+0xe>
 8000f8a:	46c0      	nop			; (mov r8, r8)

08000f8c <TIM_ICInit>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_ICInit(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 8000f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_IC_SELECTION(TIM_ICInitStruct->TIM_ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICInitStruct->TIM_ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(TIM_ICInitStruct->TIM_ICFilter));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICInitStruct->TIM_ICPolarity));

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 8000f8e:	880b      	ldrh	r3, [r1, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d028      	beq.n	8000fe6 <TIM_ICInit+0x5a>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
 8000f94:	2b04      	cmp	r3, #4
 8000f96:	d045      	beq.n	8001024 <TIM_ICInit+0x98>
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
 8000f98:	2b08      	cmp	r3, #8
 8000f9a:	d100      	bne.n	8000f9e <TIM_ICInit+0x12>
 8000f9c:	e065      	b.n	800106a <TIM_ICInit+0xde>
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000f9e:	8c05      	ldrh	r5, [r0, #32]
 8000fa0:	4a43      	ldr	r2, [pc, #268]	; (80010b0 <TIM_ICInit+0x124>)
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000fa2:	884b      	ldrh	r3, [r1, #2]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000fa4:	402a      	ands	r2, r5
  }
  else
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000fa6:	888e      	ldrh	r6, [r1, #4]
 8000fa8:	890c      	ldrh	r4, [r1, #8]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
 8000faa:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8000fac:	8b87      	ldrh	r7, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000fae:	4a41      	ldr	r2, [pc, #260]	; (80010b4 <TIM_ICInit+0x128>)
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000fb0:	0236      	lsls	r6, r6, #8
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
 8000fb2:	403a      	ands	r2, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000fb4:	4332      	orrs	r2, r6
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000fb6:	0324      	lsls	r4, r4, #12
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
 8000fb8:	b292      	uxth	r2, r2
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8000fba:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 12);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
 8000fbc:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000fbe:	4c3e      	ldr	r4, [pc, #248]	; (80010b8 <TIM_ICInit+0x12c>)

   /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC4E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 12);
 8000fc0:	031b      	lsls	r3, r3, #12
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)((uint16_t)(~(uint16_t)TIM_CCMR2_CC4S) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC4F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection << 8);
  tmpccmr2 |= (uint16_t)(TIM_ICFilter << 12);  
  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8000fc2:	402c      	ands	r4, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC4E);
 8000fc4:	431c      	orrs	r4, r3
 8000fc6:	2380      	movs	r3, #128	; 0x80
 8000fc8:	b2a4      	uxth	r4, r4
 8000fca:	015b      	lsls	r3, r3, #5
 8000fcc:	4323      	orrs	r3, r4
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8000fce:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 8000fd0:	8403      	strh	r3, [r0, #32]
    /* TI4 Configuration */
    TI4_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8000fd2:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000fd4:	4a39      	ldr	r2, [pc, #228]	; (80010bc <TIM_ICInit+0x130>)
 8000fd6:	8b81      	ldrh	r1, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000fd8:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8000fda:	400a      	ands	r2, r1
 8000fdc:	8382      	strh	r2, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8000fde:	8b82      	ldrh	r2, [r0, #28]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	8383      	strh	r3, [r0, #28]
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC4Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 8000fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000fe6:	8c02      	ldrh	r2, [r0, #32]
 8000fe8:	2401      	movs	r4, #1
 8000fea:	43a2      	bics	r2, r4

  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    assert_param(IS_TIM_LIST4_PERIPH(TIMx));
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 8000fec:	888b      	ldrh	r3, [r1, #4]
 8000fee:	884d      	ldrh	r5, [r1, #2]
 8000ff0:	890e      	ldrh	r6, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8000ff2:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ff4:	8b02      	ldrh	r2, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8000ff6:	27f3      	movs	r7, #243	; 0xf3
 8000ff8:	43ba      	bics	r2, r7
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8000ffa:	0136      	lsls	r6, r6, #4
 8000ffc:	4332      	orrs	r2, r6
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8000ffe:	8c04      	ldrh	r4, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001000:	b292      	uxth	r2, r2
 8001002:	431a      	orrs	r2, r3
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001004:	230a      	movs	r3, #10
 8001006:	439c      	bics	r4, r3
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001008:	2301      	movs	r3, #1
 800100a:	432b      	orrs	r3, r5
 800100c:	4323      	orrs	r3, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800100e:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001010:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001012:	8b02      	ldrh	r2, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001014:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001016:	210c      	movs	r1, #12
 8001018:	438a      	bics	r2, r1
 800101a:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 800101c:	8b02      	ldrh	r2, [r0, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	8303      	strh	r3, [r0, #24]
 8001022:	e7df      	b.n	8000fe4 <TIM_ICInit+0x58>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001024:	8c03      	ldrh	r3, [r0, #32]
 8001026:	2210      	movs	r2, #16
 8001028:	4393      	bics	r3, r2
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_2)
  {
    assert_param(IS_TIM_LIST6_PERIPH(TIMx));
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
 800102a:	884c      	ldrh	r4, [r1, #2]
 800102c:	888e      	ldrh	r6, [r1, #4]
 800102e:	890f      	ldrh	r7, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001030:	8403      	strh	r3, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001032:	8b05      	ldrh	r5, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001034:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <TIM_ICInit+0x128>)
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001036:	033f      	lsls	r7, r7, #12
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001038:	4015      	ands	r5, r2
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800103a:	433d      	orrs	r5, r7
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800103c:	8c03      	ldrh	r3, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 800103e:	b2ad      	uxth	r5, r5
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001040:	0232      	lsls	r2, r6, #8
 8001042:	432a      	orrs	r2, r5
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001044:	25a0      	movs	r5, #160	; 0xa0
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001046:	0124      	lsls	r4, r4, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001048:	43ab      	bics	r3, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 800104a:	4323      	orrs	r3, r4
 800104c:	b29b      	uxth	r3, r3
 800104e:	2410      	movs	r4, #16
 8001050:	4323      	orrs	r3, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001052:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001054:	8403      	strh	r3, [r0, #32]
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001056:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001058:	4a18      	ldr	r2, [pc, #96]	; (80010bc <TIM_ICInit+0x130>)
 800105a:	8b01      	ldrh	r1, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800105c:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800105e:	400a      	ands	r2, r1
 8001060:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001062:	8b02      	ldrh	r2, [r0, #24]
 8001064:	4313      	orrs	r3, r2
 8001066:	8303      	strh	r3, [r0, #24]
 8001068:	e7bc      	b.n	8000fe4 <TIM_ICInit+0x58>
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 800106a:	8c05      	ldrh	r5, [r0, #32]
 800106c:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <TIM_ICInit+0x134>)
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 800106e:	888c      	ldrh	r4, [r1, #4]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001070:	402a      	ands	r2, r5
  }
  else if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_3)
  {
    assert_param(IS_TIM_LIST3_PERIPH(TIMx));
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
 8001072:	884b      	ldrh	r3, [r1, #2]
 8001074:	890e      	ldrh	r6, [r1, #8]
static void TI3_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
 8001076:	8402      	strh	r2, [r0, #32]
  tmpccmr2 = TIMx->CCMR2;
 8001078:	8b82      	ldrh	r2, [r0, #28]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
 800107a:	27f3      	movs	r7, #243	; 0xf3
 800107c:	43ba      	bics	r2, r7
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800107e:	0136      	lsls	r6, r6, #4
 8001080:	4332      	orrs	r2, r6
 8001082:	b292      	uxth	r2, r2
{
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
 8001084:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 8);
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001086:	4322      	orrs	r2, r4
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8001088:	4c0e      	ldr	r4, [pc, #56]	; (80010c4 <TIM_ICInit+0x138>)
  uint16_t tmpccmr2 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC3E);
  tmpccmr2 = TIMx->CCMR2;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 8);
 800108a:	021b      	lsls	r3, r3, #8
  /* Select the Input and set the filter */
  tmpccmr2 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR2_CC3S)) & ((uint16_t)~((uint16_t)TIM_CCMR2_IC3F)));
  tmpccmr2 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800108c:	402c      	ands	r4, r5
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC3E);  
 800108e:	431c      	orrs	r4, r3
 8001090:	2380      	movs	r3, #128	; 0x80
 8001092:	b2a4      	uxth	r4, r4
 8001094:	005b      	lsls	r3, r3, #1
 8001096:	4323      	orrs	r3, r4
  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8001098:	8382      	strh	r2, [r0, #28]
  TIMx->CCER = tmpccer;
 800109a:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 800109c:	8b82      	ldrh	r2, [r0, #28]
    /* TI3 Configuration */
    TI3_Config(TIMx,  TIM_ICInitStruct->TIM_ICPolarity,
               TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC3Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 800109e:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 80010a0:	210c      	movs	r1, #12
 80010a2:	438a      	bics	r2, r1
 80010a4:	8382      	strh	r2, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 80010a6:	8b82      	ldrh	r2, [r0, #28]
 80010a8:	4313      	orrs	r3, r2
 80010aa:	8383      	strh	r3, [r0, #28]
 80010ac:	e79a      	b.n	8000fe4 <TIM_ICInit+0x58>
 80010ae:	46c0      	nop			; (mov r8, r8)
 80010b0:	ffffefff 	.word	0xffffefff
 80010b4:	00000cff 	.word	0x00000cff
 80010b8:	00005fff 	.word	0x00005fff
 80010bc:	fffff3ff 	.word	0xfffff3ff
 80010c0:	fffffeff 	.word	0xfffffeff
 80010c4:	fffff5ff 	.word	0xfffff5ff

080010c8 <TIM_ICStructInit>:
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80010c8:	2300      	movs	r3, #0
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80010ca:	2201      	movs	r2, #1
  * @retval None
  */
void TIM_ICStructInit(TIM_ICInitTypeDef* TIM_ICInitStruct)
{
  /* Set the default configuration */
  TIM_ICInitStruct->TIM_Channel = TIM_Channel_1;
 80010cc:	8003      	strh	r3, [r0, #0]
  TIM_ICInitStruct->TIM_ICPolarity = TIM_ICPolarity_Rising;
 80010ce:	8043      	strh	r3, [r0, #2]
  TIM_ICInitStruct->TIM_ICSelection = TIM_ICSelection_DirectTI;
 80010d0:	8082      	strh	r2, [r0, #4]
  TIM_ICInitStruct->TIM_ICPrescaler = TIM_ICPSC_DIV1;
 80010d2:	80c3      	strh	r3, [r0, #6]
  TIM_ICInitStruct->TIM_ICFilter = 0x00;
 80010d4:	8103      	strh	r3, [r0, #8]
}
 80010d6:	4770      	bx	lr

080010d8 <TIM_PWMIConfig>:
  *         that contains the configuration information for the specified TIM 
  *         peripheral.
  * @retval None
  */
void TIM_PWMIConfig(TIM_TypeDef* TIMx, TIM_ICInitTypeDef* TIM_ICInitStruct)
{
 80010d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010da:	464e      	mov	r6, r9
 80010dc:	4657      	mov	r7, sl
 80010de:	4645      	mov	r5, r8
 80010e0:	b4e0      	push	{r5, r6, r7}
  uint16_t icoppositepolarity = TIM_ICPolarity_Rising;
  uint16_t icoppositeselection = TIM_ICSelection_DirectTI;
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Select the Opposite Input Polarity */
  if (TIM_ICInitStruct->TIM_ICPolarity == TIM_ICPolarity_Rising)
 80010e2:	884b      	ldrh	r3, [r1, #2]
  {
    icoppositepolarity = TIM_ICPolarity_Falling;
 80010e4:	425c      	negs	r4, r3
 80010e6:	415c      	adcs	r4, r3
 80010e8:	0062      	lsls	r2, r4, #1
 80010ea:	4692      	mov	sl, r2
  else
  {
    icoppositepolarity = TIM_ICPolarity_Rising;
  }
  /* Select the Opposite Input */
  if (TIM_ICInitStruct->TIM_ICSelection == TIM_ICSelection_DirectTI)
 80010ec:	888a      	ldrh	r2, [r1, #4]
  {
    icoppositeselection = TIM_ICSelection_IndirectTI;
 80010ee:	1e55      	subs	r5, r2, #1
 80010f0:	1e6e      	subs	r6, r5, #1
 80010f2:	41b5      	sbcs	r5, r6
 80010f4:	2602      	movs	r6, #2
 80010f6:	1b75      	subs	r5, r6, r5
  }
  else
  {
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
 80010f8:	880e      	ldrh	r6, [r1, #0]
 80010fa:	2e00      	cmp	r6, #0
 80010fc:	d044      	beq.n	8001188 <TIM_PWMIConfig+0xb0>
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80010fe:	8c07      	ldrh	r7, [r0, #32]
 8001100:	2610      	movs	r6, #16
 8001102:	43b7      	bics	r7, r6
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
  else
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001104:	890c      	ldrh	r4, [r1, #8]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001106:	8407      	strh	r7, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001108:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 800110a:	8c07      	ldrh	r7, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
 800110c:	46b0      	mov	r8, r6
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800110e:	4e41      	ldr	r6, [pc, #260]	; (8001214 <TIM_PWMIConfig+0x13c>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001110:	46bc      	mov	ip, r7
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 8001112:	4647      	mov	r7, r8
 8001114:	4037      	ands	r7, r6
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001116:	0326      	lsls	r6, r4, #12
 8001118:	433e      	orrs	r6, r7
 800111a:	b2b6      	uxth	r6, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 800111c:	0212      	lsls	r2, r2, #8
 800111e:	4332      	orrs	r2, r6
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001120:	4667      	mov	r7, ip
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001122:	011e      	lsls	r6, r3, #4
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8001124:	23a0      	movs	r3, #160	; 0xa0
 8001126:	439f      	bics	r7, r3
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001128:	1c3b      	adds	r3, r7, #0
 800112a:	4333      	orrs	r3, r6
 800112c:	b29b      	uxth	r3, r3
 800112e:	2610      	movs	r6, #16
 8001130:	4333      	orrs	r3, r6
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001132:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001134:	8403      	strh	r3, [r0, #32]
  { 
    /* TI2 Configuration */
    TI2_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC2Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 8001136:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001138:	4a37      	ldr	r2, [pc, #220]	; (8001218 <TIM_PWMIConfig+0x140>)
 800113a:	8b01      	ldrh	r1, [r0, #24]
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 800113c:	4657      	mov	r7, sl
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800113e:	400a      	ands	r2, r1
 8001140:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001142:	8b01      	ldrh	r1, [r0, #24]
 8001144:	021a      	lsls	r2, r3, #8
 8001146:	430a      	orrs	r2, r1
 8001148:	8302      	strh	r2, [r0, #24]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800114a:	8c02      	ldrh	r2, [r0, #32]
 800114c:	2101      	movs	r1, #1
 800114e:	438a      	bics	r2, r1
 8001150:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001152:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001154:	0121      	lsls	r1, r4, #4
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001156:	24f3      	movs	r4, #243	; 0xf3
 8001158:	43a6      	bics	r6, r4
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800115a:	8c02      	ldrh	r2, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800115c:	1c34      	adds	r4, r6, #0
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800115e:	430c      	orrs	r4, r1
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001160:	210a      	movs	r1, #10
 8001162:	438a      	bics	r2, r1
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001164:	2101      	movs	r1, #1
 8001166:	430a      	orrs	r2, r1
 8001168:	4317      	orrs	r7, r2
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800116a:	4325      	orrs	r5, r4
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800116c:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 800116e:	8407      	strh	r7, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 8001170:	8b02      	ldrh	r2, [r0, #24]
 8001172:	210c      	movs	r1, #12
 8001174:	438a      	bics	r2, r1
 8001176:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001178:	8b02      	ldrh	r2, [r0, #24]
 800117a:	4313      	orrs	r3, r2
 800117c:	8303      	strh	r3, [r0, #24]
    /* TI1 Configuration */
    TI1_Config(TIMx, icoppositepolarity, icoppositeselection, TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
  }
}
 800117e:	bc1c      	pop	{r2, r3, r4}
 8001180:	4690      	mov	r8, r2
 8001182:	4699      	mov	r9, r3
 8001184:	46a2      	mov	sl, r4
 8001186:	bdf0      	pop	{r4, r5, r6, r7, pc}
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 8001188:	890e      	ldrh	r6, [r1, #8]
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800118a:	2701      	movs	r7, #1
    icoppositeselection = TIM_ICSelection_DirectTI;
  }
  if (TIM_ICInitStruct->TIM_Channel == TIM_Channel_1)
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
 800118c:	46b1      	mov	r9, r6
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 800118e:	8c06      	ldrh	r6, [r0, #32]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001190:	022d      	lsls	r5, r5, #8
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001192:	43be      	bics	r6, r7
 8001194:	8406      	strh	r6, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001196:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
 8001198:	8c07      	ldrh	r7, [r0, #32]
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
 800119a:	46b4      	mov	ip, r6
  tmpccer = TIMx->CCER;
 800119c:	46ba      	mov	sl, r7
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 800119e:	26f3      	movs	r6, #243	; 0xf3
 80011a0:	4667      	mov	r7, ip
 80011a2:	43b7      	bics	r7, r6
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 80011a4:	464e      	mov	r6, r9
 80011a6:	0136      	lsls	r6, r6, #4
 80011a8:	4337      	orrs	r7, r6
 80011aa:	b2bf      	uxth	r7, r7
 80011ac:	433a      	orrs	r2, r7
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80011ae:	260a      	movs	r6, #10
 80011b0:	4657      	mov	r7, sl
 80011b2:	43b7      	bics	r7, r6
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 80011b4:	2601      	movs	r6, #1
 80011b6:	46b4      	mov	ip, r6
 80011b8:	4666      	mov	r6, ip
 80011ba:	4333      	orrs	r3, r6
 80011bc:	433b      	orrs	r3, r7
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80011be:	8302      	strh	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80011c0:	8403      	strh	r3, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80011c2:	8b02      	ldrh	r2, [r0, #24]
  {
    /* TI1 Configuration */
    TI1_Config(TIMx, TIM_ICInitStruct->TIM_ICPolarity, TIM_ICInitStruct->TIM_ICSelection,
               TIM_ICInitStruct->TIM_ICFilter);
    /* Set the Input Capture Prescaler value */
    TIM_SetIC1Prescaler(TIMx, TIM_ICInitStruct->TIM_ICPrescaler);
 80011c4:	88cb      	ldrh	r3, [r1, #6]
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 80011c6:	210c      	movs	r1, #12
 80011c8:	438a      	bics	r2, r1
 80011ca:	8302      	strh	r2, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80011cc:	8b02      	ldrh	r2, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80011ce:	2110      	movs	r1, #16
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 80011d0:	431a      	orrs	r2, r3
 80011d2:	8302      	strh	r2, [r0, #24]
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80011d4:	8c02      	ldrh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80011d6:	464e      	mov	r6, r9
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 80011d8:	438a      	bics	r2, r1
 80011da:	8402      	strh	r2, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011dc:	8b07      	ldrh	r7, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80011de:	4a0d      	ldr	r2, [pc, #52]	; (8001214 <TIM_PWMIConfig+0x13c>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 80011e0:	8c01      	ldrh	r1, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 80011e2:	4017      	ands	r7, r2
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80011e4:	0332      	lsls	r2, r6, #12
 80011e6:	1c3e      	adds	r6, r7, #0
 80011e8:	4316      	orrs	r6, r2
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80011ea:	22a0      	movs	r2, #160	; 0xa0
 80011ec:	4391      	bics	r1, r2
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80011ee:	2210      	movs	r2, #16
 80011f0:	4311      	orrs	r1, r2
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 80011f2:	b2b6      	uxth	r6, r6
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 80011f4:	0162      	lsls	r2, r4, #5
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 80011f6:	1c0c      	adds	r4, r1, #0
 80011f8:	4314      	orrs	r4, r2
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 80011fa:	4335      	orrs	r5, r6
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80011fc:	8305      	strh	r5, [r0, #24]
  TIMx->CCER = tmpccer;
 80011fe:	8404      	strh	r4, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001200:	8b01      	ldrh	r1, [r0, #24]
 8001202:	4a05      	ldr	r2, [pc, #20]	; (8001218 <TIM_PWMIConfig+0x140>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001204:	021b      	lsls	r3, r3, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001206:	400a      	ands	r2, r1
 8001208:	8302      	strh	r2, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 800120a:	8b02      	ldrh	r2, [r0, #24]
 800120c:	4313      	orrs	r3, r2
 800120e:	8303      	strh	r3, [r0, #24]
 8001210:	e7b5      	b.n	800117e <TIM_PWMIConfig+0xa6>
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	00000cff 	.word	0x00000cff
 8001218:	fffff3ff 	.word	0xfffff3ff

0800121c <TIM_GetCapture1>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  
  /* Get the Capture 1 Register value */
  return TIMx->CCR1;
 800121c:	6b40      	ldr	r0, [r0, #52]	; 0x34
}
 800121e:	4770      	bx	lr

08001220 <TIM_GetCapture2>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  
  /* Get the Capture 2 Register value */
  return TIMx->CCR2;
 8001220:	6b80      	ldr	r0, [r0, #56]	; 0x38
}
 8001222:	4770      	bx	lr

08001224 <TIM_GetCapture3>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx)); 
  
  /* Get the Capture 3 Register value */
  return TIMx->CCR3;
 8001224:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
}
 8001226:	4770      	bx	lr

08001228 <TIM_GetCapture4>:
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  
  /* Get the Capture 4 Register value */
  return TIMx->CCR4;
 8001228:	6c00      	ldr	r0, [r0, #64]	; 0x40
}
 800122a:	4770      	bx	lr

0800122c <TIM_SetIC1Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC1PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC1PSC);
 800122c:	8b03      	ldrh	r3, [r0, #24]
 800122e:	220c      	movs	r2, #12
 8001230:	4393      	bics	r3, r2
 8001232:	8303      	strh	r3, [r0, #24]
  /* Set the IC1PSC value */
  TIMx->CCMR1 |= TIM_ICPSC;
 8001234:	8b03      	ldrh	r3, [r0, #24]
 8001236:	4319      	orrs	r1, r3
 8001238:	8301      	strh	r1, [r0, #24]
}
 800123a:	4770      	bx	lr

0800123c <TIM_SetIC2Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 800123c:	8b02      	ldrh	r2, [r0, #24]
 800123e:	4b04      	ldr	r3, [pc, #16]	; (8001250 <TIM_SetIC2Prescaler+0x14>)
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001240:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC2PSC Bits */
  TIMx->CCMR1 &= (uint16_t)~((uint16_t)TIM_CCMR1_IC2PSC);
 8001242:	4013      	ands	r3, r2
 8001244:	8303      	strh	r3, [r0, #24]
  /* Set the IC2PSC value */
  TIMx->CCMR1 |= (uint16_t)(TIM_ICPSC << 8);
 8001246:	8b03      	ldrh	r3, [r0, #24]
 8001248:	4319      	orrs	r1, r3
 800124a:	8301      	strh	r1, [r0, #24]
}
 800124c:	4770      	bx	lr
 800124e:	46c0      	nop			; (mov r8, r8)
 8001250:	fffff3ff 	.word	0xfffff3ff

08001254 <TIM_SetIC3Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC3PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC3PSC);
 8001254:	8b83      	ldrh	r3, [r0, #28]
 8001256:	220c      	movs	r2, #12
 8001258:	4393      	bics	r3, r2
 800125a:	8383      	strh	r3, [r0, #28]
  /* Set the IC3PSC value */
  TIMx->CCMR2 |= TIM_ICPSC;
 800125c:	8b83      	ldrh	r3, [r0, #28]
 800125e:	4319      	orrs	r1, r3
 8001260:	8381      	strh	r1, [r0, #28]
}
 8001262:	4770      	bx	lr

08001264 <TIM_SetIC4Prescaler>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 8001264:	8b82      	ldrh	r2, [r0, #28]
 8001266:	4b04      	ldr	r3, [pc, #16]	; (8001278 <TIM_SetIC4Prescaler+0x14>)
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 8001268:	0209      	lsls	r1, r1, #8
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_IC_PRESCALER(TIM_ICPSC));
  
  /* Reset the IC4PSC Bits */
  TIMx->CCMR2 &= (uint16_t)~((uint16_t)TIM_CCMR2_IC4PSC);
 800126a:	4013      	ands	r3, r2
 800126c:	8383      	strh	r3, [r0, #28]
  /* Set the IC4PSC value */
  TIMx->CCMR2 |= (uint16_t)(TIM_ICPSC << 8);
 800126e:	8b83      	ldrh	r3, [r0, #28]
 8001270:	4319      	orrs	r1, r3
 8001272:	8381      	strh	r1, [r0, #28]
}
 8001274:	4770      	bx	lr
 8001276:	46c0      	nop			; (mov r8, r8)
 8001278:	fffff3ff 	.word	0xfffff3ff

0800127c <TIM_ITConfig>:
  * @param  NewState: new state of the TIM interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_ITConfig(TIM_TypeDef* TIMx, uint16_t TIM_IT, FunctionalState NewState)
{  
 800127c:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800127e:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001280:	2a00      	cmp	r2, #0
 8001282:	d102      	bne.n	800128a <TIM_ITConfig+0xe>
    TIMx->DIER |= TIM_IT;
  }
  else
  {
    /* Disable the Interrupt sources */
    TIMx->DIER &= (uint16_t)~TIM_IT;
 8001284:	438b      	bics	r3, r1
 8001286:	8183      	strh	r3, [r0, #12]
  }
}
 8001288:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Interrupt sources */
    TIMx->DIER |= TIM_IT;
 800128a:	4319      	orrs	r1, r3
 800128c:	8181      	strh	r1, [r0, #12]
 800128e:	e7fb      	b.n	8001288 <TIM_ITConfig+0xc>

08001290 <TIM_GenerateEvent>:
{ 
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_EVENT_SOURCE(TIM_EventSource)); 
  /* Set the event sources */
  TIMx->EGR = TIM_EventSource;
 8001290:	8281      	strh	r1, [r0, #20]
}
 8001292:	4770      	bx	lr

08001294 <TIM_GetFlagStatus>:
   
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_FLAG(TIM_FLAG));
  
  if ((TIMx->SR & TIM_FLAG) != (uint16_t)RESET)
 8001294:	8a00      	ldrh	r0, [r0, #16]
 8001296:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 8001298:	1e43      	subs	r3, r0, #1
 800129a:	4198      	sbcs	r0, r3
}
 800129c:	4770      	bx	lr
 800129e:	46c0      	nop			; (mov r8, r8)

080012a0 <TIM_ClearFlag>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_CLEAR_FLAG(TIM_FLAG));
   
  /* Clear the flags */
  TIMx->SR = (uint16_t)~TIM_FLAG;
 80012a0:	43c9      	mvns	r1, r1
 80012a2:	8201      	strh	r1, [r0, #16]
}
 80012a4:	4770      	bx	lr
 80012a6:	46c0      	nop			; (mov r8, r8)

080012a8 <TIM_GetITStatus>:
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 80012a8:	8a02      	ldrh	r2, [r0, #16]
  
  itenable = TIMx->DIER & TIM_IT;
 80012aa:	8983      	ldrh	r3, [r0, #12]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 80012ac:	400b      	ands	r3, r1
 80012ae:	1e58      	subs	r0, r3, #1
 80012b0:	4183      	sbcs	r3, r0
 80012b2:	1c10      	adds	r0, r2, #0
 80012b4:	4008      	ands	r0, r1
 80012b6:	1e41      	subs	r1, r0, #1
 80012b8:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 80012ba:	4018      	ands	r0, r3
}
 80012bc:	4770      	bx	lr
 80012be:	46c0      	nop			; (mov r8, r8)

080012c0 <TIM_ClearITPendingBit>:
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 80012c0:	43c9      	mvns	r1, r1
 80012c2:	8201      	strh	r1, [r0, #16]
}
 80012c4:	4770      	bx	lr
 80012c6:	46c0      	nop			; (mov r8, r8)

080012c8 <TIM_DMAConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST4_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_BASE(TIM_DMABase)); 
  assert_param(IS_TIM_DMA_LENGTH(TIM_DMABurstLength));
  /* Set the DMA Base and the DMA Burst Length */
  TIMx->DCR = TIM_DMABase | TIM_DMABurstLength;
 80012c8:	4311      	orrs	r1, r2
 80012ca:	2348      	movs	r3, #72	; 0x48
 80012cc:	52c1      	strh	r1, [r0, r3]
}
 80012ce:	4770      	bx	lr

080012d0 <TIM_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_DMACmd(TIM_TypeDef* TIMx, uint16_t TIM_DMASource, FunctionalState NewState)
{ 
 80012d0:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80012d2:	8983      	ldrh	r3, [r0, #12]
  /* Check the parameters */
  assert_param(IS_TIM_LIST10_PERIPH(TIMx));
  assert_param(IS_TIM_DMA_SOURCE(TIM_DMASource));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012d4:	2a00      	cmp	r2, #0
 80012d6:	d102      	bne.n	80012de <TIM_DMACmd+0xe>
    TIMx->DIER |= TIM_DMASource; 
  }
  else
  {
    /* Disable the DMA sources */
    TIMx->DIER &= (uint16_t)~TIM_DMASource;
 80012d8:	438b      	bics	r3, r1
 80012da:	8183      	strh	r3, [r0, #12]
  }
}
 80012dc:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the DMA sources */
    TIMx->DIER |= TIM_DMASource; 
 80012de:	4319      	orrs	r1, r3
 80012e0:	8181      	strh	r1, [r0, #12]
 80012e2:	e7fb      	b.n	80012dc <TIM_DMACmd+0xc>

080012e4 <TIM_SelectCCDMA>:
  * @param  NewState: new state of the Capture Compare DMA source
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectCCDMA(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 80012e4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST5_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80012e6:	2900      	cmp	r1, #0
 80012e8:	d104      	bne.n	80012f4 <TIM_SelectCCDMA+0x10>
    TIMx->CR2 |= TIM_CR2_CCDS;
  }
  else
  {
    /* Reset the CCDS Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_CCDS);
 80012ea:	8883      	ldrh	r3, [r0, #4]
 80012ec:	2208      	movs	r2, #8
 80012ee:	4393      	bics	r3, r2
 80012f0:	8083      	strh	r3, [r0, #4]
  }
}
 80012f2:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the CCDS Bit */
    TIMx->CR2 |= TIM_CR2_CCDS;
 80012f4:	8882      	ldrh	r2, [r0, #4]
 80012f6:	2308      	movs	r3, #8
 80012f8:	4313      	orrs	r3, r2
 80012fa:	8083      	strh	r3, [r0, #4]
 80012fc:	e7f9      	b.n	80012f2 <TIM_SelectCCDMA+0xe>
 80012fe:	46c0      	nop			; (mov r8, r8)

08001300 <TIM_InternalClockConfig>:
void TIM_InternalClockConfig(TIM_TypeDef* TIMx)
{
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  /* Disable slave mode to clock the prescaler directly with the internal clock */
  TIMx->SMCR &=  (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001300:	8903      	ldrh	r3, [r0, #8]
 8001302:	2207      	movs	r2, #7
 8001304:	4393      	bics	r3, r2
 8001306:	8103      	strh	r3, [r0, #8]
}
 8001308:	4770      	bx	lr
 800130a:	46c0      	nop			; (mov r8, r8)

0800130c <TIM_ITRxExternalClockConfig>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800130c:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 800130e:	2270      	movs	r2, #112	; 0x70
 8001310:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001312:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001314:	8101      	strh	r1, [r0, #8]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_INTERNAL_TRIGGER_SELECTION(TIM_InputTriggerSource));
  /* Select the Internal Trigger */
  TIM_SelectInputTrigger(TIMx, TIM_InputTriggerSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001316:	8902      	ldrh	r2, [r0, #8]
 8001318:	2307      	movs	r3, #7
 800131a:	4313      	orrs	r3, r2
 800131c:	8103      	strh	r3, [r0, #8]
}
 800131e:	4770      	bx	lr

08001320 <TIM_TIxExternalClockConfig>:
  *          This parameter must be a value between 0x0 and 0xF.
  * @retval None
  */
void TIM_TIxExternalClockConfig(TIM_TypeDef* TIMx, uint16_t TIM_TIxExternalCLKSource,
                                uint16_t TIM_ICPolarity, uint16_t ICFilter)
{
 8001320:	b570      	push	{r4, r5, r6, lr}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001322:	8c04      	ldrh	r4, [r0, #32]
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_IC_POLARITY(TIM_ICPolarity));
  assert_param(IS_TIM_IC_FILTER(ICFilter));
  
  /* Configure the Timer Input Clock Source */
  if (TIM_TIxExternalCLKSource == TIM_TIxExternalCLK1Source_TI2)
 8001324:	2960      	cmp	r1, #96	; 0x60
 8001326:	d01c      	beq.n	8001362 <TIM_TIxExternalClockConfig+0x42>
static void TI1_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
 8001328:	2501      	movs	r5, #1
 800132a:	43ac      	bics	r4, r5
 800132c:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800132e:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
 8001330:	24f3      	movs	r4, #243	; 0xf3
 8001332:	43a6      	bics	r6, r4
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 8001334:	2401      	movs	r4, #1
 8001336:	4326      	orrs	r6, r4
{
  uint16_t tmpccmr1 = 0, tmpccer = 0;
  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC1E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 8001338:	8c05      	ldrh	r5, [r0, #32]
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC1F)));
  tmpccmr1 |= (uint16_t)(TIM_ICSelection | (uint16_t)(TIM_ICFilter << (uint16_t)4));
 800133a:	b2b6      	uxth	r6, r6
 800133c:	011b      	lsls	r3, r3, #4
 800133e:	4333      	orrs	r3, r6
 
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8001340:	260a      	movs	r6, #10
 8001342:	43b5      	bics	r5, r6
  tmpccer |= (uint16_t)(TIM_ICPolarity | (uint16_t)TIM_CCER_CC1E);
 8001344:	432c      	orrs	r4, r5
 8001346:	b2a4      	uxth	r4, r4
 8001348:	4322      	orrs	r2, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800134a:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800134c:	8402      	strh	r2, [r0, #32]
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800134e:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 8001350:	2270      	movs	r2, #112	; 0x70
 8001352:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 8001354:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001356:	8101      	strh	r1, [r0, #8]
    TI1_Config(TIMx, TIM_ICPolarity, TIM_ICSelection_DirectTI, ICFilter);
  }
  /* Select the Trigger source */
  TIM_SelectInputTrigger(TIMx, TIM_TIxExternalCLKSource);
  /* Select the External clock mode1 */
  TIMx->SMCR |= TIM_SlaveMode_External1;
 8001358:	8902      	ldrh	r2, [r0, #8]
 800135a:	2307      	movs	r3, #7
 800135c:	4313      	orrs	r3, r2
 800135e:	8103      	strh	r3, [r0, #8]
}
 8001360:	bd70      	pop	{r4, r5, r6, pc}
static void TI2_Config(TIM_TypeDef* TIMx, uint16_t TIM_ICPolarity, uint16_t TIM_ICSelection,
                       uint16_t TIM_ICFilter)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
 8001362:	2510      	movs	r5, #16
 8001364:	43ac      	bics	r4, r5
 8001366:	8404      	strh	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001368:	8b06      	ldrh	r6, [r0, #24]
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800136a:	4c09      	ldr	r4, [pc, #36]	; (8001390 <TIM_TIxExternalClockConfig+0x70>)
{
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
 800136c:	8c05      	ldrh	r5, [r0, #32]
  tmp = (uint16_t)(TIM_ICPolarity << 4);
  /* Select the Input and set the filter */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
 800136e:	4026      	ands	r6, r4
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
 8001370:	2480      	movs	r4, #128	; 0x80
 8001372:	0064      	lsls	r4, r4, #1
 8001374:	4326      	orrs	r6, r4
 8001376:	031c      	lsls	r4, r3, #12
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
 8001378:	1c33      	adds	r3, r6, #0
 800137a:	4323      	orrs	r3, r4
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800137c:	24a0      	movs	r4, #160	; 0xa0
 800137e:	43a5      	bics	r5, r4
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001380:	2410      	movs	r4, #16
 8001382:	4325      	orrs	r5, r4
  uint16_t tmpccmr1 = 0, tmpccer = 0, tmp = 0;
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= (uint16_t)~((uint16_t)TIM_CCER_CC2E);
  tmpccmr1 = TIMx->CCMR1;
  tmpccer = TIMx->CCER;
  tmp = (uint16_t)(TIM_ICPolarity << 4);
 8001384:	0114      	lsls	r4, r2, #4
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC2S)) & ((uint16_t)~((uint16_t)TIM_CCMR1_IC2F)));
  tmpccmr1 |= (uint16_t)(TIM_ICFilter << 12);
  tmpccmr1 |= (uint16_t)(TIM_ICSelection << 8); 
  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(tmp | (uint16_t)TIM_CCER_CC2E);  
 8001386:	1c2a      	adds	r2, r5, #0
 8001388:	4322      	orrs	r2, r4
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800138a:	8303      	strh	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800138c:	8402      	strh	r2, [r0, #32]
 800138e:	e7de      	b.n	800134e <TIM_TIxExternalClockConfig+0x2e>
 8001390:	00000cff 	.word	0x00000cff

08001394 <TIM_ETRClockMode1Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode1Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                             uint16_t ExtTRGFilter)
{
 8001394:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001396:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001398:	25ff      	movs	r5, #255	; 0xff
 800139a:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 800139c:	4321      	orrs	r1, r4
 800139e:	430a      	orrs	r2, r1
 80013a0:	021b      	lsls	r3, r3, #8
 80013a2:	431a      	orrs	r2, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013a4:	8102      	strh	r2, [r0, #8]
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80013a6:	8903      	ldrh	r3, [r0, #8]
  /* Reset the SMS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  /* Select the External clock mode1 */
  tmpsmcr |= TIM_SlaveMode_External1;
  /* Select the Trigger selection : ETRF */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80013a8:	2277      	movs	r2, #119	; 0x77
 80013aa:	4393      	bics	r3, r2
  tmpsmcr |= TIM_TS_ETRF;
 80013ac:	4313      	orrs	r3, r2
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013ae:	8103      	strh	r3, [r0, #8]
}
 80013b0:	bd30      	pop	{r4, r5, pc}
 80013b2:	46c0      	nop			; (mov r8, r8)

080013b4 <TIM_ETRClockMode2Config>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRClockMode2Config(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, 
                             uint16_t TIM_ExtTRGPolarity, uint16_t ExtTRGFilter)
{
 80013b4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 80013b6:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 80013b8:	25ff      	movs	r5, #255	; 0xff
 80013ba:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 80013bc:	4321      	orrs	r1, r4
 80013be:	430a      	orrs	r2, r1
 80013c0:	021b      	lsls	r3, r3, #8
 80013c2:	431a      	orrs	r2, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013c4:	8102      	strh	r2, [r0, #8]
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  /* Configure the ETR Clock source */
  TIM_ETRConfig(TIMx, TIM_ExtTRGPrescaler, TIM_ExtTRGPolarity, ExtTRGFilter);
  /* Enable the External clock mode2 */
  TIMx->SMCR |= TIM_SMCR_ECE;
 80013c6:	8902      	ldrh	r2, [r0, #8]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	01db      	lsls	r3, r3, #7
 80013cc:	4313      	orrs	r3, r2
 80013ce:	8103      	strh	r3, [r0, #8]
}
 80013d0:	bd30      	pop	{r4, r5, pc}
 80013d2:	46c0      	nop			; (mov r8, r8)

080013d4 <TIM_SelectInputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_TRIGGER_SELECTION(TIM_InputTriggerSource));

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80013d4:	8903      	ldrh	r3, [r0, #8]
  /* Reset the TS Bits */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_TS));
 80013d6:	2270      	movs	r2, #112	; 0x70
 80013d8:	4393      	bics	r3, r2
  /* Set the Input Trigger source */
  tmpsmcr |= TIM_InputTriggerSource;
 80013da:	4319      	orrs	r1, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80013dc:	8101      	strh	r1, [r0, #8]
}
 80013de:	4770      	bx	lr

080013e0 <TIM_SelectOutputTrigger>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST9_PERIPH(TIMx));
  assert_param(IS_TIM_TRGO_SOURCE(TIM_TRGOSource));

  /* Reset the MMS Bits */
  TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_MMS);
 80013e0:	8883      	ldrh	r3, [r0, #4]
 80013e2:	2270      	movs	r2, #112	; 0x70
 80013e4:	4393      	bics	r3, r2
 80013e6:	8083      	strh	r3, [r0, #4]
  /* Select the TRGO source */
  TIMx->CR2 |=  TIM_TRGOSource;
 80013e8:	8883      	ldrh	r3, [r0, #4]
 80013ea:	4319      	orrs	r1, r3
 80013ec:	8081      	strh	r1, [r0, #4]
}
 80013ee:	4770      	bx	lr

080013f0 <TIM_SelectSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx)); 
  assert_param(IS_TIM_SLAVE_MODE(TIM_SlaveMode));
  
  /* Reset the SMS Bits */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_SMS);
 80013f0:	8903      	ldrh	r3, [r0, #8]
 80013f2:	2207      	movs	r2, #7
 80013f4:	4393      	bics	r3, r2
 80013f6:	8103      	strh	r3, [r0, #8]
  /* Select the Slave Mode */
  TIMx->SMCR |= TIM_SlaveMode;
 80013f8:	8903      	ldrh	r3, [r0, #8]
 80013fa:	4319      	orrs	r1, r3
 80013fc:	8101      	strh	r1, [r0, #8]
}
 80013fe:	4770      	bx	lr

08001400 <TIM_SelectMasterSlaveMode>:
  /* Check the parameters */
  assert_param(IS_TIM_LIST6_PERIPH(TIMx));
  assert_param(IS_TIM_MSM_STATE(TIM_MasterSlaveMode));
  
  /* Reset the MSM Bit */
  TIMx->SMCR &= (uint16_t)~((uint16_t)TIM_SMCR_MSM);
 8001400:	8903      	ldrh	r3, [r0, #8]
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	4393      	bics	r3, r2
 8001406:	8103      	strh	r3, [r0, #8]
  
  /* Set or Reset the MSM Bit */
  TIMx->SMCR |= TIM_MasterSlaveMode;
 8001408:	8903      	ldrh	r3, [r0, #8]
 800140a:	4319      	orrs	r1, r3
 800140c:	8101      	strh	r1, [r0, #8]
}
 800140e:	4770      	bx	lr

08001410 <TIM_ETRConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETRConfig(TIM_TypeDef* TIMx, uint16_t TIM_ExtTRGPrescaler, uint16_t TIM_ExtTRGPolarity,
                   uint16_t ExtTRGFilter)
{
 8001410:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_TIM_EXT_PRESCALER(TIM_ExtTRGPrescaler));
  assert_param(IS_TIM_EXT_POLARITY(TIM_ExtTRGPolarity));
  assert_param(IS_TIM_EXT_FILTER(ExtTRGFilter));
  
  tmpsmcr = TIMx->SMCR;
 8001412:	8904      	ldrh	r4, [r0, #8]
  /* Reset the ETR Bits */
  tmpsmcr &= SMCR_ETR_MASK;
 8001414:	25ff      	movs	r5, #255	; 0xff
 8001416:	402c      	ands	r4, r5
  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint16_t)(TIM_ExtTRGPrescaler | (uint16_t)(TIM_ExtTRGPolarity | (uint16_t)(ExtTRGFilter << (uint16_t)8)));
 8001418:	4321      	orrs	r1, r4
 800141a:	430a      	orrs	r2, r1
 800141c:	021b      	lsls	r3, r3, #8
 800141e:	431a      	orrs	r2, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001420:	8102      	strh	r2, [r0, #8]
}
 8001422:	bd30      	pop	{r4, r5, pc}

08001424 <TIM_EncoderInterfaceConfig>:
  *            @arg TIM_ICPolarity_Rising: IC Rising edge.
  * @retval None
  */
void TIM_EncoderInterfaceConfig(TIM_TypeDef* TIMx, uint16_t TIM_EncoderMode,
                                uint16_t TIM_IC1Polarity, uint16_t TIM_IC2Polarity)
{
 8001424:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_TIM_ENCODER_MODE(TIM_EncoderMode));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC1Polarity));
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001426:	8904      	ldrh	r4, [r0, #8]
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
 8001428:	2707      	movs	r7, #7
 800142a:	43bc      	bics	r4, r7
  assert_param(IS_TIM_IC_POLARITY(TIM_IC2Polarity));
  
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
 800142c:	8b06      	ldrh	r6, [r0, #24]
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
 800142e:	4321      	orrs	r1, r4
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001430:	4c06      	ldr	r4, [pc, #24]	; (800144c <TIM_EncoderInterfaceConfig+0x28>)
  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = TIMx->CCMR1;
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001432:	8c05      	ldrh	r5, [r0, #32]
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
 8001434:	4034      	ands	r4, r6
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 8001436:	4e06      	ldr	r6, [pc, #24]	; (8001450 <TIM_EncoderInterfaceConfig+0x2c>)
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001438:	011b      	lsls	r3, r3, #4
  /* Set the encoder Mode */
  tmpsmcr &= (uint16_t)(~((uint16_t)TIM_SMCR_SMS));
  tmpsmcr |= TIM_EncoderMode;
  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= (uint16_t)(((uint16_t)~((uint16_t)TIM_CCMR1_CC1S)) & (uint16_t)(~((uint16_t)TIM_CCMR1_CC2S)));
  tmpccmr1 |= TIM_CCMR1_CC1S_0 | TIM_CCMR1_CC2S_0;
 800143a:	4334      	orrs	r4, r6
  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= (uint16_t)~((uint16_t)(TIM_CCER_CC1P | TIM_CCER_CC1NP)) & (uint16_t)~((uint16_t)(TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800143c:	26aa      	movs	r6, #170	; 0xaa
 800143e:	43b5      	bics	r5, r6
  tmpccer |= (uint16_t)(TIM_IC1Polarity | (uint16_t)(TIM_IC2Polarity << (uint16_t)4));
 8001440:	432a      	orrs	r2, r5
 8001442:	431a      	orrs	r2, r3
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001444:	8101      	strh	r1, [r0, #8]
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmr1;
 8001446:	8304      	strh	r4, [r0, #24]
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001448:	8402      	strh	r2, [r0, #32]
}
 800144a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800144c:	fffffcfc 	.word	0xfffffcfc
 8001450:	00000101 	.word	0x00000101

08001454 <TIM_SelectHallSensor>:
  * @param  NewState: new state of the TIMx Hall sensor interface.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void TIM_SelectHallSensor(TIM_TypeDef* TIMx, FunctionalState NewState)
{
 8001454:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_TIM_LIST3_PERIPH(TIMx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001456:	2900      	cmp	r1, #0
 8001458:	d104      	bne.n	8001464 <TIM_SelectHallSensor+0x10>
    TIMx->CR2 |= TIM_CR2_TI1S;
  }
  else
  {
    /* Reset the TI1S Bit */
    TIMx->CR2 &= (uint16_t)~((uint16_t)TIM_CR2_TI1S);
 800145a:	8883      	ldrh	r3, [r0, #4]
 800145c:	2280      	movs	r2, #128	; 0x80
 800145e:	4393      	bics	r3, r2
 8001460:	8083      	strh	r3, [r0, #4]
  }
}
 8001462:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Set the TI1S Bit */
    TIMx->CR2 |= TIM_CR2_TI1S;
 8001464:	8882      	ldrh	r2, [r0, #4]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	4313      	orrs	r3, r2
 800146a:	8083      	strh	r3, [r0, #4]
 800146c:	e7f9      	b.n	8001462 <TIM_SelectHallSensor+0xe>
 800146e:	46c0      	nop			; (mov r8, r8)

08001470 <TIM_RemapConfig>:
 /* Check the parameters */
  assert_param(IS_TIM_LIST11_PERIPH(TIMx));
  assert_param(IS_TIM_REMAP(TIM_Remap));

  /* Set the Timer remapping configuration */
  TIMx->OR =  TIM_Remap;
 8001470:	2350      	movs	r3, #80	; 0x50
 8001472:	52c1      	strh	r1, [r0, r3]
}
 8001474:	4770      	bx	lr
 8001476:	46c0      	nop			; (mov r8, r8)

08001478 <USART_DeInit>:
  * @brief  Deinitializes the USARTx peripheral registers to their default reset values.
  * @param  USARTx: where x can be 1 or 2 to select the USART peripheral.
  * @retval None
  */
void USART_DeInit(USART_TypeDef* USARTx)
{
 8001478:	b508      	push	{r3, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
 800147a:	4b0e      	ldr	r3, [pc, #56]	; (80014b4 <USART_DeInit+0x3c>)
 800147c:	4298      	cmp	r0, r3
 800147e:	d00e      	beq.n	800149e <USART_DeInit+0x26>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
  }
  else 
  {
    if  (USARTx == USART2)
 8001480:	4b0d      	ldr	r3, [pc, #52]	; (80014b8 <USART_DeInit+0x40>)
 8001482:	4298      	cmp	r0, r3
 8001484:	d000      	beq.n	8001488 <USART_DeInit+0x10>
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
    }
  }
}
 8001486:	bd08      	pop	{r3, pc}
  }
  else 
  {
    if  (USARTx == USART2)
    {
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, ENABLE);
 8001488:	2080      	movs	r0, #128	; 0x80
 800148a:	0280      	lsls	r0, r0, #10
 800148c:	2101      	movs	r1, #1
 800148e:	f7ff f9a5 	bl	80007dc <RCC_APB1PeriphResetCmd>
      RCC_APB1PeriphResetCmd(RCC_APB1Periph_USART2, DISABLE);
 8001492:	2080      	movs	r0, #128	; 0x80
 8001494:	0280      	lsls	r0, r0, #10
 8001496:	2100      	movs	r1, #0
 8001498:	f7ff f9a0 	bl	80007dc <RCC_APB1PeriphResetCmd>
 800149c:	e7f3      	b.n	8001486 <USART_DeInit+0xe>
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));

  if (USARTx == USART1)
  {
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, ENABLE);
 800149e:	2080      	movs	r0, #128	; 0x80
 80014a0:	01c0      	lsls	r0, r0, #7
 80014a2:	2101      	movs	r1, #1
 80014a4:	f7ff f98c 	bl	80007c0 <RCC_APB2PeriphResetCmd>
    RCC_APB2PeriphResetCmd(RCC_APB2Periph_USART1, DISABLE);
 80014a8:	2080      	movs	r0, #128	; 0x80
 80014aa:	01c0      	lsls	r0, r0, #7
 80014ac:	2100      	movs	r1, #0
 80014ae:	f7ff f987 	bl	80007c0 <RCC_APB2PeriphResetCmd>
 80014b2:	e7e8      	b.n	8001486 <USART_DeInit+0xe>
 80014b4:	40013800 	.word	0x40013800
 80014b8:	40004400 	.word	0x40004400

080014bc <USART_Init>:
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80014bc:	6803      	ldr	r3, [r0, #0]
 80014be:	2201      	movs	r2, #1
 80014c0:	4393      	bics	r3, r2
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014c2:	b5f0      	push	{r4, r5, r6, r7, lr}
  assert_param(IS_USART_PARITY(USART_InitStruct->USART_Parity));
  assert_param(IS_USART_MODE(USART_InitStruct->USART_Mode));
  assert_param(IS_USART_HARDWARE_FLOW_CONTROL(USART_InitStruct->USART_HardwareFlowControl));
  
  /* Disable USART */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80014c4:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 80014c6:	6842      	ldr	r2, [r0, #4]
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <USART_Init+0x8c>)
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014ca:	1c0d      	adds	r5, r1, #0
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80014cc:	6889      	ldr	r1, [r1, #8]
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
  
  /*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 80014ce:	4013      	ands	r3, r2
  
  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit ------------*/
  /* Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 80014d0:	430b      	orrs	r3, r1
  
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 80014d2:	6043      	str	r3, [r0, #4]
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 80014d4:	6802      	ldr	r2, [r0, #0]
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80014d6:	4b1d      	ldr	r3, [pc, #116]	; (800154c <USART_Init+0x90>)
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80014d8:	6869      	ldr	r1, [r5, #4]
  USARTx->CR2 = tmpreg;
  
  /*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80014da:	401a      	ands	r2, r3
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80014dc:	68eb      	ldr	r3, [r5, #12]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014de:	b089      	sub	sp, #36	; 0x24
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80014e0:	430b      	orrs	r3, r1
 80014e2:	6929      	ldr	r1, [r5, #16]
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 80014e4:	1c04      	adds	r4, r0, #0
  
  /* Configure the USART Word Length, Parity and mode ----------------------- */
  /* Set the M bits according to USART_WordLength value */
  /* Set PCE and PS bits according to USART_Parity value */
  /* Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80014e6:	430b      	orrs	r3, r1
 80014e8:	4313      	orrs	r3, r2
    USART_InitStruct->USART_Mode;
  
  /* Write to USART CR1 */
  USARTx->CR1 = tmpreg;
 80014ea:	6003      	str	r3, [r0, #0]
  
  /*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80014ec:	6882      	ldr	r2, [r0, #8]
  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <USART_Init+0x94>)
 80014f0:	4013      	ands	r3, r2
  
  /* Configure the USART HFC -------------------------------------------------*/
  /* Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80014f2:	696a      	ldr	r2, [r5, #20]
 80014f4:	4313      	orrs	r3, r2
  
  /* Write to USART CR3 */
  USARTx->CR3 = tmpreg;
 80014f6:	6083      	str	r3, [r0, #8]
  
  /*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80014f8:	a801      	add	r0, sp, #4
 80014fa:	f7ff f879 	bl	80005f0 <RCC_GetClocksFreq>
  
  if (USARTx == USART1)
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <USART_Init+0x98>)
 8001500:	429c      	cmp	r4, r3
 8001502:	d01e      	beq.n	8001542 <USART_Init+0x86>
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK_Frequency;
 8001504:	9f03      	ldr	r7, [sp, #12]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8001506:	6823      	ldr	r3, [r4, #0]
 8001508:	0419      	lsls	r1, r3, #16
 800150a:	d500      	bpl.n	800150e <USART_Init+0x52>
  {
    /* (divider * 10) computing in case Oversampling mode is 8 Samples */
    divider = (uint32_t)((2 * apbclock) / (USART_InitStruct->USART_BaudRate));
 800150c:	007f      	lsls	r7, r7, #1
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800150e:	682e      	ldr	r6, [r5, #0]
 8001510:	1c38      	adds	r0, r7, #0
 8001512:	1c31      	adds	r1, r6, #0
 8001514:	f000 fa56 	bl	80019c4 <__aeabi_uidiv>
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 8001518:	1c31      	adds	r1, r6, #0
    tmpreg  = (uint32_t)((2 * apbclock) % (USART_InitStruct->USART_BaudRate));
  }
  else /* if ((USARTx->CR1 & CR1_OVER8_Set) == 0) */
  {
    /* (divider * 10) computing in case Oversampling mode is 16 Samples */
    divider = (uint32_t)((apbclock) / (USART_InitStruct->USART_BaudRate));
 800151a:	1c05      	adds	r5, r0, #0
    tmpreg  = (uint32_t)((apbclock) % (USART_InitStruct->USART_BaudRate));
 800151c:	1c38      	adds	r0, r7, #0
 800151e:	f000 fa95 	bl	8001a4c <__aeabi_uidivmod>
  }
  
  /* round the divider : if fractional part i greater than 0.5 increment divider */
  if (tmpreg >=  (USART_InitStruct->USART_BaudRate) / 2)
 8001522:	0876      	lsrs	r6, r6, #1
  {
    divider++;
 8001524:	2300      	movs	r3, #0
 8001526:	42b1      	cmp	r1, r6
 8001528:	415b      	adcs	r3, r3
 800152a:	18ed      	adds	r5, r5, r3
  } 
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 800152c:	6823      	ldr	r3, [r4, #0]
 800152e:	041a      	lsls	r2, r3, #16
 8001530:	d504      	bpl.n	800153c <USART_Init+0x80>
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001532:	4a09      	ldr	r2, [pc, #36]	; (8001558 <USART_Init+0x9c>)
  
  /* Implement the divider in case Oversampling mode is 8 Samples */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
  {
    /* get the LSB of divider and shift it to the right by 1 bit */
    tmpreg = (divider & (uint16_t)0x000F) >> 1;
 8001534:	072b      	lsls	r3, r5, #28
 8001536:	0f5b      	lsrs	r3, r3, #29
    
    /* update the divider value */
    divider = (divider & (uint16_t)0xFFF0) | tmpreg;
 8001538:	4015      	ands	r5, r2
 800153a:	431d      	orrs	r5, r3
  }
  
  /* Write to USART BRR */
  USARTx->BRR = (uint16_t)divider;
 800153c:	81a5      	strh	r5, [r4, #12]
}
 800153e:	b009      	add	sp, #36	; 0x24
 8001540:	bdf0      	pop	{r4, r5, r6, r7, pc}
  /* Configure the USART Baud Rate -------------------------------------------*/
  RCC_GetClocksFreq(&RCC_ClocksStatus);
  
  if (USARTx == USART1)
  {
    apbclock = RCC_ClocksStatus.USART1CLK_Frequency;
 8001542:	9f07      	ldr	r7, [sp, #28]
 8001544:	e7df      	b.n	8001506 <USART_Init+0x4a>
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	ffffcfff 	.word	0xffffcfff
 800154c:	ffffe9f3 	.word	0xffffe9f3
 8001550:	fffffcff 	.word	0xfffffcff
 8001554:	40013800 	.word	0x40013800
 8001558:	0000fff0 	.word	0x0000fff0

0800155c <USART_StructInit>:
  * @retval None
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
 800155c:	2396      	movs	r3, #150	; 0x96
 800155e:	019b      	lsls	r3, r3, #6
 8001560:	6003      	str	r3, [r0, #0]
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
  USART_InitStruct->USART_Parity = USART_Parity_No ;
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001562:	220c      	movs	r2, #12
  */
void USART_StructInit(USART_InitTypeDef* USART_InitStruct)
{
  /* USART_InitStruct members default value */
  USART_InitStruct->USART_BaudRate = 9600;
  USART_InitStruct->USART_WordLength = USART_WordLength_8b;
 8001564:	2300      	movs	r3, #0
 8001566:	6043      	str	r3, [r0, #4]
  USART_InitStruct->USART_StopBits = USART_StopBits_1;
 8001568:	6083      	str	r3, [r0, #8]
  USART_InitStruct->USART_Parity = USART_Parity_No ;
 800156a:	60c3      	str	r3, [r0, #12]
  USART_InitStruct->USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 800156c:	6102      	str	r2, [r0, #16]
  USART_InitStruct->USART_HardwareFlowControl = USART_HardwareFlowControl_None;  
 800156e:	6143      	str	r3, [r0, #20]
}
 8001570:	4770      	bx	lr
 8001572:	46c0      	nop			; (mov r8, r8)

08001574 <USART_ClockInit>:
  assert_param(IS_USART_CLOCK(USART_ClockInitStruct->USART_Clock));
  assert_param(IS_USART_CPOL(USART_ClockInitStruct->USART_CPOL));
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8001574:	6842      	ldr	r2, [r0, #4]
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <USART_ClockInit+0x1c>)
  *         structure that contains the configuration information for the specified 
  *         USART peripheral.  
  * @retval None
  */
void USART_ClockInit(USART_TypeDef* USARTx, USART_ClockInitTypeDef* USART_ClockInitStruct)
{
 8001578:	b510      	push	{r4, lr}
  assert_param(IS_USART_CPHA(USART_ClockInitStruct->USART_CPHA));
  assert_param(IS_USART_LASTBIT(USART_ClockInitStruct->USART_LastBit));
/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
  /* Clear CLKEN, CPOL, CPHA, LBCL and SSM bits */
  tmpreg &= (uint32_t)~((uint32_t)CR2_CLOCK_CLEAR_MASK);
 800157a:	401a      	ands	r2, r3
  /* Configure the USART Clock, CPOL, CPHA, LastBit and SSM ------------*/
  /* Set CLKEN bit according to USART_Clock value */
  /* Set CPOL bit according to USART_CPOL value */
  /* Set CPHA bit according to USART_CPHA value */
  /* Set LBCL bit according to USART_LastBit value */
  tmpreg |= (uint32_t)(USART_ClockInitStruct->USART_Clock | USART_ClockInitStruct->USART_CPOL | 
 800157c:	680c      	ldr	r4, [r1, #0]
 800157e:	684b      	ldr	r3, [r1, #4]
 8001580:	4323      	orrs	r3, r4
 8001582:	688c      	ldr	r4, [r1, #8]
 8001584:	68c9      	ldr	r1, [r1, #12]
 8001586:	4323      	orrs	r3, r4
 8001588:	430b      	orrs	r3, r1
 800158a:	4313      	orrs	r3, r2
                       USART_ClockInitStruct->USART_CPHA | USART_ClockInitStruct->USART_LastBit);
  /* Write to USART CR2 */
  USARTx->CR2 = tmpreg;
 800158c:	6043      	str	r3, [r0, #4]
}
 800158e:	bd10      	pop	{r4, pc}
 8001590:	fffff0ff 	.word	0xfffff0ff

08001594 <USART_ClockStructInit>:
  * @retval None
  */
void USART_ClockStructInit(USART_ClockInitTypeDef* USART_ClockInitStruct)
{
  /* USART_ClockInitStruct members default value */
  USART_ClockInitStruct->USART_Clock = USART_Clock_Disable;
 8001594:	2300      	movs	r3, #0
 8001596:	6003      	str	r3, [r0, #0]
  USART_ClockInitStruct->USART_CPOL = USART_CPOL_Low;
 8001598:	6043      	str	r3, [r0, #4]
  USART_ClockInitStruct->USART_CPHA = USART_CPHA_1Edge;
 800159a:	6083      	str	r3, [r0, #8]
  USART_ClockInitStruct->USART_LastBit = USART_LastBit_Disable;
 800159c:	60c3      	str	r3, [r0, #12]
}
 800159e:	4770      	bx	lr

080015a0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80015a0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d104      	bne.n	80015b0 <USART_Cmd+0x10>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UE);
 80015a6:	6803      	ldr	r3, [r0, #0]
 80015a8:	2201      	movs	r2, #1
 80015aa:	4393      	bics	r3, r2
 80015ac:	6003      	str	r3, [r0, #0]
  }
}
 80015ae:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 80015b0:	6802      	ldr	r2, [r0, #0]
 80015b2:	2301      	movs	r3, #1
 80015b4:	4313      	orrs	r3, r2
 80015b6:	6003      	str	r3, [r0, #0]
 80015b8:	e7f9      	b.n	80015ae <USART_Cmd+0xe>
 80015ba:	46c0      	nop			; (mov r8, r8)

080015bc <USART_DirectionModeCmd>:
  * @param  NewState: new state of the USART transfer direction.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DirectionModeCmd(USART_TypeDef* USARTx, uint32_t USART_DirectionMode, FunctionalState NewState)
{
 80015bc:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80015be:	6803      	ldr	r3, [r0, #0]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MODE(USART_DirectionMode));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80015c0:	2a00      	cmp	r2, #0
 80015c2:	d102      	bne.n	80015ca <USART_DirectionModeCmd+0xe>
  }
  else
  {
    /* Disable the USART's transfer interface by clearing the TE and/or RE bits
       in the USART CR3 register */
    USARTx->CR1 &= (uint32_t)~USART_DirectionMode;
 80015c4:	438b      	bics	r3, r1
 80015c6:	6003      	str	r3, [r0, #0]
  }
}
 80015c8:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the USART's transfer interface by setting the TE and/or RE bits 
       in the USART CR1 register */
    USARTx->CR1 |= USART_DirectionMode;
 80015ca:	4319      	orrs	r1, r3
 80015cc:	6001      	str	r1, [r0, #0]
 80015ce:	e7fb      	b.n	80015c8 <USART_DirectionModeCmd+0xc>

080015d0 <USART_OverSampling8Cmd>:
  * @note   This function has to be called before calling USART_Init() function
  *         in order to have correct baudrate Divider value.
  * @retval None
  */
void USART_OverSampling8Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80015d0:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80015d2:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015d4:	2900      	cmp	r1, #0
 80015d6:	d103      	bne.n	80015e0 <USART_OverSampling8Cmd+0x10>
    USARTx->CR1 |= USART_CR1_OVER8;
  }
  else
  {
    /* Disable the 8x Oversampling mode by clearing the OVER8 bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_OVER8);
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <USART_OverSampling8Cmd+0x1c>)
 80015da:	4013      	ands	r3, r2
 80015dc:	6003      	str	r3, [r0, #0]
  }
}  
 80015de:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the 8x Oversampling mode by setting the OVER8 bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_OVER8;
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	021b      	lsls	r3, r3, #8
 80015e4:	4313      	orrs	r3, r2
 80015e6:	6003      	str	r3, [r0, #0]
 80015e8:	e7f9      	b.n	80015de <USART_OverSampling8Cmd+0xe>
 80015ea:	46c0      	nop			; (mov r8, r8)
 80015ec:	ffff7fff 	.word	0xffff7fff

080015f0 <USART_OneBitMethodCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_OneBitMethodCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80015f0:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 80015f2:	6882      	ldr	r2, [r0, #8]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80015f4:	2900      	cmp	r1, #0
 80015f6:	d103      	bne.n	8001600 <USART_OneBitMethodCmd+0x10>
    USARTx->CR3 |= USART_CR3_ONEBIT;
  }
  else
  {
    /* Disable the one bit method by clearing the ONEBITE bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_ONEBIT);
 80015f8:	4b04      	ldr	r3, [pc, #16]	; (800160c <USART_OneBitMethodCmd+0x1c>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	6083      	str	r3, [r0, #8]
  }
}
 80015fe:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the one bit method by setting the ONEBITE bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_ONEBIT;
 8001600:	2380      	movs	r3, #128	; 0x80
 8001602:	011b      	lsls	r3, r3, #4
 8001604:	4313      	orrs	r3, r2
 8001606:	6083      	str	r3, [r0, #8]
 8001608:	e7f9      	b.n	80015fe <USART_OneBitMethodCmd+0xe>
 800160a:	46c0      	nop			; (mov r8, r8)
 800160c:	fffff7ff 	.word	0xfffff7ff

08001610 <USART_MSBFirstCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_MSBFirstCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001610:	b500      	push	{lr}
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8001612:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8001614:	2900      	cmp	r1, #0
 8001616:	d103      	bne.n	8001620 <USART_MSBFirstCmd+0x10>
  }
  else
  {
    /* Disable the most significant bit first transmitted/received following the 
       start bit by clearing the MSBFIRST bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_MSBFIRST);
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <USART_MSBFirstCmd+0x1c>)
 800161a:	4013      	ands	r3, r2
 800161c:	6043      	str	r3, [r0, #4]
  }
}
 800161e:	bd00      	pop	{pc}
  
  if (NewState != DISABLE)
  {
    /* Enable the most significant bit first transmitted/received following the 
       start bit by setting the MSBFIRST bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_MSBFIRST;
 8001620:	2380      	movs	r3, #128	; 0x80
 8001622:	031b      	lsls	r3, r3, #12
 8001624:	4313      	orrs	r3, r2
 8001626:	6043      	str	r3, [r0, #4]
 8001628:	e7f9      	b.n	800161e <USART_MSBFirstCmd+0xe>
 800162a:	46c0      	nop			; (mov r8, r8)
 800162c:	fff7ffff 	.word	0xfff7ffff

08001630 <USART_DataInvCmd>:
  *                          logic (1=H, 0=L) 
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_DataInvCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001630:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8001632:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001634:	2900      	cmp	r1, #0
 8001636:	d103      	bne.n	8001640 <USART_DataInvCmd+0x10>
  }
  else
  {
    /* Disable the binary data inversion feature by clearing the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_DATAINV);
 8001638:	4b04      	ldr	r3, [pc, #16]	; (800164c <USART_DataInvCmd+0x1c>)
 800163a:	4013      	ands	r3, r2
 800163c:	6043      	str	r3, [r0, #4]
  }
}
 800163e:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the binary data inversion feature by setting the DATAINV bit in 
       the CR2 register */
    USARTx->CR2 |= USART_CR2_DATAINV;
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	02db      	lsls	r3, r3, #11
 8001644:	4313      	orrs	r3, r2
 8001646:	6043      	str	r3, [r0, #4]
 8001648:	e7f9      	b.n	800163e <USART_DataInvCmd+0xe>
 800164a:	46c0      	nop			; (mov r8, r8)
 800164c:	fffbffff 	.word	0xfffbffff

08001650 <USART_InvPinCmd>:
  *            @arg DISABLE: pin(s) signal works using the standard logic levels (Vdd =1, Gnd =0).
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_InvPinCmd(USART_TypeDef* USARTx, uint32_t USART_InvPin, FunctionalState NewState)
{
 8001650:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 8001652:	6843      	ldr	r3, [r0, #4]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_INVERSTION_PIN(USART_InvPin));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001654:	2a00      	cmp	r2, #0
 8001656:	d102      	bne.n	800165e <USART_InvPinCmd+0xe>
  }
  else
  {
    /* Disable the active level inversion for selected requests by clearing the 
       TXINV and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 &= (uint32_t)~USART_InvPin;
 8001658:	438b      	bics	r3, r1
 800165a:	6043      	str	r3, [r0, #4]
  }
}
 800165c:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the active level inversion for selected pins by setting the TXINV 
       and/or RXINV bits in the USART CR2 register */
    USARTx->CR2 |= USART_InvPin;
 800165e:	4319      	orrs	r1, r3
 8001660:	6041      	str	r1, [r0, #4]
 8001662:	e7fb      	b.n	800165c <USART_InvPinCmd+0xc>

08001664 <USART_SWAPPinCmd>:
  *            @arg DISABLE: TX/RX pins are used as defined in standard pinout
  * @note   This function has to be called before calling USART_Cmd() function.  
  * @retval None
  */
void USART_SWAPPinCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001664:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8001666:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001668:	2900      	cmp	r1, #0
 800166a:	d103      	bne.n	8001674 <USART_SWAPPinCmd+0x10>
    USARTx->CR2 |= USART_CR2_SWAP;
  }
  else
  {
    /* Disable the SWAP feature by clearing the SWAP bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_SWAP);
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <USART_SWAPPinCmd+0x1c>)
 800166e:	4013      	ands	r3, r2
 8001670:	6043      	str	r3, [r0, #4]
  }
}
 8001672:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the SWAP feature by setting the SWAP bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_SWAP;
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	021b      	lsls	r3, r3, #8
 8001678:	4313      	orrs	r3, r2
 800167a:	6043      	str	r3, [r0, #4]
 800167c:	e7f9      	b.n	8001672 <USART_SWAPPinCmd+0xe>
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	ffff7fff 	.word	0xffff7fff

08001684 <USART_ReceiverTimeOutCmd>:
  * @param  NewState: new state of the USARTx receiver Time Out.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ReceiverTimeOutCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001684:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8001686:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001688:	2900      	cmp	r1, #0
 800168a:	d103      	bne.n	8001694 <USART_ReceiverTimeOutCmd+0x10>
  }
  else
  {
    /* Disable the receiver time out feature by clearing the RTOEN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_RTOEN);
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <USART_ReceiverTimeOutCmd+0x1c>)
 800168e:	4013      	ands	r3, r2
 8001690:	6043      	str	r3, [r0, #4]
  }
}
 8001692:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the receiver time out feature by setting the RTOEN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_RTOEN;
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	041b      	lsls	r3, r3, #16
 8001698:	4313      	orrs	r3, r2
 800169a:	6043      	str	r3, [r0, #4]
 800169c:	e7f9      	b.n	8001692 <USART_ReceiverTimeOutCmd+0xe>
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	ff7fffff 	.word	0xff7fffff

080016a4 <USART_SetReceiverTimeOut>:
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_TIMEOUT(USART_ReceiverTimeOut));

  /* Clear the receiver Time Out value by clearing the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_RTO);
 80016a4:	6943      	ldr	r3, [r0, #20]
 80016a6:	0e1b      	lsrs	r3, r3, #24
 80016a8:	061b      	lsls	r3, r3, #24
 80016aa:	6143      	str	r3, [r0, #20]
  /* Set the receiver Time Out value by setting the RTO[23:0] bits in the RTOR
     register  */
  USARTx->RTOR |= USART_ReceiverTimeOut;
 80016ac:	6943      	ldr	r3, [r0, #20]
 80016ae:	4319      	orrs	r1, r3
 80016b0:	6141      	str	r1, [r0, #20]
}
 80016b2:	4770      	bx	lr

080016b4 <USART_SetPrescaler>:
{ 
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  
  /* Clear the USART prescaler */
  USARTx->GTPR &= USART_GTPR_GT;
 80016b4:	8a03      	ldrh	r3, [r0, #16]
 80016b6:	22ff      	movs	r2, #255	; 0xff
 80016b8:	4393      	bics	r3, r2
 80016ba:	8203      	strh	r3, [r0, #16]
  /* Set the USART prescaler */
  USARTx->GTPR |= USART_Prescaler;
 80016bc:	8a03      	ldrh	r3, [r0, #16]
 80016be:	4319      	orrs	r1, r3
 80016c0:	8201      	strh	r1, [r0, #16]
}
 80016c2:	4770      	bx	lr

080016c4 <USART_STOPModeCmd>:
  *          This parameter can be: ENABLE or DISABLE.
  * @note   This function has to be called when USART clock is set to HSI or LSE. 
  * @retval None
  */
void USART_STOPModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016c4:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80016c6:	2900      	cmp	r1, #0
 80016c8:	d104      	bne.n	80016d4 <USART_STOPModeCmd+0x10>
  }
  else
  {
    /* Disable the selected USART in STOP mode by clearing the UE bit in the CR1
       register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_UESM);
 80016ca:	6803      	ldr	r3, [r0, #0]
 80016cc:	2202      	movs	r2, #2
 80016ce:	4393      	bics	r3, r2
 80016d0:	6003      	str	r3, [r0, #0]
  }
}
 80016d2:	bd00      	pop	{pc}
  
  if (NewState != DISABLE)
  {
    /* Enable the selected USART in STOP mode by setting the UESM bit in the CR1
       register */
    USARTx->CR1 |= USART_CR1_UESM;
 80016d4:	6802      	ldr	r2, [r0, #0]
 80016d6:	2302      	movs	r3, #2
 80016d8:	4313      	orrs	r3, r2
 80016da:	6003      	str	r3, [r0, #0]
 80016dc:	e7f9      	b.n	80016d2 <USART_STOPModeCmd+0xe>
 80016de:	46c0      	nop			; (mov r8, r8)

080016e0 <USART_StopModeWakeUpSourceConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_STOPMODE_WAKEUPSOURCE(USART_WakeUpSource));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_WUS);
 80016e0:	6882      	ldr	r2, [r0, #8]
 80016e2:	4b03      	ldr	r3, [pc, #12]	; (80016f0 <USART_StopModeWakeUpSourceConfig+0x10>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_WakeUpSource;
 80016e8:	6883      	ldr	r3, [r0, #8]
 80016ea:	4319      	orrs	r1, r3
 80016ec:	6081      	str	r1, [r0, #8]
}
 80016ee:	4770      	bx	lr
 80016f0:	ffcfffff 	.word	0xffcfffff

080016f4 <USART_AutoBaudRateCmd>:
  * @param  NewState: new state of the USARTx auto baud rate.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_AutoBaudRateCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80016f4:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 80016f6:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80016f8:	2900      	cmp	r1, #0
 80016fa:	d103      	bne.n	8001704 <USART_AutoBaudRateCmd+0x10>
  }
  else
  {
    /* Disable the auto baud rate feature by clearing the ABREN bit in the CR2 
       register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABREN);
 80016fc:	4b04      	ldr	r3, [pc, #16]	; (8001710 <USART_AutoBaudRateCmd+0x1c>)
 80016fe:	4013      	ands	r3, r2
 8001700:	6043      	str	r3, [r0, #4]
  }
}
 8001702:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the auto baud rate feature by setting the ABREN bit in the CR2 
       register */
    USARTx->CR2 |= USART_CR2_ABREN;
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	035b      	lsls	r3, r3, #13
 8001708:	4313      	orrs	r3, r2
 800170a:	6043      	str	r3, [r0, #4]
 800170c:	e7f9      	b.n	8001702 <USART_AutoBaudRateCmd+0xe>
 800170e:	46c0      	nop			; (mov r8, r8)
 8001710:	ffefffff 	.word	0xffefffff

08001714 <USART_AutoBaudRateConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTOBAUDRATE_MODE(USART_AutoBaudRate));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ABRMODE);
 8001714:	6842      	ldr	r2, [r0, #4]
 8001716:	4b03      	ldr	r3, [pc, #12]	; (8001724 <USART_AutoBaudRateConfig+0x10>)
 8001718:	4013      	ands	r3, r2
 800171a:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AutoBaudRate;
 800171c:	6843      	ldr	r3, [r0, #4]
 800171e:	4319      	orrs	r1, r3
 8001720:	6041      	str	r1, [r0, #4]
}
 8001722:	4770      	bx	lr
 8001724:	ff9fffff 	.word	0xff9fffff

08001728 <USART_SendData>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->TDR = (Data & (uint16_t)0x01FF);
 8001728:	05c9      	lsls	r1, r1, #23
 800172a:	0dc9      	lsrs	r1, r1, #23
 800172c:	8501      	strh	r1, [r0, #40]	; 0x28
}
 800172e:	4770      	bx	lr

08001730 <USART_ReceiveData>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Receive Data */
  return (uint16_t)(USARTx->RDR & (uint16_t)0x01FF);
 8001730:	8c80      	ldrh	r0, [r0, #36]	; 0x24
 8001732:	05c0      	lsls	r0, r0, #23
 8001734:	0dc0      	lsrs	r0, r0, #23
}
 8001736:	4770      	bx	lr

08001738 <USART_SetAddress>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 8001738:	6843      	ldr	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 800173a:	0609      	lsls	r1, r1, #24
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  
  /* Clear the USART address */
  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADD);
 800173c:	021b      	lsls	r3, r3, #8
 800173e:	0a1b      	lsrs	r3, r3, #8
 8001740:	6043      	str	r3, [r0, #4]
  /* Set the USART address node */
  USARTx->CR2 |=((uint32_t)USART_Address << (uint32_t)0x18);
 8001742:	6843      	ldr	r3, [r0, #4]
 8001744:	4319      	orrs	r1, r3
 8001746:	6041      	str	r1, [r0, #4]
}
 8001748:	4770      	bx	lr
 800174a:	46c0      	nop			; (mov r8, r8)

0800174c <USART_MuteModeCmd>:
  * @param  NewState: new state of the USART mute mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_MuteModeCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800174c:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800174e:	6802      	ldr	r2, [r0, #0]
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
 8001750:	2900      	cmp	r1, #0
 8001752:	d103      	bne.n	800175c <USART_MuteModeCmd+0x10>
    USARTx->CR1 |= USART_CR1_MME;
  }
  else
  {
    /* Disable the USART mute mode by clearing the MME bit in the CR1 register */
    USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_MME);
 8001754:	4b04      	ldr	r3, [pc, #16]	; (8001768 <USART_MuteModeCmd+0x1c>)
 8001756:	4013      	ands	r3, r2
 8001758:	6003      	str	r3, [r0, #0]
  }
}
 800175a:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 
  
  if (NewState != DISABLE)
  {
    /* Enable the USART mute mode by setting the MME bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_MME;
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	019b      	lsls	r3, r3, #6
 8001760:	4313      	orrs	r3, r2
 8001762:	6003      	str	r3, [r0, #0]
 8001764:	e7f9      	b.n	800175a <USART_MuteModeCmd+0xe>
 8001766:	46c0      	nop			; (mov r8, r8)
 8001768:	ffffdfff 	.word	0xffffdfff

0800176c <USART_MuteModeWakeUpConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_MUTEMODE_WAKEUP(USART_WakeUp));

  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_WAKE);
 800176c:	6802      	ldr	r2, [r0, #0]
 800176e:	4b03      	ldr	r3, [pc, #12]	; (800177c <USART_MuteModeWakeUpConfig+0x10>)
 8001770:	4013      	ands	r3, r2
 8001772:	6003      	str	r3, [r0, #0]
  USARTx->CR1 |= USART_WakeUp;
 8001774:	6803      	ldr	r3, [r0, #0]
 8001776:	4319      	orrs	r1, r3
 8001778:	6001      	str	r1, [r0, #0]
}
 800177a:	4770      	bx	lr
 800177c:	fffff7ff 	.word	0xfffff7ff

08001780 <USART_AddressDetectionConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_ADDRESS_DETECTION(USART_AddressLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_ADDM7);
 8001780:	6843      	ldr	r3, [r0, #4]
 8001782:	2210      	movs	r2, #16
 8001784:	4393      	bics	r3, r2
 8001786:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_AddressLength;
 8001788:	6843      	ldr	r3, [r0, #4]
 800178a:	4319      	orrs	r1, r3
 800178c:	6041      	str	r1, [r0, #4]
}
 800178e:	4770      	bx	lr

08001790 <USART_LINBreakDetectLengthConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_LIN_BREAK_DETECT_LENGTH(USART_LINBreakDetectLength));

  USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LBDL);
 8001790:	6843      	ldr	r3, [r0, #4]
 8001792:	2220      	movs	r2, #32
 8001794:	4393      	bics	r3, r2
 8001796:	6043      	str	r3, [r0, #4]
  USARTx->CR2 |= USART_LINBreakDetectLength;  
 8001798:	6843      	ldr	r3, [r0, #4]
 800179a:	4319      	orrs	r1, r3
 800179c:	6041      	str	r1, [r0, #4]
}
 800179e:	4770      	bx	lr

080017a0 <USART_LINCmd>:
  * @param  NewState: new state of the USART LIN mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_LINCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80017a0:	b500      	push	{lr}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80017a2:	6842      	ldr	r2, [r0, #4]
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d103      	bne.n	80017b0 <USART_LINCmd+0x10>
    USARTx->CR2 |= USART_CR2_LINEN;
  }
  else
  {
    /* Disable the LIN mode by clearing the LINEN bit in the CR2 register */
    USARTx->CR2 &= (uint32_t)~((uint32_t)USART_CR2_LINEN);
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <USART_LINCmd+0x1c>)
 80017aa:	4013      	ands	r3, r2
 80017ac:	6043      	str	r3, [r0, #4]
  }
}
 80017ae:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the LIN mode by setting the LINEN bit in the CR2 register */
    USARTx->CR2 |= USART_CR2_LINEN;
 80017b0:	2380      	movs	r3, #128	; 0x80
 80017b2:	01db      	lsls	r3, r3, #7
 80017b4:	4313      	orrs	r3, r2
 80017b6:	6043      	str	r3, [r0, #4]
 80017b8:	e7f9      	b.n	80017ae <USART_LINCmd+0xe>
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	ffffbfff 	.word	0xffffbfff

080017c0 <USART_HalfDuplexCmd>:
  * @param  NewState: new state of the USART Communication.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_HalfDuplexCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80017c0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80017c2:	2900      	cmp	r1, #0
 80017c4:	d104      	bne.n	80017d0 <USART_HalfDuplexCmd+0x10>
    USARTx->CR3 |= USART_CR3_HDSEL;
  }
  else
  {
    /* Disable the Half-Duplex mode by clearing the HDSEL bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_HDSEL);
 80017c6:	6883      	ldr	r3, [r0, #8]
 80017c8:	2208      	movs	r2, #8
 80017ca:	4393      	bics	r3, r2
 80017cc:	6083      	str	r3, [r0, #8]
  }
}
 80017ce:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
  {
    /* Enable the Half-Duplex mode by setting the HDSEL bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_HDSEL;
 80017d0:	6882      	ldr	r2, [r0, #8]
 80017d2:	2308      	movs	r3, #8
 80017d4:	4313      	orrs	r3, r2
 80017d6:	6083      	str	r3, [r0, #8]
 80017d8:	e7f9      	b.n	80017ce <USART_HalfDuplexCmd+0xe>
 80017da:	46c0      	nop			; (mov r8, r8)

080017dc <USART_SetGuardTime>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the USART Guard time */
  USARTx->GTPR &= USART_GTPR_PSC;
 80017dc:	8a03      	ldrh	r3, [r0, #16]
 80017de:	22ff      	movs	r2, #255	; 0xff
 80017e0:	4013      	ands	r3, r2
 80017e2:	8203      	strh	r3, [r0, #16]
  /* Set the USART guard time */
  USARTx->GTPR |= (uint16_t)((uint16_t)USART_GuardTime << 0x08);
 80017e4:	8a03      	ldrh	r3, [r0, #16]
 80017e6:	0209      	lsls	r1, r1, #8
 80017e8:	4319      	orrs	r1, r3
 80017ea:	8201      	strh	r1, [r0, #16]
}
 80017ec:	4770      	bx	lr
 80017ee:	46c0      	nop			; (mov r8, r8)

080017f0 <USART_SmartCardCmd>:
  * @param  NewState: new state of the Smart Card mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_SmartCardCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 80017f0:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80017f2:	2900      	cmp	r1, #0
 80017f4:	d104      	bne.n	8001800 <USART_SmartCardCmd+0x10>
    USARTx->CR3 |= USART_CR3_SCEN;
  }
  else
  {
    /* Disable the SC mode by clearing the SCEN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCEN);
 80017f6:	6883      	ldr	r3, [r0, #8]
 80017f8:	2220      	movs	r2, #32
 80017fa:	4393      	bics	r3, r2
 80017fc:	6083      	str	r3, [r0, #8]
  }
}
 80017fe:	bd00      	pop	{pc}
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the SC mode by setting the SCEN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_SCEN;
 8001800:	6882      	ldr	r2, [r0, #8]
 8001802:	2320      	movs	r3, #32
 8001804:	4313      	orrs	r3, r2
 8001806:	6083      	str	r3, [r0, #8]
 8001808:	e7f9      	b.n	80017fe <USART_SmartCardCmd+0xe>
 800180a:	46c0      	nop			; (mov r8, r8)

0800180c <USART_SmartCardNACKCmd>:
  * @param  NewState: new state of the NACK transmission.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_SmartCardNACKCmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 800180c:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 800180e:	2900      	cmp	r1, #0
 8001810:	d104      	bne.n	800181c <USART_SmartCardNACKCmd+0x10>
    USARTx->CR3 |= USART_CR3_NACK;
  }
  else
  {
    /* Disable the NACK transmission by clearing the NACK bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_NACK);
 8001812:	6883      	ldr	r3, [r0, #8]
 8001814:	2210      	movs	r2, #16
 8001816:	4393      	bics	r3, r2
 8001818:	6083      	str	r3, [r0, #8]
  }
}
 800181a:	bd00      	pop	{pc}
  assert_param(IS_USART_1_PERIPH(USARTx)); 
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the NACK transmission by setting the NACK bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_NACK;
 800181c:	6882      	ldr	r2, [r0, #8]
 800181e:	2310      	movs	r3, #16
 8001820:	4313      	orrs	r3, r2
 8001822:	6083      	str	r3, [r0, #8]
 8001824:	e7f9      	b.n	800181a <USART_SmartCardNACKCmd+0xe>
 8001826:	46c0      	nop			; (mov r8, r8)

08001828 <USART_SetAutoRetryCount>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 8001828:	6882      	ldr	r2, [r0, #8]
 800182a:	4b04      	ldr	r3, [pc, #16]	; (800183c <USART_SetAutoRetryCount+0x14>)
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 800182c:	0449      	lsls	r1, r1, #17
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_AUTO_RETRY_COUNTER(USART_AutoCount));
  /* Clear the USART auto retry count */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_SCARCNT);
 800182e:	4013      	ands	r3, r2
 8001830:	6083      	str	r3, [r0, #8]
  /* Set the USART auto retry count*/
  USARTx->CR3 |= (uint32_t)((uint32_t)USART_AutoCount << 0x11);
 8001832:	6883      	ldr	r3, [r0, #8]
 8001834:	4319      	orrs	r1, r3
 8001836:	6081      	str	r1, [r0, #8]
}
 8001838:	4770      	bx	lr
 800183a:	46c0      	nop			; (mov r8, r8)
 800183c:	fff1ffff 	.word	0xfff1ffff

08001840 <USART_SetBlockLength>:
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8001840:	6943      	ldr	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 8001842:	0609      	lsls	r1, r1, #24
{    
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));

  /* Clear the Smart card block length */
  USARTx->RTOR &= (uint32_t)~((uint32_t)USART_RTOR_BLEN);
 8001844:	021b      	lsls	r3, r3, #8
 8001846:	0a1b      	lsrs	r3, r3, #8
 8001848:	6143      	str	r3, [r0, #20]
  /* Set the Smart Card block length */
  USARTx->RTOR |= (uint32_t)((uint32_t)USART_BlockLength << 0x18);
 800184a:	6943      	ldr	r3, [r0, #20]
 800184c:	4319      	orrs	r1, r3
 800184e:	6141      	str	r1, [r0, #20]
}
 8001850:	4770      	bx	lr
 8001852:	46c0      	nop			; (mov r8, r8)

08001854 <USART_IrDAConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_USART_IRDA_MODE(USART_IrDAMode));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IRLP);
 8001854:	6883      	ldr	r3, [r0, #8]
 8001856:	2204      	movs	r2, #4
 8001858:	4393      	bics	r3, r2
 800185a:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_IrDAMode;
 800185c:	6883      	ldr	r3, [r0, #8]
 800185e:	4319      	orrs	r1, r3
 8001860:	6081      	str	r1, [r0, #8]
}
 8001862:	4770      	bx	lr

08001864 <USART_IrDACmd>:
  * @param  NewState: new state of the IrDA mode.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_IrDACmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001864:	b500      	push	{lr}
  /* Check the parameters */
  assert_param(IS_USART_1_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8001866:	2900      	cmp	r1, #0
 8001868:	d104      	bne.n	8001874 <USART_IrDACmd+0x10>
    USARTx->CR3 |= USART_CR3_IREN;
  }
  else
  {
    /* Disable the IrDA mode by clearing the IREN bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_IREN);
 800186a:	6883      	ldr	r3, [r0, #8]
 800186c:	2202      	movs	r2, #2
 800186e:	4393      	bics	r3, r2
 8001870:	6083      	str	r3, [r0, #8]
  }
}
 8001872:	bd00      	pop	{pc}
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
  {
    /* Enable the IrDA mode by setting the IREN bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_IREN;
 8001874:	6882      	ldr	r2, [r0, #8]
 8001876:	2302      	movs	r3, #2
 8001878:	4313      	orrs	r3, r2
 800187a:	6083      	str	r3, [r0, #8]
 800187c:	e7f9      	b.n	8001872 <USART_IrDACmd+0xe>
 800187e:	46c0      	nop			; (mov r8, r8)

08001880 <USART_DECmd>:
  * @param  NewState: new state of the driver enable mode.
  *          This parameter can be: ENABLE or DISABLE.      
  * @retval None
  */
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8001880:	b500      	push	{lr}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8001882:	6882      	ldr	r2, [r0, #8]
void USART_DECmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8001884:	2900      	cmp	r1, #0
 8001886:	d103      	bne.n	8001890 <USART_DECmd+0x10>
    USARTx->CR3 |= USART_CR3_DEM;
  }
  else
  {
    /* Disable the DE functionality by clearing the DEM bit in the CR3 register */
    USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEM);
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <USART_DECmd+0x1c>)
 800188a:	4013      	ands	r3, r2
 800188c:	6083      	str	r3, [r0, #8]
  }
}
 800188e:	bd00      	pop	{pc}
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
  {
    /* Enable the DE functionality by setting the DEM bit in the CR3 register */
    USARTx->CR3 |= USART_CR3_DEM;
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	01db      	lsls	r3, r3, #7
 8001894:	4313      	orrs	r3, r2
 8001896:	6083      	str	r3, [r0, #8]
 8001898:	e7f9      	b.n	800188e <USART_DECmd+0xe>
 800189a:	46c0      	nop			; (mov r8, r8)
 800189c:	ffffbfff 	.word	0xffffbfff

080018a0 <USART_DEPolarityConfig>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_POLARITY(USART_DEPolarity));

  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DEP);
 80018a0:	6882      	ldr	r2, [r0, #8]
 80018a2:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <USART_DEPolarityConfig+0x10>)
 80018a4:	4013      	ands	r3, r2
 80018a6:	6083      	str	r3, [r0, #8]
  USARTx->CR3 |= USART_DEPolarity;
 80018a8:	6883      	ldr	r3, [r0, #8]
 80018aa:	4319      	orrs	r1, r3
 80018ac:	6081      	str	r1, [r0, #8]
}
 80018ae:	4770      	bx	lr
 80018b0:	ffff7fff 	.word	0xffff7fff

080018b4 <USART_SetDEAssertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80018b4:	6802      	ldr	r2, [r0, #0]
 80018b6:	4b04      	ldr	r3, [pc, #16]	; (80018c8 <USART_SetDEAssertionTime+0x14>)
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80018b8:	0549      	lsls	r1, r1, #21
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEAssertionTime)); 

  /* Clear the DE assertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEAT);
 80018ba:	4013      	ands	r3, r2
 80018bc:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE assertion time */
  USARTx->CR1 |=((uint32_t)USART_DEAssertionTime << (uint32_t)0x15);
 80018be:	6803      	ldr	r3, [r0, #0]
 80018c0:	4319      	orrs	r1, r3
 80018c2:	6001      	str	r1, [r0, #0]
}
 80018c4:	4770      	bx	lr
 80018c6:	46c0      	nop			; (mov r8, r8)
 80018c8:	fc1fffff 	.word	0xfc1fffff

080018cc <USART_SetDEDeassertionTime>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80018cc:	6802      	ldr	r2, [r0, #0]
 80018ce:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <USART_SetDEDeassertionTime+0x14>)
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80018d0:	0409      	lsls	r1, r1, #16
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DE_ASSERTION_DEASSERTION_TIME(USART_DEDeassertionTime)); 

  /* Clear the DE deassertion time */
  USARTx->CR1 &= (uint32_t)~((uint32_t)USART_CR1_DEDT);
 80018d2:	4013      	ands	r3, r2
 80018d4:	6003      	str	r3, [r0, #0]
  /* Set the new value for the DE deassertion time */
  USARTx->CR1 |=((uint32_t)USART_DEDeassertionTime << (uint32_t)0x10);
 80018d6:	6803      	ldr	r3, [r0, #0]
 80018d8:	4319      	orrs	r1, r3
 80018da:	6001      	str	r1, [r0, #0]
}
 80018dc:	4770      	bx	lr
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	ffe0ffff 	.word	0xffe0ffff

080018e4 <USART_DMACmd>:
  * @param  NewState: new state of the DMA Request sources.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_DMACmd(USART_TypeDef* USARTx, uint32_t USART_DMAReq, FunctionalState NewState)
{
 80018e4:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80018e6:	6883      	ldr	r3, [r0, #8]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAREQ(USART_DMAReq));  
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 80018e8:	2a00      	cmp	r2, #0
 80018ea:	d102      	bne.n	80018f2 <USART_DMACmd+0xe>
  }
  else
  {
    /* Disable the DMA transfer for selected requests by clearing the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 &= (uint32_t)~USART_DMAReq;
 80018ec:	438b      	bics	r3, r1
 80018ee:	6083      	str	r3, [r0, #8]
  }
}
 80018f0:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the DMA transfer for selected requests by setting the DMAT and/or
       DMAR bits in the USART CR3 register */
    USARTx->CR3 |= USART_DMAReq;
 80018f2:	4319      	orrs	r1, r3
 80018f4:	6081      	str	r1, [r0, #8]
 80018f6:	e7fb      	b.n	80018f0 <USART_DMACmd+0xc>

080018f8 <USART_DMAReceptionErrorConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DMAONERROR(USART_DMAOnError)); 
  
  /* Clear the DMA Reception error detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_DDRE);
 80018f8:	6882      	ldr	r2, [r0, #8]
 80018fa:	4b03      	ldr	r3, [pc, #12]	; (8001908 <USART_DMAReceptionErrorConfig+0x10>)
 80018fc:	4013      	ands	r3, r2
 80018fe:	6083      	str	r3, [r0, #8]
  /* Set the new value for the DMA Reception error detection bit */
  USARTx->CR3 |= USART_DMAOnError;
 8001900:	6883      	ldr	r3, [r0, #8]
 8001902:	4319      	orrs	r1, r3
 8001904:	6081      	str	r1, [r0, #8]
}
 8001906:	4770      	bx	lr
 8001908:	ffffdfff 	.word	0xffffdfff

0800190c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint32_t USART_IT, FunctionalState NewState)
{
 800190c:	b510      	push	{r4, lr}
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 800190e:	24ff      	movs	r4, #255	; 0xff
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001910:	b28b      	uxth	r3, r1
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8001912:	4021      	ands	r1, r4
  itmask = (((uint32_t)0x01) << itpos);
 8001914:	2401      	movs	r4, #1
 8001916:	408c      	lsls	r4, r1
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  usartxbase = (uint32_t)USARTx;
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001918:	0a1b      	lsrs	r3, r3, #8
  
  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
 800191a:	1c21      	adds	r1, r4, #0
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
 800191c:	2b02      	cmp	r3, #2
 800191e:	d00a      	beq.n	8001936 <USART_ITConfig+0x2a>
  {
    usartxbase += 0x04;
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
 8001920:	2b03      	cmp	r3, #3
 8001922:	d00a      	beq.n	800193a <USART_ITConfig+0x2e>
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001924:	6803      	ldr	r3, [r0, #0]
    usartxbase += 0x08;
  }
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
 8001926:	2a00      	cmp	r2, #0
 8001928:	d102      	bne.n	8001930 <USART_ITConfig+0x24>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 800192a:	438b      	bics	r3, r1
 800192c:	6003      	str	r3, [r0, #0]
  }
}
 800192e:	bd10      	pop	{r4, pc}
  else /* The IT is in CR1 register */
  {
  }
  if (NewState != DISABLE)
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8001930:	4319      	orrs	r1, r3
 8001932:	6001      	str	r1, [r0, #0]
 8001934:	e7fb      	b.n	800192e <USART_ITConfig+0x22>
  itpos = USART_IT & IT_MASK;
  itmask = (((uint32_t)0x01) << itpos);
  
  if (usartreg == 0x02) /* The IT is in CR2 register */
  {
    usartxbase += 0x04;
 8001936:	3004      	adds	r0, #4
 8001938:	e7f4      	b.n	8001924 <USART_ITConfig+0x18>
  }
  else if (usartreg == 0x03) /* The IT is in CR3 register */
  {
    usartxbase += 0x08;
 800193a:	3008      	adds	r0, #8
 800193c:	e7f2      	b.n	8001924 <USART_ITConfig+0x18>
 800193e:	46c0      	nop			; (mov r8, r8)

08001940 <USART_RequestCmd>:
  * @param  NewState: new state of the DMA interface when reception error occurs.
  *          This parameter can be: ENABLE or DISABLE.  
  * @retval None
  */
void USART_RequestCmd(USART_TypeDef* USARTx, uint32_t USART_Request, FunctionalState NewState)
{
 8001940:	b500      	push	{lr}

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 8001942:	8b03      	ldrh	r3, [r0, #24]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_REQUEST(USART_Request));
  assert_param(IS_FUNCTIONAL_STATE(NewState)); 

  if (NewState != DISABLE)
 8001944:	2a00      	cmp	r2, #0
 8001946:	d102      	bne.n	800194e <USART_RequestCmd+0xe>
  }
  else
  {
    /* Disable the USART ReQuest by clearing the dedicated request bit in the RQR
       register.*/
    USARTx->RQR &= (uint32_t)~USART_Request;
 8001948:	438b      	bics	r3, r1
 800194a:	8303      	strh	r3, [r0, #24]
  }
}
 800194c:	bd00      	pop	{pc}

  if (NewState != DISABLE)
  {
    /* Enable the USART ReQuest by setting the dedicated request bit in the RQR
       register.*/
      USARTx->RQR |= USART_Request;
 800194e:	4319      	orrs	r1, r3
 8001950:	8301      	strh	r1, [r0, #24]
 8001952:	e7fb      	b.n	800194c <USART_RequestCmd+0xc>

08001954 <USART_OverrunDetectionConfig>:
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_OVRDETECTION(USART_OVRDetection));
  
  /* Clear the OVR detection bit */
  USARTx->CR3 &= (uint32_t)~((uint32_t)USART_CR3_OVRDIS);
 8001954:	6882      	ldr	r2, [r0, #8]
 8001956:	4b03      	ldr	r3, [pc, #12]	; (8001964 <USART_OverrunDetectionConfig+0x10>)
 8001958:	4013      	ands	r3, r2
 800195a:	6083      	str	r3, [r0, #8]
  /* Set the new value for the OVR detection bit */
  USARTx->CR3 |= USART_OVRDetection;
 800195c:	6883      	ldr	r3, [r0, #8]
 800195e:	4319      	orrs	r1, r3
 8001960:	6081      	str	r1, [r0, #8]
}
 8001962:	4770      	bx	lr
 8001964:	ffffefff 	.word	0xffffefff

08001968 <USART_GetFlagStatus>:
  FlagStatus bitstatus = RESET;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_FLAG(USART_FLAG));
  
  if ((USARTx->ISR & USART_FLAG) != (uint16_t)RESET)
 8001968:	69c0      	ldr	r0, [r0, #28]
 800196a:	4008      	ands	r0, r1
  }
  else
  {
    bitstatus = RESET;
  }
  return bitstatus;
 800196c:	1e43      	subs	r3, r0, #1
 800196e:	4198      	sbcs	r0, r3
}
 8001970:	4770      	bx	lr
 8001972:	46c0      	nop			; (mov r8, r8)

08001974 <USART_ClearFlag>:
{
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_FLAG(USART_FLAG));
     
  USARTx->ICR = USART_FLAG;
 8001974:	6201      	str	r1, [r0, #32]
}
 8001976:	4770      	bx	lr

08001978 <USART_GetITStatus>:
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 8001978:	22ff      	movs	r2, #255	; 0xff
  *            @arg USART_IT_FE:  Framing Error interrupt.
  *            @arg USART_IT_PE:  Parity Error interrupt.
  * @retval The new state of USART_IT (SET or RESET).
  */
ITStatus USART_GetITStatus(USART_TypeDef* USARTx, uint32_t USART_IT)
{
 800197a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 800197c:	b28b      	uxth	r3, r1
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
 800197e:	400a      	ands	r2, r1
  itmask = (uint32_t)0x01 << itmask;
 8001980:	2401      	movs	r4, #1
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_GET_IT(USART_IT)); 
  
  /* Get the USART register index */
  usartreg = (((uint16_t)USART_IT) >> 0x08);
 8001982:	0a1b      	lsrs	r3, r3, #8
  /* Get the interrupt position */
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
 8001984:	4094      	lsls	r4, r2
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
 8001986:	2b01      	cmp	r3, #1
 8001988:	d00f      	beq.n	80019aa <USART_GetITStatus+0x32>
  {
    itmask &= USARTx->CR1;
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
 800198a:	2b02      	cmp	r3, #2
 800198c:	d010      	beq.n	80019b0 <USART_GetITStatus+0x38>
  {
    itmask &= USARTx->CR2;
  }
  else /* The IT  is in CR3 register */
  {
    itmask &= USARTx->CR3;
 800198e:	6883      	ldr	r3, [r0, #8]
 8001990:	4023      	ands	r3, r4
  }
  
  bitpos = USART_IT >> 0x10;
 8001992:	0c09      	lsrs	r1, r1, #16
  bitpos = (uint32_t)0x01 << bitpos;
 8001994:	2201      	movs	r2, #1
 8001996:	408a      	lsls	r2, r1
  bitpos &= USARTx->ISR;
 8001998:	69c0      	ldr	r0, [r0, #28]
  {
    itmask &= USARTx->CR3;
  }
  
  bitpos = USART_IT >> 0x10;
  bitpos = (uint32_t)0x01 << bitpos;
 800199a:	1c11      	adds	r1, r2, #0
  bitpos &= USARTx->ISR;
 800199c:	4008      	ands	r0, r1
  if ((itmask != (uint16_t)RESET)&&(bitpos != (uint16_t)RESET))
 800199e:	1e5a      	subs	r2, r3, #1
 80019a0:	4193      	sbcs	r3, r2
 80019a2:	1e41      	subs	r1, r0, #1
 80019a4:	4188      	sbcs	r0, r1
  else
  {
    bitstatus = RESET;
  }
  
  return bitstatus;  
 80019a6:	4018      	ands	r0, r3
}
 80019a8:	bd10      	pop	{r4, pc}
  itmask = USART_IT & IT_MASK;
  itmask = (uint32_t)0x01 << itmask;
  
  if (usartreg == 0x01) /* The IT  is in CR1 register */
  {
    itmask &= USARTx->CR1;
 80019aa:	6803      	ldr	r3, [r0, #0]
 80019ac:	4023      	ands	r3, r4
 80019ae:	e7f0      	b.n	8001992 <USART_GetITStatus+0x1a>
  }
  else if (usartreg == 0x02) /* The IT  is in CR2 register */
  {
    itmask &= USARTx->CR2;
 80019b0:	6843      	ldr	r3, [r0, #4]
 80019b2:	4023      	ands	r3, r4
 80019b4:	e7ed      	b.n	8001992 <USART_GetITStatus+0x1a>
 80019b6:	46c0      	nop			; (mov r8, r8)

080019b8 <USART_ClearITPendingBit>:
  uint32_t bitpos = 0, itmask = 0;
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_CLEAR_IT(USART_IT)); 
  
  bitpos = USART_IT >> 0x10;
 80019b8:	0c09      	lsrs	r1, r1, #16
  itmask = ((uint32_t)0x01 << (uint32_t)bitpos);
 80019ba:	2301      	movs	r3, #1
 80019bc:	408b      	lsls	r3, r1
  USARTx->ICR = (uint32_t)itmask;
 80019be:	6203      	str	r3, [r0, #32]
}
 80019c0:	4770      	bx	lr
 80019c2:	46c0      	nop			; (mov r8, r8)

080019c4 <__aeabi_uidiv>:
 80019c4:	2900      	cmp	r1, #0
 80019c6:	d034      	beq.n	8001a32 <.udivsi3_skip_div0_test+0x6a>

080019c8 <.udivsi3_skip_div0_test>:
 80019c8:	2301      	movs	r3, #1
 80019ca:	2200      	movs	r2, #0
 80019cc:	b410      	push	{r4}
 80019ce:	4288      	cmp	r0, r1
 80019d0:	d32c      	bcc.n	8001a2c <.udivsi3_skip_div0_test+0x64>
 80019d2:	2401      	movs	r4, #1
 80019d4:	0724      	lsls	r4, r4, #28
 80019d6:	42a1      	cmp	r1, r4
 80019d8:	d204      	bcs.n	80019e4 <.udivsi3_skip_div0_test+0x1c>
 80019da:	4281      	cmp	r1, r0
 80019dc:	d202      	bcs.n	80019e4 <.udivsi3_skip_div0_test+0x1c>
 80019de:	0109      	lsls	r1, r1, #4
 80019e0:	011b      	lsls	r3, r3, #4
 80019e2:	e7f8      	b.n	80019d6 <.udivsi3_skip_div0_test+0xe>
 80019e4:	00e4      	lsls	r4, r4, #3
 80019e6:	42a1      	cmp	r1, r4
 80019e8:	d204      	bcs.n	80019f4 <.udivsi3_skip_div0_test+0x2c>
 80019ea:	4281      	cmp	r1, r0
 80019ec:	d202      	bcs.n	80019f4 <.udivsi3_skip_div0_test+0x2c>
 80019ee:	0049      	lsls	r1, r1, #1
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	e7f8      	b.n	80019e6 <.udivsi3_skip_div0_test+0x1e>
 80019f4:	4288      	cmp	r0, r1
 80019f6:	d301      	bcc.n	80019fc <.udivsi3_skip_div0_test+0x34>
 80019f8:	1a40      	subs	r0, r0, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	084c      	lsrs	r4, r1, #1
 80019fe:	42a0      	cmp	r0, r4
 8001a00:	d302      	bcc.n	8001a08 <.udivsi3_skip_div0_test+0x40>
 8001a02:	1b00      	subs	r0, r0, r4
 8001a04:	085c      	lsrs	r4, r3, #1
 8001a06:	4322      	orrs	r2, r4
 8001a08:	088c      	lsrs	r4, r1, #2
 8001a0a:	42a0      	cmp	r0, r4
 8001a0c:	d302      	bcc.n	8001a14 <.udivsi3_skip_div0_test+0x4c>
 8001a0e:	1b00      	subs	r0, r0, r4
 8001a10:	089c      	lsrs	r4, r3, #2
 8001a12:	4322      	orrs	r2, r4
 8001a14:	08cc      	lsrs	r4, r1, #3
 8001a16:	42a0      	cmp	r0, r4
 8001a18:	d302      	bcc.n	8001a20 <.udivsi3_skip_div0_test+0x58>
 8001a1a:	1b00      	subs	r0, r0, r4
 8001a1c:	08dc      	lsrs	r4, r3, #3
 8001a1e:	4322      	orrs	r2, r4
 8001a20:	2800      	cmp	r0, #0
 8001a22:	d003      	beq.n	8001a2c <.udivsi3_skip_div0_test+0x64>
 8001a24:	091b      	lsrs	r3, r3, #4
 8001a26:	d001      	beq.n	8001a2c <.udivsi3_skip_div0_test+0x64>
 8001a28:	0909      	lsrs	r1, r1, #4
 8001a2a:	e7e3      	b.n	80019f4 <.udivsi3_skip_div0_test+0x2c>
 8001a2c:	1c10      	adds	r0, r2, #0
 8001a2e:	bc10      	pop	{r4}
 8001a30:	4770      	bx	lr
 8001a32:	2800      	cmp	r0, #0
 8001a34:	d001      	beq.n	8001a3a <.udivsi3_skip_div0_test+0x72>
 8001a36:	2000      	movs	r0, #0
 8001a38:	43c0      	mvns	r0, r0
 8001a3a:	b407      	push	{r0, r1, r2}
 8001a3c:	4802      	ldr	r0, [pc, #8]	; (8001a48 <.udivsi3_skip_div0_test+0x80>)
 8001a3e:	a102      	add	r1, pc, #8	; (adr r1, 8001a48 <.udivsi3_skip_div0_test+0x80>)
 8001a40:	1840      	adds	r0, r0, r1
 8001a42:	9002      	str	r0, [sp, #8]
 8001a44:	bd03      	pop	{r0, r1, pc}
 8001a46:	46c0      	nop			; (mov r8, r8)
 8001a48:	00000019 	.word	0x00000019

08001a4c <__aeabi_uidivmod>:
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	d0f0      	beq.n	8001a32 <.udivsi3_skip_div0_test+0x6a>
 8001a50:	b503      	push	{r0, r1, lr}
 8001a52:	f7ff ffb9 	bl	80019c8 <.udivsi3_skip_div0_test>
 8001a56:	bc0e      	pop	{r1, r2, r3}
 8001a58:	4342      	muls	r2, r0
 8001a5a:	1a89      	subs	r1, r1, r2
 8001a5c:	4718      	bx	r3
 8001a5e:	46c0      	nop			; (mov r8, r8)

08001a60 <__aeabi_idiv0>:
 8001a60:	4770      	bx	lr
 8001a62:	46c0      	nop			; (mov r8, r8)

08001a64 <__libc_init_array>:
 8001a64:	b570      	push	{r4, r5, r6, lr}
 8001a66:	4d0c      	ldr	r5, [pc, #48]	; (8001a98 <__libc_init_array+0x34>)
 8001a68:	4e0c      	ldr	r6, [pc, #48]	; (8001a9c <__libc_init_array+0x38>)
 8001a6a:	2400      	movs	r4, #0
 8001a6c:	1b76      	subs	r6, r6, r5
 8001a6e:	10b6      	asrs	r6, r6, #2
 8001a70:	d004      	beq.n	8001a7c <__libc_init_array+0x18>
 8001a72:	cd08      	ldmia	r5!, {r3}
 8001a74:	3401      	adds	r4, #1
 8001a76:	4798      	blx	r3
 8001a78:	42a6      	cmp	r6, r4
 8001a7a:	d1fa      	bne.n	8001a72 <__libc_init_array+0xe>
 8001a7c:	f000 faaa 	bl	8001fd4 <_init>
 8001a80:	4d07      	ldr	r5, [pc, #28]	; (8001aa0 <__libc_init_array+0x3c>)
 8001a82:	4e08      	ldr	r6, [pc, #32]	; (8001aa4 <__libc_init_array+0x40>)
 8001a84:	2400      	movs	r4, #0
 8001a86:	1b76      	subs	r6, r6, r5
 8001a88:	10b6      	asrs	r6, r6, #2
 8001a8a:	d004      	beq.n	8001a96 <__libc_init_array+0x32>
 8001a8c:	cd08      	ldmia	r5!, {r3}
 8001a8e:	3401      	adds	r4, #1
 8001a90:	4798      	blx	r3
 8001a92:	42a6      	cmp	r6, r4
 8001a94:	d1fa      	bne.n	8001a8c <__libc_init_array+0x28>
 8001a96:	bd70      	pop	{r4, r5, r6, pc}
	...

08001aa8 <USART1_Config>:
    {
    }
}

void USART1_Config(void)
  {
 8001aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001aaa:	b08b      	sub	sp, #44	; 0x2c
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001aac:	2401      	movs	r4, #1
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001aae:	2600      	movs	r6, #0
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
 8001ab0:	a801      	add	r0, sp, #4
 8001ab2:	231b      	movs	r3, #27
 8001ab4:	7003      	strb	r3, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001ab6:	7046      	strb	r6, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001ab8:	7084      	strb	r4, [r0, #2]
    NVIC_Init(&NVIC_InitStructure);
 8001aba:	f7fe fbff 	bl	80002bc <NVIC_Init>
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8001abe:	2396      	movs	r3, #150	; 0x96
 8001ac0:	019b      	lsls	r3, r3, #6
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001ac2:	2080      	movs	r0, #128	; 0x80
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8001ac4:	9304      	str	r3, [sp, #16]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001ac6:	1c21      	adds	r1, r4, #0
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001ac8:	230c      	movs	r3, #12

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001aca:	0280      	lsls	r0, r0, #10
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001acc:	9308      	str	r3, [sp, #32]
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001ace:	9605      	str	r6, [sp, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001ad0:	9606      	str	r6, [sp, #24]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8001ad2:	9607      	str	r6, [sp, #28]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001ad4:	9609      	str	r6, [sp, #36]	; 0x24
    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8001ad6:	2790      	movs	r7, #144	; 0x90
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001ad8:	f7fe fe3a 	bl	8000750 <RCC_AHBPeriphClockCmd>
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001adc:	2080      	movs	r0, #128	; 0x80

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8001ade:	05ff      	lsls	r7, r7, #23
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
 8001ae0:	1c21      	adds	r1, r4, #0
 8001ae2:	01c0      	lsls	r0, r0, #7
 8001ae4:	f7fe fe42 	bl	800076c <RCC_APB2PeriphClockCmd>

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_1);
 8001ae8:	1c38      	adds	r0, r7, #0
 8001aea:	1c22      	adds	r2, r4, #0
 8001aec:	2109      	movs	r1, #9
 8001aee:	f7fe fbd3 	bl	8000298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);
 8001af2:	1c22      	adds	r2, r4, #0
 8001af4:	1c38      	adds	r0, r7, #0
 8001af6:	210a      	movs	r1, #10
 8001af8:	f7fe fbce 	bl	8000298 <GPIO_PinAFConfig>

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001afc:	2380      	movs	r3, #128	; 0x80
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	ad02      	add	r5, sp, #8
 8001b02:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b04:	2302      	movs	r3, #2
 8001b06:	712b      	strb	r3, [r5, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b08:	1c38      	adds	r0, r7, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b0a:	2303      	movs	r3, #3
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b0c:	1c29      	adds	r1, r5, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001b0e:	716b      	strb	r3, [r5, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b10:	71ae      	strb	r6, [r5, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001b12:	71ec      	strb	r4, [r5, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b14:	f7fe fb28 	bl	8000168 <GPIO_Init>

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b18:	1c29      	adds	r1, r5, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001b1a:	2380      	movs	r3, #128	; 0x80
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // USART configuration
    USART_Init(USART1, &USART_InitStructure);
 8001b1c:	4d07      	ldr	r5, [pc, #28]	; (8001b3c <USART1_Config+0x94>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001b1e:	00db      	lsls	r3, r3, #3
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b20:	1c38      	adds	r0, r7, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001b22:	9302      	str	r3, [sp, #8]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b24:	f7fe fb20 	bl	8000168 <GPIO_Init>

    // USART configuration
    USART_Init(USART1, &USART_InitStructure);
 8001b28:	1c28      	adds	r0, r5, #0
 8001b2a:	a904      	add	r1, sp, #16
 8001b2c:	f7ff fcc6 	bl	80014bc <USART_Init>

    // Enable USART
    USART_Cmd(USART1, ENABLE);
 8001b30:	1c28      	adds	r0, r5, #0
 8001b32:	1c21      	adds	r1, r4, #0
 8001b34:	f7ff fd34 	bl	80015a0 <USART_Cmd>
  }
 8001b38:	b00b      	add	sp, #44	; 0x2c
 8001b3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b3c:	40013800 	.word	0x40013800

08001b40 <USART2_Config>:
  
void USART2_Config(void)
  {
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	b08a      	sub	sp, #40	; 0x28
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b44:	2401      	movs	r4, #1
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001b46:	a801      	add	r0, sp, #4
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001b48:	2500      	movs	r5, #0
  {
    GPIO_InitTypeDef GPIO_InitStructure;
    USART_InitTypeDef USART_InitStructure;
    NVIC_InitTypeDef NVIC_InitStructure;

    NVIC_InitStructure.NVIC_IRQChannel = USART2_IRQn;
 8001b4a:	231c      	movs	r3, #28
 8001b4c:	7003      	strb	r3, [r0, #0]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001b4e:	7045      	strb	r5, [r0, #1]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001b50:	7084      	strb	r4, [r0, #2]
    NVIC_Init(&NVIC_InitStructure);
 8001b52:	f7fe fbb3 	bl	80002bc <NVIC_Init>
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001b56:	9505      	str	r5, [sp, #20]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001b58:	9506      	str	r5, [sp, #24]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8001b5a:	9507      	str	r5, [sp, #28]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001b5c:	9509      	str	r5, [sp, #36]	; 0x24
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8001b5e:	2396      	movs	r3, #150	; 0x96
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001b60:	2580      	movs	r5, #128	; 0x80
 8001b62:	02ad      	lsls	r5, r5, #10
     *  - Odd parity
     *  - Hardware flow control disabled (RTS and CTS signals)
     *  - Receive and transmit enabled
     */

    USART_InitStructure.USART_BaudRate = 9600;
 8001b64:	019b      	lsls	r3, r3, #6
 8001b66:	9304      	str	r3, [sp, #16]
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001b68:	1c28      	adds	r0, r5, #0
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001b6a:	230c      	movs	r3, #12

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001b6c:	1c21      	adds	r1, r4, #0
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8001b6e:	2690      	movs	r6, #144	; 0x90
    USART_InitStructure.USART_BaudRate = 9600;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001b70:	9308      	str	r3, [sp, #32]
    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8001b72:	05f6      	lsls	r6, r6, #23
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;

    // Enable peripheral clock
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001b74:	f7fe fdec 	bl	8000750 <RCC_AHBPeriphClockCmd>
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8001b78:	1c28      	adds	r0, r5, #0
 8001b7a:	1c21      	adds	r1, r4, #0
 8001b7c:	f7fe fe04 	bl	8000788 <RCC_APB1PeriphClockCmd>

    // Config pins alternate function
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_1);
 8001b80:	1c30      	adds	r0, r6, #0
 8001b82:	1c22      	adds	r2, r4, #0
 8001b84:	2102      	movs	r1, #2
 8001b86:	f7fe fb87 	bl	8000298 <GPIO_PinAFConfig>
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);
 8001b8a:	1c22      	adds	r2, r4, #0
 8001b8c:	1c30      	adds	r0, r6, #0
 8001b8e:	2103      	movs	r1, #3
 8001b90:	f7fe fb82 	bl	8000298 <GPIO_PinAFConfig>

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
 8001b94:	2304      	movs	r3, #4
 8001b96:	ad02      	add	r5, sp, #8
 8001b98:	9302      	str	r3, [sp, #8]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001b9a:	2302      	movs	r3, #2
 8001b9c:	712b      	strb	r3, [r5, #4]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b9e:	1c30      	adds	r0, r6, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ba0:	2303      	movs	r3, #3
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ba2:	1c29      	adds	r1, r5, #0
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_1);

    // Configure USART Tx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_2;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001ba4:	716b      	strb	r3, [r5, #5]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
 8001ba6:	71ac      	strb	r4, [r5, #6]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
 8001ba8:	71ec      	strb	r4, [r5, #7]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001baa:	f7fe fadd 	bl	8000168 <GPIO_Init>

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bae:	1c29      	adds	r1, r5, #0

    // USART configuration
    USART_Init(USART2, &USART_InitStructure);
 8001bb0:	4d07      	ldr	r5, [pc, #28]	; (8001bd0 <USART2_Config+0x90>)
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8001bb2:	2308      	movs	r3, #8
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bb4:	1c30      	adds	r0, r6, #0
    GPIO_InitStructure.GPIO_OType = GPIO_OType_OD;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;
    GPIO_Init(GPIOA, &GPIO_InitStructure);

    // Configure USART Rx as alternate function push-pull
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3;
 8001bb6:	9302      	str	r3, [sp, #8]
    GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001bb8:	f7fe fad6 	bl	8000168 <GPIO_Init>

    // USART configuration
    USART_Init(USART2, &USART_InitStructure);
 8001bbc:	1c28      	adds	r0, r5, #0
 8001bbe:	a904      	add	r1, sp, #16
 8001bc0:	f7ff fc7c 	bl	80014bc <USART_Init>

    // Enable USART
    USART_Cmd(USART2, ENABLE);
 8001bc4:	1c28      	adds	r0, r5, #0
 8001bc6:	1c21      	adds	r1, r4, #0
 8001bc8:	f7ff fcea 	bl	80015a0 <USART_Cmd>
  }
 8001bcc:	b00a      	add	sp, #40	; 0x28
 8001bce:	bd70      	pop	{r4, r5, r6, pc}
 8001bd0:	40004400 	.word	0x40004400

08001bd4 <LED_Config>:

void LED_Config(void)
  {
 8001bd4:	b507      	push	{r0, r1, r2, lr}
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 8001bd6:	2080      	movs	r0, #128	; 0x80
 8001bd8:	0300      	lsls	r0, r0, #12
 8001bda:	2101      	movs	r1, #1
 8001bdc:	f7fe fdb8 	bl	8000750 <RCC_AHBPeriphClockCmd>

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001be0:	23c0      	movs	r3, #192	; 0xc0
 8001be2:	009b      	lsls	r3, r3, #2
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001be4:	4669      	mov	r1, sp
void LED_Config(void)
  {
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
 8001be6:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001be8:	2301      	movs	r3, #1
 8001bea:	710b      	strb	r3, [r1, #4]
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bec:	2203      	movs	r2, #3
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001bee:	2300      	movs	r3, #0
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001bf0:	4803      	ldr	r0, [pc, #12]	; (8001c00 <LED_Config+0x2c>)
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);

    GPIO_InitTypeDef GPIO_InitStructure;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8 | GPIO_Pin_9;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
    GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001bf2:	718b      	strb	r3, [r1, #6]
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
 8001bf4:	714a      	strb	r2, [r1, #5]
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001bf6:	71cb      	strb	r3, [r1, #7]
    GPIO_Init(GPIOC, &GPIO_InitStructure);
 8001bf8:	f7fe fab6 	bl	8000168 <GPIO_Init>

  }
 8001bfc:	bd07      	pop	{r0, r1, r2, pc}
 8001bfe:	46c0      	nop			; (mov r8, r8)
 8001c00:	48000800 	.word	0x48000800

08001c04 <TIMER_Config>:

void TIMER_Config(void)
  {
 8001c04:	b530      	push	{r4, r5, lr}
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

    // TIM3 clock enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001c06:	2101      	movs	r1, #1
    GPIO_Init(GPIOC, &GPIO_InitStructure);

  }

void TIMER_Config(void)
  {
 8001c08:	b085      	sub	sp, #20
    NVIC_InitTypeDef NVIC_InitStructure;
    TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;

    // TIM3 clock enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
 8001c0a:	2002      	movs	r0, #2
 8001c0c:	f7fe fdbc 	bl	8000788 <RCC_APB1PeriphClockCmd>

    // Enable the TIM3 gloabal Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001c10:	2500      	movs	r5, #0

    // TIM3 clock enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    // Enable the TIM3 gloabal Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001c12:	2310      	movs	r3, #16
 8001c14:	466a      	mov	r2, sp
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c16:	2401      	movs	r4, #1
    NVIC_Init(&NVIC_InitStructure);
 8001c18:	4668      	mov	r0, sp

    // TIM3 clock enable
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);

    // Enable the TIM3 gloabal Interrupt
    NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
 8001c1a:	7013      	strb	r3, [r2, #0]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
 8001c1c:	7055      	strb	r5, [r2, #1]
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 8001c1e:	7094      	strb	r4, [r2, #2]
    NVIC_Init(&NVIC_InitStructure);
 8001c20:	f7fe fb4c 	bl	80002bc <NVIC_Init>


    TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8001c24:	a901      	add	r1, sp, #4
    TIM_TimeBaseStructure.TIM_Prescaler = 100;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
 8001c26:	810d      	strh	r5, [r1, #8]
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
 8001c28:	804d      	strh	r5, [r1, #2]
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);


    TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <TIMER_Config+0x4c>)
    TIM_TimeBaseStructure.TIM_Prescaler = 100;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8001c2c:	4d09      	ldr	r5, [pc, #36]	; (8001c54 <TIMER_Config+0x50>)
    NVIC_InitStructure.NVIC_IRQChannelPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);


    TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
 8001c2e:	604a      	str	r2, [r1, #4]
    TIM_TimeBaseStructure.TIM_Prescaler = 100;
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8001c30:	1c28      	adds	r0, r5, #0
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);


    TIM_TimeBaseStructure.TIM_Period = 0xFFFF;
    TIM_TimeBaseStructure.TIM_Prescaler = 100;
 8001c32:	2264      	movs	r2, #100	; 0x64
 8001c34:	800a      	strh	r2, [r1, #0]
    TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
 8001c36:	f7fe feb7 	bl	80009a8 <TIM_TimeBaseInit>

    TIM_ITConfig(TIM3, TIM_IT_CC1, ENABLE);
 8001c3a:	1c28      	adds	r0, r5, #0
 8001c3c:	1c22      	adds	r2, r4, #0
 8001c3e:	2102      	movs	r1, #2
 8001c40:	f7ff fb1c 	bl	800127c <TIM_ITConfig>

    TIM_Cmd(TIM3, ENABLE);
 8001c44:	1c28      	adds	r0, r5, #0
 8001c46:	1c21      	adds	r1, r4, #0
 8001c48:	f7fe ff4a 	bl	8000ae0 <TIM_Cmd>

  }
 8001c4c:	b005      	add	sp, #20
 8001c4e:	bd30      	pop	{r4, r5, pc}
 8001c50:	0000ffff 	.word	0x0000ffff
 8001c54:	40000400 	.word	0x40000400

08001c58 <USART2_SetSpeed>:


void USART2_SetSpeed(int speed)
  {
 8001c58:	b530      	push	{r4, r5, lr}
    USART_Cmd(USART2, DISABLE);
 8001c5a:	4c0c      	ldr	r4, [pc, #48]	; (8001c8c <USART2_SetSpeed+0x34>)

  }


void USART2_SetSpeed(int speed)
  {
 8001c5c:	b087      	sub	sp, #28
 8001c5e:	1c05      	adds	r5, r0, #0
    USART_Cmd(USART2, DISABLE);
 8001c60:	2100      	movs	r1, #0
 8001c62:	1c20      	adds	r0, r4, #0
 8001c64:	f7ff fc9c 	bl	80015a0 <USART_Cmd>
    
    USART_InitTypeDef USART_InitStructure;
  
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	9301      	str	r3, [sp, #4]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
 8001c6c:	9302      	str	r3, [sp, #8]
    USART_InitStructure.USART_Parity = USART_Parity_No;
 8001c6e:	9303      	str	r3, [sp, #12]
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8001c70:	9305      	str	r3, [sp, #20]
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    
    USART_Init(USART2, &USART_InitStructure);
 8001c72:	1c20      	adds	r0, r4, #0
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c74:	230c      	movs	r3, #12
    
    USART_Init(USART2, &USART_InitStructure);
 8001c76:	4669      	mov	r1, sp
    USART_InitStructure.USART_BaudRate = speed;
    USART_InitStructure.USART_WordLength = USART_WordLength_8b;
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8001c78:	9304      	str	r3, [sp, #16]
  {
    USART_Cmd(USART2, DISABLE);
    
    USART_InitTypeDef USART_InitStructure;
  
    USART_InitStructure.USART_BaudRate = speed;
 8001c7a:	9500      	str	r5, [sp, #0]
    USART_InitStructure.USART_StopBits = USART_StopBits_1;
    USART_InitStructure.USART_Parity = USART_Parity_No;
    USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
    
    USART_Init(USART2, &USART_InitStructure);
 8001c7c:	f7ff fc1e 	bl	80014bc <USART_Init>

    // Enable USART
    USART_Cmd(USART2, ENABLE);
 8001c80:	1c20      	adds	r0, r4, #0
 8001c82:	2101      	movs	r1, #1
 8001c84:	f7ff fc8c 	bl	80015a0 <USART_Cmd>
  }
 8001c88:	b007      	add	sp, #28
 8001c8a:	bd30      	pop	{r4, r5, pc}
 8001c8c:	40004400 	.word	0x40004400

08001c90 <TReadByte>:
    binary = 0;
  }
  
char TReadByte(void)
  {
    input = 0;
 8001c90:	4b0e      	ldr	r3, [pc, #56]	; (8001ccc <TReadByte+0x3c>)
 8001c92:	2200      	movs	r2, #0
    
    binary = 0;
  }
  
char TReadByte(void)
  {
 8001c94:	b510      	push	{r4, lr}
    input = 0;
 8001c96:	601a      	str	r2, [r3, #0]
    binary = 1;
 8001c98:	4b0d      	ldr	r3, [pc, #52]	; (8001cd0 <TReadByte+0x40>)
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	601a      	str	r2, [r3, #0]
 8001c9e:	2408      	movs	r4, #8
    
    //rx = 1;
    char y;
    for(int i = 0; i < 8; i++)
      {
        USART_SendData(USART2, 0xFF);
 8001ca0:	480c      	ldr	r0, [pc, #48]	; (8001cd4 <TReadByte+0x44>)
 8001ca2:	21ff      	movs	r1, #255	; 0xff
 8001ca4:	f7ff fd40 	bl	8001728 <USART_SendData>
 8001ca8:	3c01      	subs	r4, #1
        y = USART_ReceiveData(USART2);
 8001caa:	480a      	ldr	r0, [pc, #40]	; (8001cd4 <TReadByte+0x44>)
 8001cac:	f7ff fd40 	bl	8001730 <USART_ReceiveData>
    input = 0;
    binary = 1;
    
    //rx = 1;
    char y;
    for(int i = 0; i < 8; i++)
 8001cb0:	2c00      	cmp	r4, #0
 8001cb2:	d1f5      	bne.n	8001ca0 <TReadByte+0x10>
        y = USART_ReceiveData(USART2);
        //rx = 1;
        //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) != RESET);
      }
    //while(rx);
    if(y ==0)
 8001cb4:	b2c0      	uxtb	r0, r0
 8001cb6:	2800      	cmp	r0, #0
 8001cb8:	d105      	bne.n	8001cc6 <TReadByte+0x36>
      GPIOC->ODR ^= GPIO_Pin_8;
 8001cba:	4b07      	ldr	r3, [pc, #28]	; (8001cd8 <TReadByte+0x48>)
 8001cbc:	2280      	movs	r2, #128	; 0x80
 8001cbe:	8a99      	ldrh	r1, [r3, #20]
 8001cc0:	0052      	lsls	r2, r2, #1
 8001cc2:	404a      	eors	r2, r1
 8001cc4:	829a      	strh	r2, [r3, #20]
      
    char data = (char)input;
    
    //binary = 0;
    return data;
 8001cc6:	4b01      	ldr	r3, [pc, #4]	; (8001ccc <TReadByte+0x3c>)
 8001cc8:	7818      	ldrb	r0, [r3, #0]
  }
 8001cca:	bd10      	pop	{r4, pc}
 8001ccc:	20000020 	.word	0x20000020
 8001cd0:	20000018 	.word	0x20000018
 8001cd4:	40004400 	.word	0x40004400
 8001cd8:	48000800 	.word	0x48000800

08001cdc <main>:
int rx = 0;

char x = 2;

int main(void)
{
 8001cdc:	b508      	push	{r3, lr}
  LED_Config();
 8001cde:	f7ff ff79 	bl	8001bd4 <LED_Config>
  
  USART1_Config();
 8001ce2:	f7ff fee1 	bl	8001aa8 <USART1_Config>
  USART2_Config();
 8001ce6:	f7ff ff2b 	bl	8001b40 <USART2_Config>
  
  TIMER_Config();
 8001cea:	f7ff ff8b 	bl	8001c04 <TIMER_Config>


  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8001cee:	480d      	ldr	r0, [pc, #52]	; (8001d24 <main+0x48>)
 8001cf0:	490d      	ldr	r1, [pc, #52]	; (8001d28 <main+0x4c>)
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	f7ff fe0a 	bl	800190c <USART_ITConfig>
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001cf8:	480c      	ldr	r0, [pc, #48]	; (8001d2c <main+0x50>)
 8001cfa:	490b      	ldr	r1, [pc, #44]	; (8001d28 <main+0x4c>)
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f7ff fe05 	bl	800190c <USART_ITConfig>
  
  rx = 1;
 8001d02:	4b0b      	ldr	r3, [pc, #44]	; (8001d30 <main+0x54>)
 8001d04:	2201      	movs	r2, #1
  USART_SendData(USART2, 0xF0);
 8001d06:	21f0      	movs	r1, #240	; 0xf0
 8001d08:	4808      	ldr	r0, [pc, #32]	; (8001d2c <main+0x50>)


  USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
  USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
  
  rx = 1;
 8001d0a:	601a      	str	r2, [r3, #0]
  USART_SendData(USART2, 0xF0);
 8001d0c:	f7ff fd0c 	bl	8001728 <USART_SendData>
  //while(USART_GetFlagStatus(USART2, USART_FLAG_RXNE) != RESET);
  
  USART2_SetSpeed(115200);
 8001d10:	20e1      	movs	r0, #225	; 0xe1
 8001d12:	0240      	lsls	r0, r0, #9
 8001d14:	f7ff ffa0 	bl	8001c58 <USART2_SetSpeed>
  
  //TWriteByte(0xCC);
  //TWriteByte(0xBE);
  x = TReadByte();
 8001d18:	f7ff ffba 	bl	8001c90 <TReadByte>
 8001d1c:	4b05      	ldr	r3, [pc, #20]	; (8001d34 <main+0x58>)
 8001d1e:	7018      	strb	r0, [r3, #0]
 8001d20:	e7fe      	b.n	8001d20 <main+0x44>
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40013800 	.word	0x40013800
 8001d28:	00050105 	.word	0x00050105
 8001d2c:	40004400 	.word	0x40004400
 8001d30:	20000014 	.word	0x20000014
 8001d34:	20000010 	.word	0x20000010

08001d38 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d38:	4b35      	ldr	r3, [pc, #212]	; (8001e10 <SystemInit+0xd8>)
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8001d3a:	b513      	push	{r0, r1, r4, lr}
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	4311      	orrs	r1, r2
 8001d42:	6019      	str	r1, [r3, #0]

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001d44:	6858      	ldr	r0, [r3, #4]
 8001d46:	4933      	ldr	r1, [pc, #204]	; (8001e14 <SystemInit+0xdc>)

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001d48:	240f      	movs	r4, #15
{    
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;

  /* Reset SW[1:0], HPRE[3:0], PPRE[2:0], ADCPRE and MCOSEL[2:0] bits */
  RCC->CFGR &= (uint32_t)0xF8FFB80C;
 8001d4a:	4001      	ands	r1, r0
 8001d4c:	6059      	str	r1, [r3, #4]
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001d4e:	6818      	ldr	r0, [r3, #0]
 8001d50:	4931      	ldr	r1, [pc, #196]	; (8001e18 <SystemInit+0xe0>)
 8001d52:	4001      	ands	r1, r0
 8001d54:	6019      	str	r1, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	4930      	ldr	r1, [pc, #192]	; (8001e1c <SystemInit+0xe4>)
 8001d5a:	4001      	ands	r1, r0
 8001d5c:	6019      	str	r1, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE and PLLMUL[3:0] bits */
  RCC->CFGR &= (uint32_t)0xFFC0FFFF;
 8001d5e:	6858      	ldr	r0, [r3, #4]
 8001d60:	492f      	ldr	r1, [pc, #188]	; (8001e20 <SystemInit+0xe8>)
 8001d62:	4008      	ands	r0, r1
 8001d64:	6058      	str	r0, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= (uint32_t)0xFFFFFFF0;
 8001d66:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8001d68:	43a0      	bics	r0, r4
 8001d6a:	62d8      	str	r0, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;
 8001d6c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8001d6e:	482d      	ldr	r0, [pc, #180]	; (8001e24 <SystemInit+0xec>)
 8001d70:	4020      	ands	r0, r4
 8001d72:	6318      	str	r0, [r3, #48]	; 0x30

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8001d74:	6b58      	ldr	r0, [r3, #52]	; 0x34
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001d76:	2480      	movs	r4, #128	; 0x80

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8001d78:	4390      	bics	r0, r2

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d7a:	2200      	movs	r2, #0

  /* Reset USARTSW[1:0], I2CSW, CECSW and ADCSW bits */
  RCC->CFGR3 &= (uint32_t)0xFFFFFEAC;

  /* Reset HSI14 bit */
  RCC->CR2 &= (uint32_t)0xFFFFFFFE;
 8001d7c:	6358      	str	r0, [r3, #52]	; 0x34

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001d7e:	609a      	str	r2, [r3, #8]
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001d80:	9200      	str	r2, [sp, #0]
 8001d82:	9201      	str	r2, [sp, #4]
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  
  /* SYSCLK, HCLK, PCLK configuration ----------------------------------------*/
  /* Enable HSE */    
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001d84:	6818      	ldr	r0, [r3, #0]
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	0252      	lsls	r2, r2, #9
 8001d8a:	4302      	orrs	r2, r0
 8001d8c:	601a      	str	r2, [r3, #0]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001d8e:	22a0      	movs	r2, #160	; 0xa0
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001d90:	02a4      	lsls	r4, r4, #10
    StartUpCounter++;  
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001d92:	00d2      	lsls	r2, r2, #3
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001d94:	6818      	ldr	r0, [r3, #0]
 8001d96:	4020      	ands	r0, r4
 8001d98:	9001      	str	r0, [sp, #4]
    StartUpCounter++;  
 8001d9a:	9800      	ldr	r0, [sp, #0]
 8001d9c:	3001      	adds	r0, #1
 8001d9e:	9000      	str	r0, [sp, #0]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001da0:	9801      	ldr	r0, [sp, #4]
 8001da2:	2800      	cmp	r0, #0
 8001da4:	d102      	bne.n	8001dac <SystemInit+0x74>
 8001da6:	9800      	ldr	r0, [sp, #0]
 8001da8:	4290      	cmp	r0, r2
 8001daa:	d1f3      	bne.n	8001d94 <SystemInit+0x5c>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001dac:	6818      	ldr	r0, [r3, #0]
 8001dae:	2280      	movs	r2, #128	; 0x80
 8001db0:	0292      	lsls	r2, r2, #10
 8001db2:	4002      	ands	r2, r0
 8001db4:	d000      	beq.n	8001db8 <SystemInit+0x80>
  {
    HSEStatus = (uint32_t)0x01;
 8001db6:	2201      	movs	r2, #1
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001db8:	9201      	str	r2, [sp, #4]
  }  

  if (HSEStatus == (uint32_t)0x01)
 8001dba:	9a01      	ldr	r2, [sp, #4]
 8001dbc:	2a01      	cmp	r2, #1
 8001dbe:	d126      	bne.n	8001e0e <SystemInit+0xd6>
  {
    /* Enable Prefetch Buffer and set Flash Latency */
    FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY;
 8001dc0:	4a19      	ldr	r2, [pc, #100]	; (8001e28 <SystemInit+0xf0>)
 8001dc2:	2011      	movs	r0, #17
 8001dc4:	6010      	str	r0, [r2, #0]
 
    /* HCLK = SYSCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	605a      	str	r2, [r3, #4]
      
    /* PCLK = HCLK */
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE_DIV1;
 8001dca:	685a      	ldr	r2, [r3, #4]
 8001dcc:	605a      	str	r2, [r3, #4]

    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	4011      	ands	r1, r2
 8001dd2:	6059      	str	r1, [r3, #4]
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
 8001dd4:	6859      	ldr	r1, [r3, #4]
 8001dd6:	2288      	movs	r2, #136	; 0x88
 8001dd8:	0352      	lsls	r2, r2, #13
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	605a      	str	r2, [r3, #4]
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001dde:	6819      	ldr	r1, [r3, #0]
 8001de0:	2280      	movs	r2, #128	; 0x80
 8001de2:	4082      	lsls	r2, r0
 8001de4:	430a      	orrs	r2, r1

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001de6:	2180      	movs	r1, #128	; 0x80
    /* PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLXTPRE | RCC_CFGR_PLLMULL));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_PREDIV1 | RCC_CFGR_PLLXTPRE_PREDIV1 | RCC_CFGR_PLLMULL6);
            
    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001de8:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001dea:	0489      	lsls	r1, r1, #18
 8001dec:	6818      	ldr	r0, [r3, #0]
 8001dee:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <SystemInit+0xd8>)
 8001df0:	4208      	tst	r0, r1
 8001df2:	d0fb      	beq.n	8001dec <SystemInit+0xb4>
    {
    }

    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001df4:	6851      	ldr	r1, [r2, #4]
 8001df6:	2003      	movs	r0, #3
 8001df8:	4381      	bics	r1, r0
 8001dfa:	6051      	str	r1, [r2, #4]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;    
 8001dfc:	6851      	ldr	r1, [r2, #4]
 8001dfe:	2002      	movs	r0, #2
 8001e00:	4301      	orrs	r1, r0
 8001e02:	6051      	str	r1, [r2, #4]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001e04:	210c      	movs	r1, #12
 8001e06:	685a      	ldr	r2, [r3, #4]
 8001e08:	400a      	ands	r2, r1
 8001e0a:	2a08      	cmp	r2, #8
 8001e0c:	d1fb      	bne.n	8001e06 <SystemInit+0xce>
  /* Disable all interrupts */
  RCC->CIR = 0x00000000;

  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
}
 8001e0e:	bd13      	pop	{r0, r1, r4, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	f8ffb80c 	.word	0xf8ffb80c
 8001e18:	fef6ffff 	.word	0xfef6ffff
 8001e1c:	fffbffff 	.word	0xfffbffff
 8001e20:	ffc0ffff 	.word	0xffc0ffff
 8001e24:	fffffeac 	.word	0xfffffeac
 8001e28:	40022000 	.word	0x40022000

08001e2c <NMI_Handler>:

extern char x;

void NMI_Handler(void)
  {
  }
 8001e2c:	4770      	bx	lr

08001e2e <HardFault_Handler>:

void HardFault_Handler(void)
  {
 8001e2e:	b500      	push	{lr}
 8001e30:	e7fe      	b.n	8001e30 <HardFault_Handler+0x2>

08001e32 <SVC_Handler>:
      }
  }

void SVC_Handler(void)
  {
  }
 8001e32:	4770      	bx	lr

08001e34 <PendSV_Handler>:

void PendSV_Handler(void)
  {
  }
 8001e34:	4770      	bx	lr

08001e36 <SysTick_Handler>:

void SysTick_Handler(void)
  {
  }
 8001e36:	4770      	bx	lr

08001e38 <USART1_IRQHandler>:

void USART1_IRQHandler(void)
  {
 8001e38:	b508      	push	{r3, lr}
  /*
   * USART stty config
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */

    if(USART_GetITStatus(USART1, USART_IT_RXNE) != RESET)
 8001e3a:	4816      	ldr	r0, [pc, #88]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e3c:	4916      	ldr	r1, [pc, #88]	; (8001e98 <USART1_IRQHandler+0x60>)
 8001e3e:	f7ff fd9b 	bl	8001978 <USART_GetITStatus>
 8001e42:	2800      	cmp	r0, #0
 8001e44:	d015      	beq.n	8001e72 <USART1_IRQHandler+0x3a>
      {
        //char in = (USART_ReceiveData(USART1));
        USART_ReceiveData(USART1);
 8001e46:	4813      	ldr	r0, [pc, #76]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e48:	f7ff fc72 	bl	8001730 <USART_ReceiveData>
        //  GPIOC->ODR ^= GPIO_Pin_9;

        //USART_SendData(USART2, 0xF0);
        
        
        USART_ITConfig(USART1, USART_IT_RXNE, DISABLE);
 8001e4c:	4811      	ldr	r0, [pc, #68]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e4e:	4912      	ldr	r1, [pc, #72]	; (8001e98 <USART1_IRQHandler+0x60>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	f7ff fd5b 	bl	800190c <USART_ITConfig>
        USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
 8001e56:	480f      	ldr	r0, [pc, #60]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e58:	4910      	ldr	r1, [pc, #64]	; (8001e9c <USART1_IRQHandler+0x64>)
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f7ff fd56 	bl	800190c <USART_ITConfig>
        
        //USART_SendData(USART2, 0xF0);
        USART_SendData(USART1, x);
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <USART1_IRQHandler+0x68>)
 8001e62:	480c      	ldr	r0, [pc, #48]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e64:	7819      	ldrb	r1, [r3, #0]
 8001e66:	f7ff fc5f 	bl	8001728 <USART_SendData>
        USART_SendData(USART1, 65);
 8001e6a:	480a      	ldr	r0, [pc, #40]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e6c:	2141      	movs	r1, #65	; 0x41
 8001e6e:	f7ff fc5b 	bl	8001728 <USART_SendData>

      }

    if(USART_GetITStatus(USART1, USART_IT_TXE) != RESET)
 8001e72:	4808      	ldr	r0, [pc, #32]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e74:	4909      	ldr	r1, [pc, #36]	; (8001e9c <USART1_IRQHandler+0x64>)
 8001e76:	f7ff fd7f 	bl	8001978 <USART_GetITStatus>
 8001e7a:	2800      	cmp	r0, #0
 8001e7c:	d009      	beq.n	8001e92 <USART1_IRQHandler+0x5a>
      {
        USART_ITConfig(USART1, USART_IT_TXE, DISABLE);
 8001e7e:	4805      	ldr	r0, [pc, #20]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e80:	4906      	ldr	r1, [pc, #24]	; (8001e9c <USART1_IRQHandler+0x64>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	f7ff fd42 	bl	800190c <USART_ITConfig>
        USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);
 8001e88:	4802      	ldr	r0, [pc, #8]	; (8001e94 <USART1_IRQHandler+0x5c>)
 8001e8a:	4903      	ldr	r1, [pc, #12]	; (8001e98 <USART1_IRQHandler+0x60>)
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f7ff fd3d 	bl	800190c <USART_ITConfig>
      }
  }
 8001e92:	bd08      	pop	{r3, pc}
 8001e94:	40013800 	.word	0x40013800
 8001e98:	00050105 	.word	0x00050105
 8001e9c:	00070107 	.word	0x00070107
 8001ea0:	20000010 	.word	0x20000010

08001ea4 <USART2_IRQHandler>:
  
void USART2_IRQHandler(void)
  {
 8001ea4:	b538      	push	{r3, r4, r5, lr}
  /*
   * USART stty config
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */
   rx = 0;
 8001ea6:	4c22      	ldr	r4, [pc, #136]	; (8001f30 <USART2_IRQHandler+0x8c>)
 8001ea8:	2500      	movs	r5, #0

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001eaa:	4822      	ldr	r0, [pc, #136]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001eac:	4922      	ldr	r1, [pc, #136]	; (8001f38 <USART2_IRQHandler+0x94>)
  {
  /*
   * USART stty config
   * 0:4:cbd:8a00:3:1c:7f:15:4:0:1:0:11:13:1a:0:12:f:17:16:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0:0
   */
   rx = 0;
 8001eae:	6025      	str	r5, [r4, #0]

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
 8001eb0:	f7ff fd62 	bl	8001978 <USART_GetITStatus>
 8001eb4:	42a8      	cmp	r0, r5
 8001eb6:	d029      	beq.n	8001f0c <USART2_IRQHandler+0x68>
      {
        rx = 0;
        
        if(binary)
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <USART2_IRQHandler+0x98>)
   */
   rx = 0;

    if(USART_GetITStatus(USART2, USART_IT_RXNE) != RESET)
      {
        rx = 0;
 8001eba:	6025      	str	r5, [r4, #0]
        
        if(binary)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	42ab      	cmp	r3, r5
 8001ec0:	d012      	beq.n	8001ee8 <USART2_IRQHandler+0x44>
          {
            input >>= 1;
 8001ec2:	4c1f      	ldr	r4, [pc, #124]	; (8001f40 <USART2_IRQHandler+0x9c>)
            char in = USART_ReceiveData(USART2);
 8001ec4:	481b      	ldr	r0, [pc, #108]	; (8001f34 <USART2_IRQHandler+0x90>)
      {
        rx = 0;
        
        if(binary)
          {
            input >>= 1;
 8001ec6:	6822      	ldr	r2, [r4, #0]
 8001ec8:	1053      	asrs	r3, r2, #1
 8001eca:	6023      	str	r3, [r4, #0]
            char in = USART_ReceiveData(USART2);
 8001ecc:	f7ff fc30 	bl	8001730 <USART_ReceiveData>
            //GPIOC->ODR ^= GPIO_Pin_9;
            if(in == (char)0xFF)
 8001ed0:	b2c0      	uxtb	r0, r0
 8001ed2:	28ff      	cmp	r0, #255	; 0xff
 8001ed4:	d105      	bne.n	8001ee2 <USART2_IRQHandler+0x3e>
              {
                GPIOC->ODR ^= GPIO_Pin_9;
 8001ed6:	4b1b      	ldr	r3, [pc, #108]	; (8001f44 <USART2_IRQHandler+0xa0>)
 8001ed8:	2280      	movs	r2, #128	; 0x80
 8001eda:	8a99      	ldrh	r1, [r3, #20]
 8001edc:	0092      	lsls	r2, r2, #2
 8001ede:	404a      	eors	r2, r1
 8001ee0:	829a      	strh	r2, [r3, #20]
                //input |= 0x80;
                input = 1;
              }
            input = 3;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	6023      	str	r3, [r4, #0]
 8001ee6:	e004      	b.n	8001ef2 <USART2_IRQHandler+0x4e>
          }
        else
          {
            //GPIOC->ODR ^= GPIO_Pin_9;
            response = USART_ReceiveData(USART2);
 8001ee8:	4812      	ldr	r0, [pc, #72]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001eea:	f7ff fc21 	bl	8001730 <USART_ReceiveData>
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <USART2_IRQHandler+0xa4>)
 8001ef0:	7018      	strb	r0, [r3, #0]
          }
          
        binary = 4;
 8001ef2:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <USART2_IRQHandler+0x98>)
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]

        //in = USART_ReceiveData(USART2);
        //GPIOC->ODR ^= GPIO_Pin_9;

        USART_ITConfig(USART2, USART_IT_RXNE, DISABLE);
 8001ef8:	480e      	ldr	r0, [pc, #56]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001efa:	490f      	ldr	r1, [pc, #60]	; (8001f38 <USART2_IRQHandler+0x94>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	f7ff fd05 	bl	800190c <USART_ITConfig>
        USART_ITConfig(USART2, USART_IT_TXE, ENABLE);
 8001f02:	480c      	ldr	r0, [pc, #48]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001f04:	4911      	ldr	r1, [pc, #68]	; (8001f4c <USART2_IRQHandler+0xa8>)
 8001f06:	2201      	movs	r2, #1
 8001f08:	f7ff fd00 	bl	800190c <USART_ITConfig>
      }

    if(USART_GetITStatus(USART2, USART_IT_TXE) != RESET)
 8001f0c:	4809      	ldr	r0, [pc, #36]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001f0e:	490f      	ldr	r1, [pc, #60]	; (8001f4c <USART2_IRQHandler+0xa8>)
 8001f10:	f7ff fd32 	bl	8001978 <USART_GetITStatus>
 8001f14:	2800      	cmp	r0, #0
 8001f16:	d009      	beq.n	8001f2c <USART2_IRQHandler+0x88>
      {
        USART_ITConfig(USART2, USART_IT_TXE, DISABLE);
 8001f18:	4806      	ldr	r0, [pc, #24]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001f1a:	490c      	ldr	r1, [pc, #48]	; (8001f4c <USART2_IRQHandler+0xa8>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f7ff fcf5 	bl	800190c <USART_ITConfig>
        USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 8001f22:	4804      	ldr	r0, [pc, #16]	; (8001f34 <USART2_IRQHandler+0x90>)
 8001f24:	4904      	ldr	r1, [pc, #16]	; (8001f38 <USART2_IRQHandler+0x94>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	f7ff fcf0 	bl	800190c <USART_ITConfig>
      }
  }
 8001f2c:	bd38      	pop	{r3, r4, r5, pc}
 8001f2e:	46c0      	nop			; (mov r8, r8)
 8001f30:	20000014 	.word	0x20000014
 8001f34:	40004400 	.word	0x40004400
 8001f38:	00050105 	.word	0x00050105
 8001f3c:	20000018 	.word	0x20000018
 8001f40:	20000020 	.word	0x20000020
 8001f44:	48000800 	.word	0x48000800
 8001f48:	20000024 	.word	0x20000024
 8001f4c:	00070107 	.word	0x00070107

08001f50 <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 8001f50:	b508      	push	{r3, lr}
  c++;
 8001f52:	4b08      	ldr	r3, [pc, #32]	; (8001f74 <TIM3_IRQHandler+0x24>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	3201      	adds	r2, #1
  if(c == 100)
 8001f58:	2a64      	cmp	r2, #100	; 0x64
 8001f5a:	d000      	beq.n	8001f5e <TIM3_IRQHandler+0xe>
 8001f5c:	e000      	b.n	8001f60 <TIM3_IRQHandler+0x10>
    {
      //GPIOC->ODR ^= GPIO_Pin_8;
      c = 0;
 8001f5e:	2200      	movs	r2, #0
 8001f60:	601a      	str	r2, [r3, #0]
    }
  count++;
 8001f62:	4b05      	ldr	r3, [pc, #20]	; (8001f78 <TIM3_IRQHandler+0x28>)
  TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);
 8001f64:	4805      	ldr	r0, [pc, #20]	; (8001f7c <TIM3_IRQHandler+0x2c>)
  if(c == 100)
    {
      //GPIOC->ODR ^= GPIO_Pin_8;
      c = 0;
    }
  count++;
 8001f66:	681a      	ldr	r2, [r3, #0]
  TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);
 8001f68:	2102      	movs	r1, #2
  if(c == 100)
    {
      //GPIOC->ODR ^= GPIO_Pin_8;
      c = 0;
    }
  count++;
 8001f6a:	3201      	adds	r2, #1
 8001f6c:	601a      	str	r2, [r3, #0]
  TIM_ClearITPendingBit(TIM3, TIM_IT_CC1);
 8001f6e:	f7ff f9a7 	bl	80012c0 <TIM_ClearITPendingBit>
}
 8001f72:	bd08      	pop	{r3, pc}
 8001f74:	20000028 	.word	0x20000028
 8001f78:	2000001c 	.word	0x2000001c
 8001f7c:	40000400 	.word	0x40000400

08001f80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f80:	480d      	ldr	r0, [pc, #52]	; (8001fb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f82:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001f84:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001f86:	e003      	b.n	8001f90 <LoopCopyDataInit>

08001f88 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001f8a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001f8c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001f8e:	3104      	adds	r1, #4

08001f90 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001f90:	480b      	ldr	r0, [pc, #44]	; (8001fc0 <LoopForever+0xa>)
  ldr r3, =_edata
 8001f92:	4b0c      	ldr	r3, [pc, #48]	; (8001fc4 <LoopForever+0xe>)
  adds r2, r0, r1
 8001f94:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001f96:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001f98:	d3f6      	bcc.n	8001f88 <CopyDataInit>
  ldr r2, =_sbss
 8001f9a:	4a0b      	ldr	r2, [pc, #44]	; (8001fc8 <LoopForever+0x12>)
  b LoopFillZerobss
 8001f9c:	e002      	b.n	8001fa4 <LoopFillZerobss>

08001f9e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001f9e:	2300      	movs	r3, #0
  str  r3, [r2]
 8001fa0:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fa2:	3204      	adds	r2, #4

08001fa4 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001fa4:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <LoopForever+0x16>)
  cmp r2, r3
 8001fa6:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001fa8:	d3f9      	bcc.n	8001f9e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001faa:	f7ff fec5 	bl	8001d38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001fae:	f7ff fd59 	bl	8001a64 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001fb2:	f7ff fe93 	bl	8001cdc <main>

08001fb6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fb6:	e7fe      	b.n	8001fb6 <LoopForever>

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001fb8:	20002000 	.word	0x20002000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001fbc:	08001fec 	.word	0x08001fec
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001fc0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001fc4:	20000014 	.word	0x20000014
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001fc8:	20000014 	.word	0x20000014
  str  r3, [r2]
  adds r2, r2, #4


LoopFillZerobss:
  ldr r3, = _ebss
 8001fcc:	2000002c 	.word	0x2000002c

08001fd0 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fd0:	e7fe      	b.n	8001fd0 <ADC1_COMP_IRQHandler>
	...

08001fd4 <_init>:
 8001fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fd6:	46c0      	nop			; (mov r8, r8)
 8001fd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fda:	bc08      	pop	{r3}
 8001fdc:	469e      	mov	lr, r3
 8001fde:	4770      	bx	lr

08001fe0 <_fini>:
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	46c0      	nop			; (mov r8, r8)
 8001fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fe6:	bc08      	pop	{r3}
 8001fe8:	469e      	mov	lr, r3
 8001fea:	4770      	bx	lr
